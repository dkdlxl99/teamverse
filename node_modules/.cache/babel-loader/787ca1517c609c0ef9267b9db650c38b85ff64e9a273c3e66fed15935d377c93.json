{"ast":null,"code":"var _jsxFileName = \"/Users/woo/Documents/git_local/react/0213/src/components/SessionTimeout.js\",\n  _s = $RefreshSig$();\n// import { useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import { handleLogout } from \"../utils/authUtils\"; // ✅ 로그아웃 함수 사용\n\n// const SessionTimeout = () => {\n//     const navigate = useNavigate();\n//     const [showWarning, setShowWarning] = useState(false); // 🔹 경고창 상태 추가\n//     const warningTimeout = 55 * 60 * 1000; // 55분 후 경고창 표시\n//     const logoutTimeout = warningTimeout + 5 * 60 * 1000; // 🔹 경고창 후 5분 내 응답 없으면 자동 로그아웃\n\n//     useEffect(() => {\n//         // 🔹 55분 후 경고창 표시\n//         const warningTimer = setTimeout(() => {\n//             setShowWarning(true);\n//         }, warningTimeout);\n\n//         // 🔹 60분 후 자동 로그아웃\n//         const logoutTimer = setTimeout(() => {\n//             if (showWarning) {\n//                 handleLogout();\n//                 alert(\"로그인 세션이 만료되었습니다.\");\n//                 navigate(\"/login\");\n//             }\n//         }, logoutTimeout);\n\n//         return () => {\n//             clearTimeout(warningTimer);\n//             clearTimeout(logoutTimer);\n//         };\n//     }, [showWarning, navigate]);\n\n//         // 🔹 사용자가 \"확인\" 버튼을 누르면 토큰 갱신\n//     const handleRefreshToken = async () => {\n//         setShowWarning(false); // 경고창 닫기\n//         try {\n//             const refreshToken = localStorage.getItem(\"refreshToken\");\n//             const response = await axios.post(\"/api/auth/refresh\", { refreshToken });\n//             localStorage.setItem(\"accessToken\", response.data.accessToken);\n//             localStorage.setItem(\"refreshToken\", response.data.refreshToken);\n//             alert(\"세션이 연장되었습니다.\");\n//         } catch (error) {\n//             // if (window.confirm(\"로그인 유지할까요?\")) {\n//             //     navigate(\"/login\");\n//             // } else {\n//             //     handleLogout();\n//             // }\n//             handleLogout();\n//             alert(\"세션 연장 실패. 다시 로그인하세요.\");\n//             navigate(\"/login\");\n//         }\n//     };\n\n//     const handleLogout = () => {\n//         localStorage.removeItem(\"accessToken\");\n//         localStorage.removeItem(\"refreshToken\");\n//         alert(\"자동 로그아웃되었습니다.\");\n//         navigate(\"/login\");\n//     };\n\n//     return null;\n// };\n\n// export default SessionTimeout;\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { handleLogout } from \"../utils/authUtils\"; // ✅ 로그아웃 함수 사용\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SessionTimeout = () => {\n  _s();\n  const navigate = useNavigate();\n  const [showWarning, setShowWarning] = useState(false); // 🔹 경고창 상태 추가\n  const [logoutCountdown, setLogoutCountdown] = useState(5 * 60); // 🔹 로그아웃까지 남은 시간 (5분)\n  const [showLogoutMessage, setShowLogoutMessage] = useState(false); // 🔹 자동 로그아웃 메시지 표시 여부\n  const warningTimeout = 55 * 60 * 1000; // 55분 후 경고창 표시\n  const logoutTimeout = warningTimeout + 5 * 60 * 1000; // 🔹 경고창 후 5분 내 응답 없으면 자동 로그아웃\n\n  useEffect(() => {\n    // 🔹 55분 후 경고창 표시\n    const warningTimer = setTimeout(() => {\n      setShowWarning(true);\n    }, warningTimeout);\n\n    // 🔹 60분 후 자동 로그아웃\n    const logoutTimer = setTimeout(() => {\n      if (showWarning) {\n        handleLogout();\n        setShowLogoutMessage(true); // 자동 로그아웃 메시지 표시\n        setTimeout(() => navigate(\"/login\"), 2000); // 2초 후 로그인 페이지로 이동\n      }\n    }, logoutTimeout);\n\n    // 🔹 경고창이 표시되면 남은 시간 감소 시작\n    let countdownInterval;\n    if (showWarning) {\n      countdownInterval = setInterval(() => {\n        setLogoutCountdown(prev => prev > 0 ? prev - 1 : 0);\n      }, 1000);\n    }\n    return () => {\n      clearTimeout(warningTimer);\n      clearTimeout(logoutTimer);\n      clearInterval(countdownInterval);\n    };\n  }, [showWarning, navigate]);\n\n  // 🔹 사용자가 \"확인\" 버튼을 누르면 토큰 갱신\n  const handleRefreshToken = async () => {\n    setShowWarning(false); // 경고창 닫기\n    setLogoutCountdown(5 * 60); // 타이머 초기화\n    try {\n      const refreshToken = localStorage.getItem(\"refreshToken\");\n      const response = await axios.post(\"/api/auth/refresh\", {\n        refreshToken\n      });\n      localStorage.setItem(\"accessToken\", response.data.accessToken);\n      sessionStorage.setItem(\"accessToken\", response.data.accessToken);\n      alert(\"세션이 연장되었습니다.\");\n    } catch (error) {\n      handleLogout();\n      setShowLogoutMessage(true);\n      setTimeout(() => navigate(\"/login\"), 2000);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [showWarning && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"session-warning\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uB85C\\uADF8\\uC778\\uC744 \\uC720\\uC9C0\\uD560\\uAE4C\\uC694?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uB0A8\\uC740 \\uC2DC\\uAC04: \", Math.floor(logoutCountdown / 60), \"\\uBD84 \", logoutCountdown % 60, \"\\uCD08\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRefreshToken,\n        children: \"\\uD655\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }, this), showLogoutMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"session-logout-message\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uC790\\uB3D9 \\uB85C\\uADF8\\uC544\\uC6C3\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n_s(SessionTimeout, \"I8LdQK5ko0bN4WKeVbFQ4cg0Fd4=\", false, function () {\n  return [useNavigate];\n});\n_c = SessionTimeout;\nexport default SessionTimeout;\nvar _c;\n$RefreshReg$(_c, \"SessionTimeout\");","map":{"version":3,"names":["useEffect","useState","useNavigate","axios","handleLogout","jsxDEV","_jsxDEV","Fragment","_Fragment","SessionTimeout","_s","navigate","showWarning","setShowWarning","logoutCountdown","setLogoutCountdown","showLogoutMessage","setShowLogoutMessage","warningTimeout","logoutTimeout","warningTimer","setTimeout","logoutTimer","countdownInterval","setInterval","prev","clearTimeout","clearInterval","handleRefreshToken","refreshToken","localStorage","getItem","response","post","setItem","data","accessToken","sessionStorage","alert","error","children","className","fileName","_jsxFileName","lineNumber","columnNumber","Math","floor","onClick","_c","$RefreshReg$"],"sources":["/Users/woo/Documents/git_local/react/0213/src/components/SessionTimeout.js"],"sourcesContent":["// import { useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import { handleLogout } from \"../utils/authUtils\"; // ✅ 로그아웃 함수 사용\n\n// const SessionTimeout = () => {\n//     const navigate = useNavigate();\n//     const [showWarning, setShowWarning] = useState(false); // 🔹 경고창 상태 추가\n//     const warningTimeout = 55 * 60 * 1000; // 55분 후 경고창 표시\n//     const logoutTimeout = warningTimeout + 5 * 60 * 1000; // 🔹 경고창 후 5분 내 응답 없으면 자동 로그아웃\n\n\n//     useEffect(() => {\n//         // 🔹 55분 후 경고창 표시\n//         const warningTimer = setTimeout(() => {\n//             setShowWarning(true);\n//         }, warningTimeout);\n\n//         // 🔹 60분 후 자동 로그아웃\n//         const logoutTimer = setTimeout(() => {\n//             if (showWarning) {\n//                 handleLogout();\n//                 alert(\"로그인 세션이 만료되었습니다.\");\n//                 navigate(\"/login\");\n//             }\n//         }, logoutTimeout);\n\n//         return () => {\n//             clearTimeout(warningTimer);\n//             clearTimeout(logoutTimer);\n//         };\n//     }, [showWarning, navigate]);\n\n//         // 🔹 사용자가 \"확인\" 버튼을 누르면 토큰 갱신\n//     const handleRefreshToken = async () => {\n//         setShowWarning(false); // 경고창 닫기\n//         try {\n//             const refreshToken = localStorage.getItem(\"refreshToken\");\n//             const response = await axios.post(\"/api/auth/refresh\", { refreshToken });\n//             localStorage.setItem(\"accessToken\", response.data.accessToken);\n//             localStorage.setItem(\"refreshToken\", response.data.refreshToken);\n//             alert(\"세션이 연장되었습니다.\");\n//         } catch (error) {\n//             // if (window.confirm(\"로그인 유지할까요?\")) {\n//             //     navigate(\"/login\");\n//             // } else {\n//             //     handleLogout();\n//             // }\n//             handleLogout();\n//             alert(\"세션 연장 실패. 다시 로그인하세요.\");\n//             navigate(\"/login\");\n//         }\n//     };\n\n//     const handleLogout = () => {\n//         localStorage.removeItem(\"accessToken\");\n//         localStorage.removeItem(\"refreshToken\");\n//         alert(\"자동 로그아웃되었습니다.\");\n//         navigate(\"/login\");\n//     };\n\n//     return null;\n// };\n\n// export default SessionTimeout;\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { handleLogout } from \"../utils/authUtils\"; // ✅ 로그아웃 함수 사용\n\nconst SessionTimeout = () => {\n    const navigate = useNavigate();\n    const [showWarning, setShowWarning] = useState(false); // 🔹 경고창 상태 추가\n    const [logoutCountdown, setLogoutCountdown] = useState(5 * 60); // 🔹 로그아웃까지 남은 시간 (5분)\n    const [showLogoutMessage, setShowLogoutMessage] = useState(false); // 🔹 자동 로그아웃 메시지 표시 여부\n    const warningTimeout = 55 * 60 * 1000; // 55분 후 경고창 표시\n    const logoutTimeout = warningTimeout + 5 * 60 * 1000; // 🔹 경고창 후 5분 내 응답 없으면 자동 로그아웃\n\n    useEffect(() => {\n        // 🔹 55분 후 경고창 표시\n        const warningTimer = setTimeout(() => {\n            setShowWarning(true);\n        }, warningTimeout);\n\n        // 🔹 60분 후 자동 로그아웃\n        const logoutTimer = setTimeout(() => {\n            if (showWarning) {\n                handleLogout();\n                setShowLogoutMessage(true); // 자동 로그아웃 메시지 표시\n                setTimeout(() => navigate(\"/login\"), 2000); // 2초 후 로그인 페이지로 이동\n            }\n        }, logoutTimeout);\n\n        // 🔹 경고창이 표시되면 남은 시간 감소 시작\n        let countdownInterval;\n        if (showWarning) {\n            countdownInterval = setInterval(() => {\n                setLogoutCountdown((prev) => (prev > 0 ? prev - 1 : 0));\n            }, 1000);\n        }\n\n        return () => {\n            clearTimeout(warningTimer);\n            clearTimeout(logoutTimer);\n            clearInterval(countdownInterval);\n        };\n    }, [showWarning, navigate]);\n\n    // 🔹 사용자가 \"확인\" 버튼을 누르면 토큰 갱신\n    const handleRefreshToken = async () => {\n        setShowWarning(false); // 경고창 닫기\n        setLogoutCountdown(5 * 60); // 타이머 초기화\n        try {\n            const refreshToken = localStorage.getItem(\"refreshToken\");\n            const response = await axios.post(\"/api/auth/refresh\", { refreshToken });\n\n            localStorage.setItem(\"accessToken\", response.data.accessToken);\n            sessionStorage.setItem(\"accessToken\", response.data.accessToken);\n            alert(\"세션이 연장되었습니다.\");\n        } catch (error) {\n            handleLogout();\n            setShowLogoutMessage(true);\n            setTimeout(() => navigate(\"/login\"), 2000);\n        }\n    };\n\n    return (\n        <>\n            {showWarning && (\n                <div className=\"session-warning\">\n                    <p>로그인을 유지할까요?</p>\n                    <p>남은 시간: {Math.floor(logoutCountdown / 60)}분 {logoutCountdown % 60}초</p>\n                    <button onClick={handleRefreshToken}>확인</button>\n                </div>\n            )}\n\n            {showLogoutMessage && (\n                <div className=\"session-logout-message\">\n                    <p>자동 로그아웃되었습니다.</p>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default SessionTimeout;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}