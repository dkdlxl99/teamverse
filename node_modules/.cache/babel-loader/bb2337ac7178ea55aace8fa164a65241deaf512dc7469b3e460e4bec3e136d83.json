{"ast":null,"code":"var _jsxFileName = \"C:\\\\project2\\\\teamverse-2-boot,react - \\uC791\\uC5C5\\\\src\\\\pages\\\\MainPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import Sidebar from \"../components/Sidebar\";\n// import GanttChart from \"../components/GanttChart\";\n// import Chatbox from \"../components/Chatbox\";\n// import Dashboard from \"../components/Dashboard\";\n// import TaskBoard from \"../components/TaskBoard\";\n// import \"../styles/MainPage.css\";\n// import axios from \"axios\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n\n// const MainPage = () => {\n//     const [projects, setProjects] = useState([]);\n//     const [selectedProject, setSelectedProject] = useState(null);\n//     const [showModal, setShowModal] = useState(false);\n//     const [projectName, setProjectName] = useState(\"\");\n//     const [user, setUser] = useState(null);\n//     const { userId } = useParams(); // ✅ userId 가져오기\n//     const navigate = useNavigate(); // 수정: useNavigate 훅 사용\n\n//     // 🔹 로그인한 유저 정보 가져오기\n//     const fetchUserInfo = async () => {\n//         const token = localStorage.getItem(\"accessToken\");\n//         if (!token) {\n//             navigate(\"/login\"); // 수정: 로그인하지 않은 경우 로그인 페이지로 이동\n//             return;\n//         }\n\n//         try {\n//             const response = await axios.get(\"http://localhost:8082/api/auth/me\", {\n//                 headers: {\n//                     Authorization: `Bearer ${token}`,\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//             });\n\n//             console.log(\"✅ 로그인한 사용자 정보:\", response.data);\n//             setUser(response.data);\n//             localStorage.setItem(\"user\", JSON.stringify(response.data));\n\n//             // 수정: 로그인 후 사용자 ID 기반 URL 이동\n//             navigate(`/dashboard/${response.data.id}`);\n\n//         } catch (error) {\n//             console.error(\"❌ 사용자 정보 불러오기 실패:\", error);\n//             navigate(\"/login\"); // 수정: 사용자 정보 로드 실패 시 로그인 페이지로 이동\n\n//         }\n//     };\n\n//     // 🔹 로그인한 유저의 프로젝트 불러오기\n//     const fetchProjects = async () => {\n//         const token = localStorage.getItem(\"accessToken\");\n//         if (!token) return;\n\n//         try {\n//             const response = await axios.get(\"http://localhost:8082/api/user/projects\", {\n//                 headers: {\n//                     Authorization: `Bearer ${token}`,\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//             });\n\n//             console.log(\"✅ 프로젝트 목록:\", response.data);\n//             setProjects(response.data);\n\n//             // const savedProjectId = localStorage.getItem(\"selectedProjectId\");\n//             // if (savedProjectId) {\n//             //     const foundProject = response.data.find(proj => proj.id === parseInt(savedProjectId));\n//             //     if (foundProject) {\n//             //         setSelectedProject(foundProject);\n//             //     }\n//             // }\n\n//             if (response.data.length > 0) {\n//                 const savedProjectId = localStorage.getItem(\"selectedProjectId\");\n//                 if (savedProjectId) {\n//                     const foundProject = response.data.find(proj => proj.id === parseInt(savedProjectId));\n//                     if (foundProject) {\n//                         setSelectedProject(foundProject);\n//                     }\n//                 }\n//             }\n//         } catch (error) {\n//             console.error(\"❌ 프로젝트 목록 불러오기 실패:\", error);\n//             alert(\"프로젝트 데이터를 불러올 수 없습니다.\");\n//         }\n//     };\n\n//     // ✅ 처음 렌더링될 때 유저 정보 및 프로젝트 가져오기\n//     // useEffect(() => {\n//     //     fetchUserInfo();\n//     //     fetchProjects();\n//     // }, []);\n//     useEffect(() => {\n//         const fetchUserInfo = async () => {\n//             const token = localStorage.getItem(\"accessToken\");\n//             if (!token) {\n//                 console.error(\"🚨 토큰이 없습니다! 로그인 페이지로 이동합니다.\");\n//                 navigate(\"/login\");\n//                 return;\n//             }\n\n//             try {\n//                 const response = await axios.get(\"http://localhost:8082/api/auth/me\", {\n//                     headers: { Authorization: `Bearer ${token}` },\n//                 });\n\n//                 console.log(\"📌 MainPage에서 가져온 사용자 정보:\", response.data);\n\n//                 if (response.data.id !== parseInt(userId)) {\n//                     console.warn(\"🚨 URL의 userId와 로그인한 사용자 ID가 다름!\");\n//                     navigate(`/dashboard/${response.data.id}`);\n//                 }\n\n//                 setUser(response.data);\n//             } catch (error) {\n//                 console.error(\"❌ 사용자 정보를 불러오는 데 실패했습니다:\", error);\n//                 navigate(\"/login\"); // 🚨 401 Unauthorized 응답이 오면 로그인 페이지로 이동\n//             }\n//         };\n\n//         fetchUserInfo();\n//     }, [userId, navigate]);\n\n//     const handleCreateProject = async () => {\n//         const token = localStorage.getItem(\"accessToken\");\n//         if (!token) {\n//             alert(\"로그인이 필요합니다.\");\n//             return;\n//         }\n\n//         try {\n//             const response = await axios.post(\n//                 \"http://localhost:8082/api/user/projects\",\n//                 { name: projectName, startDate: new Date().toISOString().split(\"T\")[0] },\n//                 {\n//                     headers: {\n//                         Authorization: `Bearer ${token}`,\n//                         \"Content-Type\": \"application/json\",\n//                     },\n//                 }\n//             );\n\n//             console.log(\"✅ 프로젝트 생성 성공:\", response.data);\n//             setProjects([...projects, response.data]);\n//             setSelectedProject(response.data);\n//             localStorage.setItem(\"selectedProjectId\", response.data.id);\n//             setShowModal(false);\n//         } catch (error) {\n//             console.error(\"❌ 프로젝트 생성 실패:\", error);\n//             alert(\"프로젝트 생성에 실패했습니다.\");\n//         }\n//     };\n\n//     return (\n//         <div className=\"main-page\">\n//             <div className=\"content\">\n//                 {projects.length === 0 ? (\n//                     <div className=\"empty-gantt\">\n//                         <p>현재 프로젝트가 없습니다.</p>\n//                         <button className=\"create-project-btn\" onClick={() => setShowModal(true)}>\n//                             새로운 프로젝트 생성\n//                         </button>\n//                     </div>\n//                 ) : (\n//                     <GanttChart project={projects[0]} />\n//                 )}\n//                 <TaskBoard />\n//                 <Dashboard tasks={[]} />\n//             </div>\n//             <div className=\"chatbox-container\">\n//                 <Sidebar />\n//                 <Chatbox />\n//             </div>\n\n//             {/* 🔹 프로젝트 생성 모달 */}\n//             {showModal && (\n//                 <div className=\"modal\">\n//                     <div className=\"modal-content\">\n//                         <h2>새 프로젝트 생성</h2>\n//                         <input\n//                             type=\"text\"\n//                             placeholder=\"프로젝트 이름\"\n//                             value={projectName}\n//                             onChange={(e) => setProjectName(e.target.value)}\n//                         />\n//                         <button onClick={handleCreateProject}>생성</button>\n//                         <button onClick={() => setShowModal(false)}>취소</button>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default MainPage;\n\nimport React, { useState, useEffect } from \"react\";\nimport Sidebar from \"../components/Sidebar\";\nimport GanttChart from \"../components/GanttChart\";\nimport Chatbox from \"../components/Chatbox\";\nimport Dashboard from \"../components/Dashboard\";\nimport TaskBoard from \"../components/TaskBoard\";\nimport \"../styles/MainPage.css\";\nimport axios from \"axios\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { getAccessToken } from \"../utils/authUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainPage = () => {\n  _s();\n  const [projects, setProjects] = useState([]); // ✅ 프로젝트 목록 저장\n  const [selectedProject, setSelectedProject] = useState(null); // ✅ 선택한 프로젝트 저장\n  const [tasks, setTasks] = useState([]); // ✅ 선택한 프로젝트의 작업 목록\n  const [showModal, setShowModal] = useState(false);\n  const [projectName, setProjectName] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const {\n    userId\n  } = useParams();\n  const navigate = useNavigate();\n\n  // ✅ 프로젝트 목록 불러오기\n  useEffect(() => {\n    const fetchProjects = async () => {\n      const token = getAccessToken(); //sessionStorage에서도 accessToken을 가져올 수 있도록록\n      if (!token) {\n        alert(\"로그인이 필요합니다.\");\n        navigate(\"/login\");\n        return;\n      }\n      try {\n        const response = await axios.get(\"http://localhost:8082/api/user/projects\", {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n          },\n          withCredentials: true // 쿠키 포함하여 요청청\n        });\n\n        // console.log(\"✅ 프로젝트 목록:\", response.data);\n        // setProjects(response.data);\n\n        // // 데이터가 teamProjects 내부에 있는 경우 대응\n        // if (Array.isArray(response.data) && response.data.length > 0) {\n        //     setProjects(response.data);\n        // } else if (response.data.teamProjects) {\n        //     const extractedProjects = response.data.teamProjects.map(tp => tp.project);\n        //     setProjects(extractedProjects);\n        // } else {\n        //     console.warn(\"🚨 예상과 다른 API 응답 구조:\", response.data);\n        // }\n        console.log(\"✅ 프로젝트 목록:\", response.data);\n        if (response.data && response.data.length > 0) {\n          setProjects(response.data);\n          setSelectedProject(response.data[0]); // ✅ 기본적으로 첫 번째 프로젝트 선택\n        }\n      } catch (error) {\n        var _error$response;\n        console.error(\"❌ 프로젝트 목록 불러오기 실패:\", error);\n\n        // 수정: 401 Unauthorized 발생 시 로그인 페이지로 이동\n        if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n          console.warn(\"🚨 인증 만료 - 다시 로그인 필요\");\n          localStorage.removeItem(\"accessToken\");\n          sessionStorage.removeItem(\"accessToken\"); // ✅ 추가: sessionStorage에서도 삭제\n          navigate(\"/login\");\n        }\n        alert(\"프로젝트 데이터를 불러올 수 없습니다.\");\n      }\n    };\n    fetchProjects();\n  }, []);\n\n  // 추가가: 새로운 Access Token 발급\n  const refreshAccessToken = async () => {\n    const refreshToken = localStorage.getItem(\"refreshToken\");\n    if (!refreshToken) {\n      navigate(\"/login\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://localhost:8082/api/auth/refresh\", {\n        refreshToken\n      });\n      localStorage.setItem(\"accessToken\", response.data.accessToken);\n      sessionStorage.setItem(\"accessToken\", response.data.accessToken); // ✅ 추가: sessionStorage에도 저장\n      console.log(\"✅ 새 Access Token 발급:\", response.data.accessToken);\n      return response.data.accessToken;\n    } catch (error) {\n      console.error(\"🚨 토큰 갱신 실패, 다시 로그인 필요:\", error);\n      navigate(\"/login\");\n    }\n  };\n  // ✅ 새로운 프로젝트 생성\n  const handleCreateProject = async () => {\n    const token = getAccessToken(); // sessionStorage에서도 accessToken을 가져올 수 있도록 변경\n\n    if (!token) {\n      alert(\"로그인이 필요합니다.\");\n      navigate(\"/login\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://localhost:8082/api/user/projects\", {\n        name: projectName,\n        startDate: new Date().toISOString().split(\"T\")[0]\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      console.log(\"✅ 프로젝트 생성 성공:\", response.data);\n      setProjects([...projects, response.data]);\n      setSelectedProject(response.data);\n      localStorage.setItem(\"selectedProjectId\", response.data.id);\n      setShowModal(false);\n    } catch (error) {\n      console.error(\"❌ 프로젝트 생성 실패:\", error);\n      alert(\"프로젝트 생성에 실패했습니다.\");\n    }\n  };\n\n  // ✅ 선택한 프로젝트의 작업(Task) 목록 불러오기\n  const fetchTasks = async projectId => {\n    const token = getAccessToken();\n    if (!token) {\n      alert(\"로그인이 필요합니다.\");\n      navigate(\"/login\");\n      return;\n    }\n    try {\n      const response = await axios.get(`http://localhost:8082/api/user/projects/${projectId}/tasks`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        },\n        withCredentials: true\n      });\n      console.log(`✅ 프로젝트 ${projectId}의 작업 목록:`, response.data);\n      setTasks(response.data);\n    } catch (error) {\n      console.error(`❌ 프로젝트 ${projectId}의 작업 목록 불러오기 실패:`, error);\n    }\n  };\n  // ✅ 프로젝트 선택 시 처리 함수\n  const handleProjectSelect = project => {\n    setSelectedProject(project);\n    fetchTasks(project.id);\n    console.log(\"🔍 선택된 프로젝트:\", project);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83D\\uDCC2 \\uD504\\uB85C\\uC81D\\uD2B8 \\uBAA9\\uB85D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 21\n        }, this), projects.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uD604\\uC7AC \\uD504\\uB85C\\uC81D\\uD2B8\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"project-list-container\",\n          children: projects.map(project => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `project-btn ${(selectedProject === null || selectedProject === void 0 ? void 0 : selectedProject.id) === project.id ? \"active\" : \"\"}`,\n              onClick: () => handleProjectSelect(project)\n              // {setSelectedProject(project);\n              // localStorage.setItem(\"selectedProjectId\", project.id)}\n              ,\n              children: (project === null || project === void 0 ? void 0 : project.name) || \"🚨 이름 없음\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 37\n            }, this)\n          }, project.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"create-project-btn\",\n          onClick: () => setShowModal(true),\n          children: \"\\uC0C8\\uB85C\\uC6B4 \\uD504\\uB85C\\uC81D\\uD2B8 \\uC0DD\\uC131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 17\n      }, this), selectedProject ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"\\uD83D\\uDCCA \", selectedProject.name, \" - Gantt Chart\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(GanttChart, {\n          project: selectedProject,\n          tasks: tasks\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-project-selected\",\n        children: \"\\uD83D\\uDCCC \\uD504\\uB85C\\uC81D\\uD2B8\\uB97C \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(TaskBoard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dashboard, {\n        tasks: []\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbox-container\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Chatbox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 13\n    }, this), showModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uC0C8 \\uD504\\uB85C\\uC81D\\uD2B8 \\uC0DD\\uC131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\uD504\\uB85C\\uC81D\\uD2B8 \\uC774\\uB984\",\n          value: projectName,\n          onChange: e => setProjectName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCreateProject,\n          children: \"\\uC0DD\\uC131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowModal(false),\n          children: \"\\uCDE8\\uC18C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 363,\n    columnNumber: 9\n  }, this);\n};\n_s(MainPage, \"3GzchbN8fwP87VwkmXWXX3Xj4JY=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","Sidebar","GanttChart","Chatbox","Dashboard","TaskBoard","axios","useNavigate","useParams","getAccessToken","jsxDEV","_jsxDEV","MainPage","_s","projects","setProjects","selectedProject","setSelectedProject","tasks","setTasks","showModal","setShowModal","projectName","setProjectName","user","setUser","userId","navigate","fetchProjects","token","alert","response","get","headers","Authorization","withCredentials","console","log","data","length","error","_error$response","status","warn","localStorage","removeItem","sessionStorage","refreshAccessToken","refreshToken","getItem","post","setItem","accessToken","handleCreateProject","name","startDate","Date","toISOString","split","id","fetchTasks","projectId","handleProjectSelect","project","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/project2/teamverse-2-boot,react - 작업/src/pages/MainPage.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import Sidebar from \"../components/Sidebar\";\r\n// import GanttChart from \"../components/GanttChart\";\r\n// import Chatbox from \"../components/Chatbox\";\r\n// import Dashboard from \"../components/Dashboard\";\r\n// import TaskBoard from \"../components/TaskBoard\";\r\n// import \"../styles/MainPage.css\";\r\n// import axios from \"axios\";\r\n// import { useNavigate, useParams } from \"react-router-dom\";\r\n\r\n// const MainPage = () => {\r\n//     const [projects, setProjects] = useState([]);\r\n//     const [selectedProject, setSelectedProject] = useState(null);\r\n//     const [showModal, setShowModal] = useState(false);\r\n//     const [projectName, setProjectName] = useState(\"\");\r\n//     const [user, setUser] = useState(null);\r\n//     const { userId } = useParams(); // ✅ userId 가져오기\r\n//     const navigate = useNavigate(); // 수정: useNavigate 훅 사용\r\n\r\n\r\n//     // 🔹 로그인한 유저 정보 가져오기\r\n//     const fetchUserInfo = async () => {\r\n//         const token = localStorage.getItem(\"accessToken\");\r\n//         if (!token) {\r\n//             navigate(\"/login\"); // 수정: 로그인하지 않은 경우 로그인 페이지로 이동\r\n//             return;\r\n//         }\r\n\r\n//         try {\r\n//             const response = await axios.get(\"http://localhost:8082/api/auth/me\", {\r\n//                 headers: {\r\n//                     Authorization: `Bearer ${token}`,\r\n//                     \"Content-Type\": \"application/json\",\r\n//                 },\r\n//             });\r\n\r\n//             console.log(\"✅ 로그인한 사용자 정보:\", response.data);\r\n//             setUser(response.data);\r\n//             localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n\r\n\r\n//             // 수정: 로그인 후 사용자 ID 기반 URL 이동\r\n//             navigate(`/dashboard/${response.data.id}`);\r\n\r\n//         } catch (error) {\r\n//             console.error(\"❌ 사용자 정보 불러오기 실패:\", error);\r\n//             navigate(\"/login\"); // 수정: 사용자 정보 로드 실패 시 로그인 페이지로 이동\r\n\r\n//         }\r\n//     };\r\n\r\n//     // 🔹 로그인한 유저의 프로젝트 불러오기\r\n//     const fetchProjects = async () => {\r\n//         const token = localStorage.getItem(\"accessToken\");\r\n//         if (!token) return;\r\n\r\n//         try {\r\n//             const response = await axios.get(\"http://localhost:8082/api/user/projects\", {\r\n//                 headers: {\r\n//                     Authorization: `Bearer ${token}`,\r\n//                     \"Content-Type\": \"application/json\",\r\n//                 },\r\n//             });\r\n\r\n//             console.log(\"✅ 프로젝트 목록:\", response.data);\r\n//             setProjects(response.data);\r\n\r\n//             // const savedProjectId = localStorage.getItem(\"selectedProjectId\");\r\n//             // if (savedProjectId) {\r\n//             //     const foundProject = response.data.find(proj => proj.id === parseInt(savedProjectId));\r\n//             //     if (foundProject) {\r\n//             //         setSelectedProject(foundProject);\r\n//             //     }\r\n//             // }\r\n\r\n//             if (response.data.length > 0) {\r\n//                 const savedProjectId = localStorage.getItem(\"selectedProjectId\");\r\n//                 if (savedProjectId) {\r\n//                     const foundProject = response.data.find(proj => proj.id === parseInt(savedProjectId));\r\n//                     if (foundProject) {\r\n//                         setSelectedProject(foundProject);\r\n//                     }\r\n//                 }\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"❌ 프로젝트 목록 불러오기 실패:\", error);\r\n//             alert(\"프로젝트 데이터를 불러올 수 없습니다.\");\r\n//         }\r\n//     };\r\n\r\n//     // ✅ 처음 렌더링될 때 유저 정보 및 프로젝트 가져오기\r\n//     // useEffect(() => {\r\n//     //     fetchUserInfo();\r\n//     //     fetchProjects();\r\n//     // }, []);\r\n//     useEffect(() => {\r\n//         const fetchUserInfo = async () => {\r\n//             const token = localStorage.getItem(\"accessToken\");\r\n//             if (!token) {\r\n//                 console.error(\"🚨 토큰이 없습니다! 로그인 페이지로 이동합니다.\");\r\n//                 navigate(\"/login\");\r\n//                 return;\r\n//             }\r\n\r\n//             try {\r\n//                 const response = await axios.get(\"http://localhost:8082/api/auth/me\", {\r\n//                     headers: { Authorization: `Bearer ${token}` },\r\n//                 });\r\n\r\n//                 console.log(\"📌 MainPage에서 가져온 사용자 정보:\", response.data);\r\n\r\n//                 if (response.data.id !== parseInt(userId)) {\r\n//                     console.warn(\"🚨 URL의 userId와 로그인한 사용자 ID가 다름!\");\r\n//                     navigate(`/dashboard/${response.data.id}`);\r\n//                 }\r\n\r\n//                 setUser(response.data);\r\n//             } catch (error) {\r\n//                 console.error(\"❌ 사용자 정보를 불러오는 데 실패했습니다:\", error);\r\n//                 navigate(\"/login\"); // 🚨 401 Unauthorized 응답이 오면 로그인 페이지로 이동\r\n//             }\r\n//         };\r\n\r\n//         fetchUserInfo();\r\n//     }, [userId, navigate]);\r\n\r\n\r\n\r\n//     const handleCreateProject = async () => {\r\n//         const token = localStorage.getItem(\"accessToken\");\r\n//         if (!token) {\r\n//             alert(\"로그인이 필요합니다.\");\r\n//             return;\r\n//         }\r\n\r\n//         try {\r\n//             const response = await axios.post(\r\n//                 \"http://localhost:8082/api/user/projects\",\r\n//                 { name: projectName, startDate: new Date().toISOString().split(\"T\")[0] },\r\n//                 {\r\n//                     headers: {\r\n//                         Authorization: `Bearer ${token}`,\r\n//                         \"Content-Type\": \"application/json\",\r\n//                     },\r\n//                 }\r\n//             );\r\n\r\n//             console.log(\"✅ 프로젝트 생성 성공:\", response.data);\r\n//             setProjects([...projects, response.data]);\r\n//             setSelectedProject(response.data);\r\n//             localStorage.setItem(\"selectedProjectId\", response.data.id);\r\n//             setShowModal(false);\r\n//         } catch (error) {\r\n//             console.error(\"❌ 프로젝트 생성 실패:\", error);\r\n//             alert(\"프로젝트 생성에 실패했습니다.\");\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"main-page\">\r\n//             <div className=\"content\">\r\n//                 {projects.length === 0 ? (\r\n//                     <div className=\"empty-gantt\">\r\n//                         <p>현재 프로젝트가 없습니다.</p>\r\n//                         <button className=\"create-project-btn\" onClick={() => setShowModal(true)}>\r\n//                             새로운 프로젝트 생성\r\n//                         </button>\r\n//                     </div>\r\n//                 ) : (\r\n//                     <GanttChart project={projects[0]} />\r\n//                 )}\r\n//                 <TaskBoard />\r\n//                 <Dashboard tasks={[]} />\r\n//             </div>\r\n//             <div className=\"chatbox-container\">\r\n//                 <Sidebar />\r\n//                 <Chatbox />\r\n//             </div>\r\n\r\n//             {/* 🔹 프로젝트 생성 모달 */}\r\n//             {showModal && (\r\n//                 <div className=\"modal\">\r\n//                     <div className=\"modal-content\">\r\n//                         <h2>새 프로젝트 생성</h2>\r\n//                         <input\r\n//                             type=\"text\"\r\n//                             placeholder=\"프로젝트 이름\"\r\n//                             value={projectName}\r\n//                             onChange={(e) => setProjectName(e.target.value)}\r\n//                         />\r\n//                         <button onClick={handleCreateProject}>생성</button>\r\n//                         <button onClick={() => setShowModal(false)}>취소</button>\r\n//                     </div>\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default MainPage;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport GanttChart from \"../components/GanttChart\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport Dashboard from \"../components/Dashboard\";\r\nimport TaskBoard from \"../components/TaskBoard\";\r\nimport \"../styles/MainPage.css\";\r\nimport axios from \"axios\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { getAccessToken } from \"../utils/authUtils\";\r\n\r\nconst MainPage = () => {\r\n    const [projects, setProjects] = useState([]); // ✅ 프로젝트 목록 저장\r\n    const [selectedProject, setSelectedProject] = useState(null); // ✅ 선택한 프로젝트 저장\r\n    const [tasks, setTasks] = useState([]); // ✅ 선택한 프로젝트의 작업 목록\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [projectName, setProjectName] = useState(\"\");\r\n    const [user, setUser] = useState(null);\r\n    const { userId } = useParams();\r\n    const navigate = useNavigate();\r\n\r\n    // ✅ 프로젝트 목록 불러오기\r\n    useEffect(() => {\r\n        const fetchProjects = async () => {\r\n            const token = getAccessToken(); //sessionStorage에서도 accessToken을 가져올 수 있도록록\r\n            if (!token) {\r\n                alert(\"로그인이 필요합니다.\");\r\n                navigate(\"/login\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const response = await axios.get(\"http://localhost:8082/api/user/projects\", {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    withCredentials: true, // 쿠키 포함하여 요청청\r\n                });\r\n\r\n                // console.log(\"✅ 프로젝트 목록:\", response.data);\r\n                // setProjects(response.data);\r\n\r\n                // // 데이터가 teamProjects 내부에 있는 경우 대응\r\n                // if (Array.isArray(response.data) && response.data.length > 0) {\r\n                //     setProjects(response.data);\r\n                // } else if (response.data.teamProjects) {\r\n                //     const extractedProjects = response.data.teamProjects.map(tp => tp.project);\r\n                //     setProjects(extractedProjects);\r\n                // } else {\r\n                //     console.warn(\"🚨 예상과 다른 API 응답 구조:\", response.data);\r\n                // }\r\n                console.log(\"✅ 프로젝트 목록:\", response.data);\r\n                if (response.data && response.data.length > 0) {\r\n                    setProjects(response.data);\r\n                    setSelectedProject(response.data[0]); // ✅ 기본적으로 첫 번째 프로젝트 선택\r\n                }\r\n            } catch (error) {\r\n                console.error(\"❌ 프로젝트 목록 불러오기 실패:\", error);\r\n\r\n                // 수정: 401 Unauthorized 발생 시 로그인 페이지로 이동\r\n                if (error.response?.status === 401) {\r\n                    console.warn(\"🚨 인증 만료 - 다시 로그인 필요\");\r\n                    localStorage.removeItem(\"accessToken\");\r\n                    sessionStorage.removeItem(\"accessToken\"); // ✅ 추가: sessionStorage에서도 삭제\r\n                    navigate(\"/login\");\r\n                }\r\n\r\n                alert(\"프로젝트 데이터를 불러올 수 없습니다.\");\r\n            }\r\n        };\r\n\r\n        fetchProjects();\r\n    }, []);\r\n\r\n    // 추가가: 새로운 Access Token 발급\r\n    const refreshAccessToken = async () => {\r\n        const refreshToken = localStorage.getItem(\"refreshToken\");\r\n        if (!refreshToken) {\r\n            navigate(\"/login\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.post(\"http://localhost:8082/api/auth/refresh\", {\r\n                refreshToken,\r\n            });\r\n\r\n            localStorage.setItem(\"accessToken\", response.data.accessToken);\r\n            sessionStorage.setItem(\"accessToken\", response.data.accessToken); // ✅ 추가: sessionStorage에도 저장\r\n            console.log(\"✅ 새 Access Token 발급:\", response.data.accessToken);\r\n            return response.data.accessToken;\r\n        } catch (error) {\r\n            console.error(\"🚨 토큰 갱신 실패, 다시 로그인 필요:\", error);\r\n            navigate(\"/login\");\r\n        }\r\n    };\r\n    // ✅ 새로운 프로젝트 생성\r\n    const handleCreateProject = async () => {\r\n        const token = getAccessToken(); // sessionStorage에서도 accessToken을 가져올 수 있도록 변경\r\n\r\n        if (!token) {\r\n            alert(\"로그인이 필요합니다.\");\r\n            navigate(\"/login\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.post(\r\n                \"http://localhost:8082/api/user/projects\",\r\n                { name: projectName, startDate: new Date().toISOString().split(\"T\")[0] },\r\n                {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                }\r\n            );\r\n\r\n            console.log(\"✅ 프로젝트 생성 성공:\", response.data);\r\n            setProjects([...projects, response.data]);\r\n            setSelectedProject(response.data);\r\n            localStorage.setItem(\"selectedProjectId\", response.data.id);\r\n            setShowModal(false);\r\n        } catch (error) {\r\n            console.error(\"❌ 프로젝트 생성 실패:\", error);\r\n            alert(\"프로젝트 생성에 실패했습니다.\");\r\n        }\r\n    };\r\n    \r\n    // ✅ 선택한 프로젝트의 작업(Task) 목록 불러오기\r\n    const fetchTasks = async (projectId) => {\r\n        const token = getAccessToken();\r\n        if (!token) {\r\n            alert(\"로그인이 필요합니다.\");\r\n            navigate(\"/login\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.get(`http://localhost:8082/api/user/projects/${projectId}/tasks`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                withCredentials: true,\r\n            });\r\n\r\n            console.log(`✅ 프로젝트 ${projectId}의 작업 목록:`, response.data);\r\n            setTasks(response.data);\r\n        } catch (error) {\r\n            console.error(`❌ 프로젝트 ${projectId}의 작업 목록 불러오기 실패:`, error);\r\n        }\r\n    };\r\n        // ✅ 프로젝트 선택 시 처리 함수\r\n    const handleProjectSelect = (project) => {\r\n        setSelectedProject(project);\r\n        fetchTasks(project.id);\r\n        console.log(\"🔍 선택된 프로젝트:\", project);\r\n    };\r\n    return (\r\n        <div className=\"main-page\">\r\n            <div className=\"content\">\r\n                {/* ✅ 프로젝트 목록 표시 */}\r\n                <div className=\"project-list\">\r\n                    <h2>📂 프로젝트 목록</h2>\r\n                    {projects.length === 0 ? (\r\n                        <p>현재 프로젝트가 없습니다.</p>\r\n                    ) : (\r\n                        <ul className=\"project-list-container\">\r\n                            {projects.map((project) => (\r\n                                <li key={project.id}>\r\n                                    <button\r\n                                        className={`project-btn ${selectedProject?.id === project.id ? \"active\" : \"\"}`}\r\n                                        onClick={() => \r\n                                            handleProjectSelect(project)\r\n                                            // {setSelectedProject(project);\r\n                                            // localStorage.setItem(\"selectedProjectId\", project.id)}\r\n                                    }\r\n                                    >\r\n                                        {/* 수정: 프로젝트 이름이 없을 경우 대비 */}\r\n                                        {project?.name || \"🚨 이름 없음\"}\r\n                                    </button>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    )}\r\n                    <button className=\"create-project-btn\" onClick={() => setShowModal(true)}>\r\n                        새로운 프로젝트 생성\r\n                    </button>\r\n                </div>\r\n\r\n                {/* ✅ 선택한 프로젝트의 간트 차트 표시 */}\r\n                {selectedProject ? (\r\n                    <div className=\"project-details\">\r\n                        <h2>📊 {selectedProject.name} - Gantt Chart</h2>\r\n                        <GanttChart project={selectedProject} tasks={tasks} />\r\n                    </div>\r\n                ) : (\r\n                    <p className=\"no-project-selected\">📌 프로젝트를 선택해주세요.</p>\r\n                )}\r\n\r\n                <TaskBoard />\r\n                <Dashboard tasks={[]} />\r\n            </div>\r\n            <div className=\"chatbox-container\">\r\n                <Sidebar />\r\n                <Chatbox />\r\n            </div>\r\n\r\n            {/* 🔹 프로젝트 생성 모달 */}\r\n            {showModal && (\r\n                <div className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <h2>새 프로젝트 생성</h2>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"프로젝트 이름\"\r\n                            value={projectName}\r\n                            onChange={(e) => setProjectName(e.target.value)}\r\n                        />\r\n                        <button onClick={handleCreateProject}>생성</button>\r\n                        <button onClick={() => setShowModal(false)}>취소</button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainPage;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAO,wBAAwB;AAC/B,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,SAASC,cAAc,QAAQ,oBAAoB;AAAC,S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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}