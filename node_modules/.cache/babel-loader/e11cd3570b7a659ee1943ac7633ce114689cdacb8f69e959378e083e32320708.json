{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = \"http://localhost:8082\";\nexport const registerUser = async userData => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/register`, userData);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || \"회원가입 실패\";\n  }\n};\n\n//로그인 후 Access Token을 localStorage에 저장\nexport const login = async (email, password) => {\n  try {\n    const response = await axios.post(\"http://localhost:8082/api/user/login\", {\n      email,\n      password\n    });\n\n    // ✅ 로그인 성공 후 Access Token을 localStorage에 저장\n    localStorage.setItem(\"accessToken\", response.data.accessToken);\n    return response.data;\n  } catch (error) {\n    console.error(\"❌ 로그인 실패:\", error);\n    return null;\n  }\n};\nexport const loginUser = async loginData => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/login`, loginData, {\n      withCredentials: true // ✅ 쿠키 기반 인증 사용\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || \"로그인 실패\";\n  }\n};\n\n/** 로그인 상태를 서버에서 직접 조회하는 방식 */\nexport const getUserInfo = async () => {\n  try {\n    // ✅ 쿠키에서 accessToken 추출\n    const cookies = document.cookie.split(\"; \").reduce((acc, cookie) => {\n      const [key, value] = cookie.split(\"=\");\n      acc[key] = value;\n      return acc;\n    }, {});\n    if (!cookies.accessToken) {\n      console.warn(\"⛔️ accessToken 없음: 사용자 정보 요청 안 함\");\n      return null;\n    }\n\n    // ✅ Authorization 헤더에 JWT 포함\n    const response = await axios.get(`${API_BASE_URL}/api/user`, {\n      withCredentials: true,\n      headers: {\n        Authorization: `Bearer ${cookies.accessToken}`\n      }\n    });\n    return response.data; // ✅ 로그인된 사용자 정보 반환\n  } catch (error) {\n    var _error$response3;\n    if (error.response && error.response.status === 403) {\n      console.warn(\"⛔️ 로그인되지 않음: 사용자 정보 요청을 중단합니다.\");\n      return null;\n    }\n    console.error(\"🔴 사용자 정보 조회 실패:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error);\n    return null;\n  }\n};\n\n// export const logoutUser = async () => {\n//   try {\n//     await axios.post(`${API_BASE_URL}/api/user/logout`, {}, { withCredentials: true });\n//   } catch (error) {\n//     console.error(\"로그아웃 실패\", error);\n//   }\n// }\nexport const logoutUser = async () => {\n  try {\n    await axios.post(\"http://localhost:8082/api/user/logout\", {}, {\n      withCredentials: true\n    });\n\n    // Access Token 쿠키 삭제 (쿠키 강제 만료)\n    document.cookie = \"accessToken=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;\";\n    return true; // 로그아웃 성공\n  } catch (error) {\n    console.error(\"로그아웃 실패\", error);\n    return false;\n  }\n};\nexport const refreshToken = async () => {\n  try {\n    // 쿠키에서 refreshToken이 있는지 확인 후 요청\n    const cookies = document.cookie.split(\"; \").reduce((acc, cookie) => {\n      const [key, value] = cookie.split(\"=\");\n      acc[key] = value;\n      return acc;\n    }, {});\n    if (!cookies.refreshToken) {\n      console.warn(\"⛔️ refreshToken 없음: 토큰 갱신 요청하지 않음\");\n      return null; // 요청하지 않고 종료\n    }\n\n    // refreshToken이 있는 경우에만 요청\n    const response = await axios.post(`${API_BASE_URL}/api/user/token/refresh`, {}, {\n      withCredentials: true\n    });\n    console.log(\"🟢 토큰 갱신 성공:\", response.data.accessToken);\n    return response.data.accessToken;\n  } catch (error) {\n    var _error$response4;\n    console.error(\"🔴 토큰 갱신 실패:\", ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error);\n    return null;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","registerUser","userData","response","post","data","error","_error$response","login","email","password","localStorage","setItem","accessToken","console","loginUser","loginData","withCredentials","_error$response2","getUserInfo","cookies","document","cookie","split","reduce","acc","key","value","warn","get","headers","Authorization","_error$response3","status","logoutUser","refreshToken","log","_error$response4"],"sources":["C:/project2/teamverse-2/src/api/authApi.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_BASE_URL = \"http://localhost:8082\";\r\n\r\nexport const registerUser = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${API_BASE_URL}/register`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || \"회원가입 실패\";\r\n  }\r\n};\r\n\r\n//로그인 후 Access Token을 localStorage에 저장\r\nexport const login = async (email, password) => {\r\n  try {\r\n    const response = await axios.post(\"http://localhost:8082/api/user/login\", { email, password });\r\n    \r\n    // ✅ 로그인 성공 후 Access Token을 localStorage에 저장\r\n    localStorage.setItem(\"accessToken\", response.data.accessToken);\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"❌ 로그인 실패:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n\r\nexport const loginUser = async (loginData) => {\r\n  try {\r\n    const response = await axios.post(`${API_BASE_URL}/login`, loginData, {\r\n      withCredentials: true, // ✅ 쿠키 기반 인증 사용\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || \"로그인 실패\";\r\n  }\r\n};\r\n\r\n/** 로그인 상태를 서버에서 직접 조회하는 방식 */\r\nexport const getUserInfo = async () => {\r\n  try {\r\n    // ✅ 쿠키에서 accessToken 추출\r\n    const cookies = document.cookie.split(\"; \").reduce((acc, cookie) => {\r\n      const [key, value] = cookie.split(\"=\");\r\n      acc[key] = value;\r\n      return acc;\r\n    }, {});\r\n\r\n    if (!cookies.accessToken) {\r\n      console.warn(\"⛔️ accessToken 없음: 사용자 정보 요청 안 함\");\r\n      return null;\r\n    }\r\n\r\n    // ✅ Authorization 헤더에 JWT 포함\r\n    const response = await axios.get(`${API_BASE_URL}/api/user`, {\r\n      withCredentials: true, \r\n      headers: {\r\n        Authorization: `Bearer ${cookies.accessToken}`\r\n      }\r\n    });\r\n    return response.data; // ✅ 로그인된 사용자 정보 반환\r\n  } catch (error) {\r\n    if (error.response && error.response.status === 403) {\r\n      console.warn(\"⛔️ 로그인되지 않음: 사용자 정보 요청을 중단합니다.\");\r\n      return null;\r\n    }\r\n    console.error(\"🔴 사용자 정보 조회 실패:\", error.response?.data || error);\r\n    return null;\r\n  }\r\n\r\n};\r\n\r\n\r\n\r\n// export const logoutUser = async () => {\r\n//   try {\r\n//     await axios.post(`${API_BASE_URL}/api/user/logout`, {}, { withCredentials: true });\r\n//   } catch (error) {\r\n//     console.error(\"로그아웃 실패\", error);\r\n//   }\r\n// }\r\nexport const logoutUser = async () => {\r\n  try {\r\n    await axios.post(\"http://localhost:8082/api/user/logout\", {}, { withCredentials: true });\r\n\r\n    // Access Token 쿠키 삭제 (쿠키 강제 만료)\r\n    document.cookie = \"accessToken=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;\";\r\n\r\n    return true; // 로그아웃 성공\r\n  } catch (error) {\r\n    console.error(\"로그아웃 실패\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n\r\nexport const refreshToken = async () => {\r\n  try {\r\n    // 쿠키에서 refreshToken이 있는지 확인 후 요청\r\n    const cookies = document.cookie.split(\"; \").reduce((acc, cookie) => {\r\n      const [key, value] = cookie.split(\"=\");\r\n      acc[key] = value;\r\n      return acc;\r\n    }, {});\r\n\r\n    if (!cookies.refreshToken) {\r\n      console.warn(\"⛔️ refreshToken 없음: 토큰 갱신 요청하지 않음\");\r\n      return null; // 요청하지 않고 종료\r\n    }\r\n\r\n    // refreshToken이 있는 경우에만 요청\r\n    const response = await axios.post(`${API_BASE_URL}/api/user/token/refresh`, {}, { withCredentials: true });\r\n    console.log(\"🟢 토큰 갱신 성공:\", response.data.accessToken);\r\n    return response.data.accessToken;\r\n  } catch (error) {\r\n    console.error(\"🔴 토큰 갱신 실패:\", error.response?.data || error);\r\n    return null;\r\n  }\r\n\r\n  \r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}