{"ast":null,"code":"var _jsxFileName = \"C:\\\\project2\\\\teamverse-2\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useContext } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport MainPage from './pages/MainPage';\nimport LoginPage from './pages/LoginPage';\nimport Dashboard from './pages/Dashboard'; // 🆕 Dashboard 페이지 추가\nimport Navbar from './components/Navbar';\nimport StatisticsPage from './pages/StatisticsPage';\nimport TeamStatusPage from './pages/TeamStatusPage';\nimport ProtectedRoute from './components/ProtectedRoute'; // 🆕 로그인한 사용자만 접근 가능하도록 보호\nimport { refreshToken } from './api/authApi'; // 🆕 Refresh Token을 이용한 Access Token 갱신 함수 추가\nimport { AuthContext } from './context/AuthContext'; // 🆕 로그인 상태 관리를 위한 AuthContext 추가\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const {\n    user,\n    logout\n  } = useContext(AuthContext); // 🆕 현재 로그인된 사용자 정보와 로그아웃 함수 가져오기\n\n  useEffect(() => {\n    // 🆕 10분마다 Access Token 자동 갱신\n    const interval = setInterval(async () => {\n      try {\n        const newAccessToken = await refreshToken(); // Refresh Token을 이용하여 Access Token 갱신 시도\n        if (newAccessToken) {\n          console.log(\"🟢 새 토큰 발급:\", newAccessToken);\n          localStorage.setItem(\"accessToken\", newAccessToken); // 🆕 새로운 Access Token을 localStorage에 저장\n        } else {\n          console.warn(\"🔴 토큰 갱신 실패: 로그아웃 처리\");\n          logout(); // 🆕 토큰 갱신 실패 시 자동 로그아웃\n        }\n      } catch (error) {\n        console.error(\"🔴 토큰 갱신 중 오류 발생:\", error);\n        logout(); // 🆕 오류 발생 시 자동 로그아웃\n      }\n    }, 10 * 60 * 1000); // 🆕 10분(600,000ms)마다 실행\n\n    return () => clearInterval(interval); // 🆕 컴포넌트가 언마운트될 때 interval 제거\n  }, [logout]); // 🆕 로그아웃 함수가 변경될 경우 useEffect 재실행\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(MainPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 36\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        element: /*#__PURE__*/_jsxDEV(LoginPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/dashboard\",\n        element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n          children: [\" \", /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/statistics\",\n        element: /*#__PURE__*/_jsxDEV(StatisticsPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 46\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), \" \", /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/team-status\",\n        element: /*#__PURE__*/_jsxDEV(TeamStatusPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 47\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"5hAIGgbulSQXWttK2KFjkaT8gGI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useContext","Routes","Route","MainPage","LoginPage","Dashboard","Navbar","StatisticsPage","TeamStatusPage","ProtectedRoute","refreshToken","AuthContext","jsxDEV","_jsxDEV","App","_s","user","logout","interval","setInterval","newAccessToken","console","log","localStorage","setItem","warn","error","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["C:/project2/teamverse-2/src/App.js"],"sourcesContent":["import React, { useEffect, useContext } from 'react';\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport MainPage from './pages/MainPage';\r\nimport LoginPage from './pages/LoginPage';\r\nimport Dashboard from './pages/Dashboard'; // 🆕 Dashboard 페이지 추가\r\nimport Navbar from './components/Navbar';\r\nimport StatisticsPage from './pages/StatisticsPage';\r\nimport TeamStatusPage from './pages/TeamStatusPage';\r\nimport ProtectedRoute from './components/ProtectedRoute'; // 🆕 로그인한 사용자만 접근 가능하도록 보호\r\nimport { refreshToken } from './api/authApi'; // 🆕 Refresh Token을 이용한 Access Token 갱신 함수 추가\r\nimport { AuthContext } from './context/AuthContext'; // 🆕 로그인 상태 관리를 위한 AuthContext 추가\r\n\r\nfunction App() {\r\n  const { user, logout } = useContext(AuthContext); // 🆕 현재 로그인된 사용자 정보와 로그아웃 함수 가져오기\r\n\r\n  useEffect(() => {\r\n    // 🆕 10분마다 Access Token 자동 갱신\r\n    const interval = setInterval(async () => {\r\n      try {\r\n        const newAccessToken = await refreshToken(); // Refresh Token을 이용하여 Access Token 갱신 시도\r\n        if (newAccessToken) {\r\n          console.log(\"🟢 새 토큰 발급:\", newAccessToken);\r\n          localStorage.setItem(\"accessToken\", newAccessToken); // 🆕 새로운 Access Token을 localStorage에 저장\r\n        } else {\r\n          console.warn(\"🔴 토큰 갱신 실패: 로그아웃 처리\");\r\n          logout(); // 🆕 토큰 갱신 실패 시 자동 로그아웃\r\n        }\r\n      } catch (error) {\r\n        console.error(\"🔴 토큰 갱신 중 오류 발생:\", error);\r\n        logout(); // 🆕 오류 발생 시 자동 로그아웃\r\n      }\r\n    }, 10 * 60 * 1000); // 🆕 10분(600,000ms)마다 실행\r\n\r\n    return () => clearInterval(interval); // 🆕 컴포넌트가 언마운트될 때 interval 제거\r\n  }, [logout]); // 🆕 로그아웃 함수가 변경될 경우 useEffect 재실행\r\n\r\n  return (\r\n      <div className=\"app\">\r\n        <Navbar />\r\n        <Routes>\r\n          <Route path=\"/\" element={<MainPage />} />\r\n          <Route path=\"/login\" element={<LoginPage />} />\r\n          <Route path=\"/dashboard\" element={\r\n            <ProtectedRoute> {/* 🆕 로그인한 사용자만 Dashboard 접근 가능하도록 보호 */}\r\n              <Dashboard />\r\n            </ProtectedRoute>\r\n          } />\r\n          <Route path=\"/statistics\" element={<StatisticsPage />} /> {/* 🆕 StatisticsPage로 이동하는 경로 설정 */}\r\n          <Route path=\"/team-status\" element={<TeamStatusPage />} /> {/* 🆕 TeamStatusPage로 이동하는 경로 설정 */}\r\n        </Routes>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}