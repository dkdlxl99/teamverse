{"ast":null,"code":"var _jsxFileName = \"C:\\\\project2\\\\teamverse-2-boot,react - \\uC791\\uC5C5\\\\src\\\\components\\\\GanttChart.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import '../styles/GanttChart.css';\n\n// // 파스텔 톤 색상 생성 함수\n// const generatePastelColor = () => {\n//   const r = Math.floor((Math.random() * 127) + 127); // 127~254\n//   const g = Math.floor((Math.random() * 127) + 127); // 127~254\n//   const b = Math.floor((Math.random() * 127) + 127); // 127~254\n//   return `rgb(${r}, ${g}, ${b})`;\n// };\n\n// const GanttChart = ({ project }) => {\n//   const initialTasks = [\n//     { id: 1, name: 'Design Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 8), progress: 100 },\n//     { id: 2, name: 'Development Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 9), progress: 75 },\n//     { id: 3, name: 'Testing Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 10), progress: 30 },\n//   ];\n\n//   const [tasks, setTasks] = useState([]);\n//   const [viewMode, setViewMode] = useState('week'); // 현재 보기 모드 (week, month, year)\n//   const [currentMonth, setCurrentMonth] = useState(new Date());\n//   const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n//   const today = new Date();\n\n//   useEffect(() => {\n\n//     if (!project) {\n//       setTasks([]); // ✅ 프로젝트 없을 경우 빈 상태 유지\n//       return;\n//     }\n\n//     console.log(\"📌 선택된 프로젝트:\", project.name); // ✅ 콘솔에서 프로젝트 이름 확인\n\n//     const savedColors = JSON.parse(localStorage.getItem('taskColors')) || {};\n//     const tasksWithColors = initialTasks.map((task) => ({\n//       ...task,\n//       color: savedColors[task.id] || generatePastelColor(),\n//     }));\n\n//     const newColors = tasksWithColors.reduce((acc, task) => {\n//       if (!savedColors[task.id]) {\n//         acc[task.id] = task.color;\n//       }\n//       return acc;\n//     }, {});\n//     localStorage.setItem('taskColors', JSON.stringify({ ...savedColors, ...newColors }));\n\n//     setTasks(tasksWithColors);\n//   },[project]);\n\n//   const getWeekDates = () => {\n//     const today = new Date();\n//     const firstDayOfWeek = today.getDate() - today.getDay();\n//     return Array.from({ length: 7 }, (_, i) => {\n//       const date = new Date(today.getFullYear(), today.getMonth(), firstDayOfWeek + i);\n//       return {\n//         day: date.toLocaleDateString('en-US', { weekday: 'short' }),\n//         date: new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0),\n//       };\n//     });\n//   };\n\n//   const getMonthDates = () => {\n//     const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n//     const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n//     const dates = [];\n\n//     // 첫 주 빈 칸\n//     for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\n//       dates.push(null);\n//     }\n\n//     // 해당 월의 모든 날짜\n//     for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\n//       const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\n//       dates.push(date);\n//     }\n\n//     return dates;\n//   };\n\n//   const handlePreviousMonth = () => {\n//     setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\n//   };\n\n//   const handleNextMonth = () => {\n//     setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\n//   };\n\n//   const getYearMonths = () => {\n//     return Array.from({ length: 12 }, (_, index) => {\n//       const monthDate = new Date(currentYear, index, 1);\n//       return {\n//         name: monthDate.toLocaleDateString('en-US', { month: 'short' }).toUpperCase(),\n//         date: monthDate,\n//       };\n//     });\n//   };\n\n//   const isToday = (date) => {\n//     // date가 유효한 경우에만 체크\n//     return date && today.getFullYear() === date.getFullYear() &&\n//       today.getMonth() === date.getMonth() &&\n//       today.getDate() === date.getDate();\n//   };\n\n//   const weekDates = getWeekDates();\n//   const monthDates = getMonthDates();\n//   const yearMonths = getYearMonths();\n\n//   const handlePreviousYear = () => {\n//     setCurrentYear((prevYear) => prevYear - 1);\n//   };\n\n//   const handleNextYear = () => {\n//     setCurrentYear((prevYear) => prevYear + 1);\n//   };\n\n//   const isTaskInMonth = (monthDate, task) => {\n//     const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n//     const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\n//     return task.start <= monthEnd && task.end >= monthStart;\n//   };\n\n//   const isTodayInMonth = (monthDate) => {\n//     return (\n//       today.getFullYear() === monthDate.getFullYear() &&\n//       today.getMonth() === monthDate.getMonth()\n//     );\n//   };\n\n//     const isTaskOnDate = (date, task) => {\n//     return date >= task.start && date <= task.end;\n//   };\n\n//   const calculateProgressBarStyle = (task) => {\n//     const weekStart = weekDates[0].date.getTime();\n//     const weekEnd = weekDates[6].date.getTime() + 24 * 60 * 60 * 1000 - 1;\n\n//     const taskStart = Math.max(task.start.getTime(), weekStart);\n//     const taskEnd = Math.min(task.end.getTime() + 24 * 60 * 60 * 1000 - 1, weekEnd);\n\n//     if (taskEnd < weekStart || taskStart > weekEnd) {\n//       return { display: 'none' };\n//     }\n\n//     const totalWeekMs = weekEnd - weekStart + 1;\n//     const offset = ((taskStart - weekStart) / totalWeekMs) * 100;\n//     const width = ((taskEnd - taskStart) / totalWeekMs) * 100;\n\n//     return {\n//       left: `${offset}%`,\n//       width: `${width}%`,\n//     };\n//   };\n\n//   const ProgressBar = ({ task, progressBarStyle }) => {\n//     return (\n//       <div className=\"progress-bar\" style={progressBarStyle}>\n//         <div\n//           className=\"progress\"\n//           style={{\n//             width: `${task.progress}%`,\n//             backgroundColor: task.color,\n//           }}\n//         >\n//           <span className=\"task-name\">{task.name}</span>\n//         </div>\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div className=\"gantt-chart\">\n//             {project ? (\n//                 <>\n//                     <h2 className=\"project-title\">📌 {project.name}</h2> \n//                     <p>프로젝트 시작일: {project.startDate}</p>\n//                 </>\n//             ) : (\n//                 <p>현재 선택된 프로젝트가 없습니다.</p>\n//             )}\n//       {viewMode === 'week' && (\n//         <>\n//           <div className=\"calendar\">\n//             {weekDates.map((day, index) => (\n//             <div key={index} className={`calendar-day ${isToday(day.date) ? 'today' : ''}`}>\n//                 <div className=\"day-name\">{day.day}\n//                 <div className=\"day-date\">\n//                   {day.date.toLocaleDateString('en-US', { day: 'numeric', month: 'short' })}\n//                 </div>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"task-container\">\n//             {tasks.map((task) => {\n//               const progressBarStyle = calculateProgressBarStyle(task);\n//               return (\n//                 <div key={task.id} className=\"task\">\n//                   <ProgressBar task={task} progressBarStyle={progressBarStyle} />\n//                 </div>\n//               );\n//             })}\n//           </div>\n//         </>\n//       )}\n//       {viewMode === 'month' && (\n//         <div className=\"month-calendar\">\n//           <div className=\"month-header\">\n//             <button className=\"month-nav\" onClick={handlePreviousMonth}>\n//               &lt;\n//             </button>\n//             <div className=\"month-title\">\n//               {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n//             </div>\n//             <button className=\"month-nav\" onClick={handleNextMonth}>\n//               &gt;\n//             </button>\n//           </div>\n//           <div className=\"calendar-grid\">\n//             {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\n//               <div key={day} className=\"calendar-day-name\">\n//                 {day}\n//               </div>\n//             ))}\n//             {monthDates.map((date, index) => (\n//               <div key={index} className={`calendar-day ${date && isToday(date) ? 'today' : ''}`}>\n//                 {date && (\n//                   <>\n//                     <div className=\"day-date\">{date.getDate()}</div>\n//                     <div className=\"task-indicator-container\">\n//                       {tasks.map(\n//                         (task) =>\n//                           isTaskOnDate(date, task) && (\n//                             <div key={task.id} className=\"task-indicator task-bar\" // 막대 모양\n//                             style={{ backgroundColor: task.color }}></div>\n//                           )\n//                       )}\n//                     </div>\n//                   </>\n//                 )}\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       )}\n\n//       {viewMode === 'year' && (\n//               <div className=\"year-calendar\">\n//                 <div className=\"year-header\">\n//                   <button className=\"year-nav\" onClick={handlePreviousYear}>\n//                     &lt;\n//                   </button>\n//                   <div className=\"year-title\">{currentYear}</div>\n//                   <button className=\"year-nav\" onClick={handleNextYear}>\n//                     &gt;\n//                   </button>\n//                 </div>\n//                 <div className=\"year-grid\">\n//                   {yearMonths.map((month, index) => (\n//                     <div key={index} className=\"year-month\">\n//                       <div className={`month-name ${isTodayInMonth(month.date) ? 'today' : ''}`}>\n//                         {month.name}\n//                       </div>\n//                       <div className=\"month-tasks\">\n//                         {tasks.map(\n//                           (task) =>\n//                             isTaskInMonth(month.date, task) && (\n//                               <div\n//                                 key={task.id}\n//                                 className=\"task-indicator task-circle\"\n//                                 style={{ backgroundColor: task.color }}\n//                               ></div>\n//                             )\n//                         )}\n//                       </div>\n//                     </div>\n//                   ))}\n//                 </div>\n//               </div>\n//             )}\n//         <div className=\"view-mode-buttons\">\n//         <button\n//           className={`view-button ${viewMode === 'week' ? 'active' : ''}`}\n//           onClick={() => setViewMode('week')}\n//         >\n//           Week\n//         </button>\n//         <button\n//           className={`view-button ${viewMode === 'month' ? 'active' : ''}`}\n//           onClick={() => setViewMode('month')}\n//         >\n//           Month\n//         </button>\n//         <button\n//           className={`view-button ${viewMode === 'year' ? 'active' : ''}`}\n//           onClick={() => setViewMode('year')}\n//         >\n//           Year\n//         </button>\n//         </div>\n//     </div>\n//   );\n// };\n\n// export default GanttChart;\n\nimport React, { useState, useEffect } from 'react';\nimport '../styles/GanttChart.css';\n\n// ✅ 수정: Task 데이터를 props로 받아서 사용하도록 변경\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GanttChart = ({\n  tasks\n}) => {\n  _s();\n  const [viewMode, setViewMode] = useState('week'); // ✅ 현재 보기 모드 (week, month, year)\n  const [currentWeekStart, setCurrentWeekStart] = useState(getStartOfWeek(new Date()));\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const today = new Date();\n\n  // ✅ 삭제: 기존 더미 데이터 삭제 필요\n  // const initialTasks = [\n  //   { id: 1, name: 'Design Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 8), progress: 100 },\n  //   { id: 2, name: 'Development Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 9), progress: 75 },\n  //   { id: 3, name: 'Testing Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 10), progress: 30 },\n  // ];\n\n  const isTaskOnDate = (date, task) => {\n    const taskStart = new Date(task.start).setHours(0, 0, 0, 0);\n    const taskEnd = new Date(task.end).setHours(23, 59, 59, 999);\n    const checkDate = new Date(date).setHours(12, 0, 0, 0); // ✅ 날짜 중앙으로 설정 (비교 오류 방지)\n\n    return checkDate >= taskStart && checkDate <= taskEnd;\n  };\n\n  // Task 데이터를 받아서 Gantt 차트에 반영\n  const formattedTasks = tasks.map(task => ({\n    id: task.id,\n    name: task.name,\n    start: new Date(task.startDate),\n    end: new Date(new Date(task.dueDate).setHours(23, 59, 59, 999)),\n    // ✅ 마감일 23:59:59로 설정\n    progress: 50 // ✅ 진행률 기본값 (추후 백엔드에서 가져오도록 수정 가능)\n  }));\n\n  // ✅ 현재 주의 시작 날짜 계산\n  function getStartOfWeek(date) {\n    const start = new Date(date);\n    start.setDate(start.getDate() - start.getDay()); // 일요일로 설정\n    start.setHours(0, 0, 0, 0);\n    return start;\n  }\n\n  // ✅ 한 주의 날짜 가져오기\n  // const getWeekDates = () => {\n  //   const today = new Date();\n  //   const firstDayOfWeek = today.getDate() - today.getDay();\n  //   return Array.from({ length: 7 }, (_, i) => {\n  //     const date = new Date(today.getFullYear(), today.getMonth(), firstDayOfWeek + i);\n  //     return {\n  //       day: date.toLocaleDateString('en-US', { weekday: 'short' }),\n  //       date: new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0),\n  //     };\n  //   });\n  // };\n  const getWeekDates = () => {\n    return Array.from({\n      length: 7\n    }, (_, i) => {\n      const date = new Date(currentWeekStart);\n      date.setDate(currentWeekStart.getDate() + i);\n      return {\n        day: date.toLocaleDateString('en-US', {\n          weekday: 'short'\n        }),\n        date: new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0)\n      };\n    });\n  };\n\n  // ✅ 이전 주 보기\n  const handlePreviousWeek = () => {\n    const prevWeek = new Date(currentWeekStart);\n    prevWeek.setDate(prevWeek.getDate() - 7);\n    setCurrentWeekStart(prevWeek);\n  };\n\n  // ✅ 다음 주 보기\n  const handleNextWeek = () => {\n    const nextWeek = new Date(currentWeekStart);\n    nextWeek.setDate(nextWeek.getDate() + 7);\n    setCurrentWeekStart(nextWeek);\n  };\n  const getMonthDates = () => {\n    const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n    const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n    const dates = [];\n    for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\n      dates.push(null);\n    }\n    for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\n      const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\n      dates.push(date);\n    }\n    return dates;\n  };\n  const handlePreviousMonth = () => {\n    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\n  };\n  const handleNextMonth = () => {\n    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\n  };\n  const getYearMonths = () => {\n    return Array.from({\n      length: 12\n    }, (_, index) => {\n      const monthDate = new Date(currentYear, index, 1);\n      return {\n        name: monthDate.toLocaleDateString('en-US', {\n          month: 'short'\n        }).toUpperCase(),\n        date: monthDate\n      };\n    });\n  };\n\n  // ✅ 주어진 Task의 위치와 길이를 계산하여 한 주 안에서 표시\n  // const calculateProgressBarStyle = (task) => {\n  //   const totalDays = 7;\n  //   const weekStart = new Date();\n  //   weekStart.setDate(weekStart.getDate() - weekStart.getDay());\n\n  //   const startOffset = Math.max(0, (task.start - weekStart) / (1000 * 60 * 60 * 24));\n  //   const duration = Math.max(1, (task.end - task.start) / (1000 * 60 * 60 * 24));\n\n  //   return {\n  //     left: `${(startOffset / totalDays) * 100}%`,\n  //     width: `${(duration / totalDays) * 100}%`,\n  //   };\n  // };\n  const calculateProgressBarStyle = task => {\n    if (!(task.start instanceof Date) || !(task.end instanceof Date)) {\n      console.error(\"❌ `task.start` 또는 `task.end`가 Date 객체가 아닙니다:\", task);\n      return {\n        display: 'none'\n      };\n    }\n    const weekStart = currentWeekStart.getTime();\n    const weekEnd = new Date(weekStart);\n    weekEnd.setDate(weekEnd.getDate() + 7);\n    const taskStart = Math.max(task.start.getTime(), weekStart);\n    const taskEnd = Math.min(task.end.getTime(), weekEnd);\n    if (taskEnd < weekStart || taskStart > weekEnd) {\n      return {\n        display: 'none'\n      };\n    }\n    const totalWeekMs = weekEnd - weekStart;\n    const offset = (taskStart - weekStart) / totalWeekMs * 100;\n    const width = (taskEnd - taskStart) / totalWeekMs * 100;\n    return {\n      left: `${offset}%`,\n      width: `${width}%`\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gantt-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"project-title\",\n      children: \"\\uD83D\\uDCCA \\uC5C5\\uBB34 \\uC77C\\uC815 (Gantt Chart)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 7\n    }, this), viewMode === 'week' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"week-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePreviousWeek,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [currentWeekStart.toLocaleDateString('en-US', {\n            month: 'long',\n            day: 'numeric'\n          }), \" ~ \", new Date(currentWeekStart.getTime() + 6 * 24 * 60 * 60 * 1000).toLocaleDateString('en-US', {\n            month: 'long',\n            day: 'numeric'\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextWeek,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar\",\n        children: getWeekDates().map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-day\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"day-name\",\n            children: day.day\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"day-date\",\n            children: day.date.toLocaleDateString('en-US', {\n              day: 'numeric',\n              month: 'short'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-container\",\n        children: formattedTasks.map(task => {\n          const progressBarStyle = calculateProgressBarStyle(task);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-bar\",\n              style: progressBarStyle,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progress\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"task-name\",\n                  children: task.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 496,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 495,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 19\n            }, this)\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), viewMode === 'month' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"month-calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"month-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"month-nav\",\n          onClick: handlePreviousMonth,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"month-title\",\n          children: currentMonth.toLocaleDateString('en-US', {\n            month: 'long',\n            year: 'numeric'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"month-nav\",\n          onClick: handleNextMonth,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-grid\",\n        children: getMonthDates().map((date, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-day\",\n          children: date && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"day-date\",\n              children: date.getDate()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-indicator-container\",\n              children: tasks.map(task => isTaskOnDate(date, task) && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"task-indicator task-bar\",\n                style: {\n                  backgroundColor: task.color\n                }\n              }, task.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 529,\n                columnNumber: 29\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"view-mode-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'week' ? 'active' : ''}`,\n        onClick: () => setViewMode('week'),\n        children: \"Week\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'month' ? 'active' : ''}`,\n        onClick: () => setViewMode('month'),\n        children: \"Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 469,\n    columnNumber: 5\n  }, this);\n};\n_s(GanttChart, \"LyfnJf+H3U6upcVxeLT+KmgL2fo=\");\n_c = GanttChart;\nexport default GanttChart;\nvar _c;\n$RefreshReg$(_c, \"GanttChart\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","GanttChart","tasks","_s","viewMode","setViewMode","currentWeekStart","setCurrentWeekStart","getStartOfWeek","Date","currentMonth","setCurrentMonth","currentYear","setCurrentYear","getFullYear","today","isTaskOnDate","date","task","taskStart","start","setHours","taskEnd","end","checkDate","formattedTasks","map","id","name","startDate","dueDate","progress","setDate","getDate","getDay","getWeekDates","Array","from","length","_","i","day","toLocaleDateString","weekday","getMonth","handlePreviousWeek","prevWeek","handleNextWeek","nextWeek","getMonthDates","firstDayOfMonth","lastDayOfMonth","dates","push","handlePreviousMonth","handleNextMonth","getYearMonths","index","monthDate","month","toUpperCase","calculateProgressBarStyle","console","error","display","weekStart","getTime","weekEnd","Math","max","min","totalWeekMs","offset","width","left","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","progressBarStyle","style","year","backgroundColor","color","_c","$RefreshReg$"],"sources":["C:/project2/teamverse-2-boot,react - 작업/src/components/GanttChart.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import '../styles/GanttChart.css';\r\n\r\n// // 파스텔 톤 색상 생성 함수\r\n// const generatePastelColor = () => {\r\n//   const r = Math.floor((Math.random() * 127) + 127); // 127~254\r\n//   const g = Math.floor((Math.random() * 127) + 127); // 127~254\r\n//   const b = Math.floor((Math.random() * 127) + 127); // 127~254\r\n//   return `rgb(${r}, ${g}, ${b})`;\r\n// };\r\n\r\n// const GanttChart = ({ project }) => {\r\n//   const initialTasks = [\r\n//     { id: 1, name: 'Design Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 8), progress: 100 },\r\n//     { id: 2, name: 'Development Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 9), progress: 75 },\r\n//     { id: 3, name: 'Testing Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 10), progress: 30 },\r\n//   ];\r\n\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [viewMode, setViewMode] = useState('week'); // 현재 보기 모드 (week, month, year)\r\n//   const [currentMonth, setCurrentMonth] = useState(new Date());\r\n//   const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\r\n//   const today = new Date();\r\n\r\n\r\n//   useEffect(() => {\r\n\r\n//     if (!project) {\r\n//       setTasks([]); // ✅ 프로젝트 없을 경우 빈 상태 유지\r\n//       return;\r\n//     }\r\n\r\n//     console.log(\"📌 선택된 프로젝트:\", project.name); // ✅ 콘솔에서 프로젝트 이름 확인\r\n\r\n//     const savedColors = JSON.parse(localStorage.getItem('taskColors')) || {};\r\n//     const tasksWithColors = initialTasks.map((task) => ({\r\n//       ...task,\r\n//       color: savedColors[task.id] || generatePastelColor(),\r\n//     }));\r\n\r\n//     const newColors = tasksWithColors.reduce((acc, task) => {\r\n//       if (!savedColors[task.id]) {\r\n//         acc[task.id] = task.color;\r\n//       }\r\n//       return acc;\r\n//     }, {});\r\n//     localStorage.setItem('taskColors', JSON.stringify({ ...savedColors, ...newColors }));\r\n\r\n//     setTasks(tasksWithColors);\r\n//   },[project]);\r\n\r\n\r\n\r\n//   const getWeekDates = () => {\r\n//     const today = new Date();\r\n//     const firstDayOfWeek = today.getDate() - today.getDay();\r\n//     return Array.from({ length: 7 }, (_, i) => {\r\n//       const date = new Date(today.getFullYear(), today.getMonth(), firstDayOfWeek + i);\r\n//       return {\r\n//         day: date.toLocaleDateString('en-US', { weekday: 'short' }),\r\n//         date: new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0),\r\n//       };\r\n//     });\r\n//   };\r\n\r\n//   const getMonthDates = () => {\r\n//     const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\r\n//     const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\r\n//     const dates = [];\r\n\r\n//     // 첫 주 빈 칸\r\n//     for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\r\n//       dates.push(null);\r\n//     }\r\n\r\n//     // 해당 월의 모든 날짜\r\n//     for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\r\n//       const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\r\n//       dates.push(date);\r\n//     }\r\n\r\n//     return dates;\r\n//   };\r\n\r\n//   const handlePreviousMonth = () => {\r\n//     setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\r\n//   };\r\n\r\n//   const handleNextMonth = () => {\r\n//     setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\r\n//   };\r\n\r\n//   const getYearMonths = () => {\r\n//     return Array.from({ length: 12 }, (_, index) => {\r\n//       const monthDate = new Date(currentYear, index, 1);\r\n//       return {\r\n//         name: monthDate.toLocaleDateString('en-US', { month: 'short' }).toUpperCase(),\r\n//         date: monthDate,\r\n//       };\r\n//     });\r\n//   };\r\n\r\n//   const isToday = (date) => {\r\n//     // date가 유효한 경우에만 체크\r\n//     return date && today.getFullYear() === date.getFullYear() &&\r\n//       today.getMonth() === date.getMonth() &&\r\n//       today.getDate() === date.getDate();\r\n//   };\r\n\r\n//   const weekDates = getWeekDates();\r\n//   const monthDates = getMonthDates();\r\n//   const yearMonths = getYearMonths();\r\n\r\n//   const handlePreviousYear = () => {\r\n//     setCurrentYear((prevYear) => prevYear - 1);\r\n//   };\r\n\r\n//   const handleNextYear = () => {\r\n//     setCurrentYear((prevYear) => prevYear + 1);\r\n//   };\r\n\r\n//   const isTaskInMonth = (monthDate, task) => {\r\n//     const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\r\n//     const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\r\n//     return task.start <= monthEnd && task.end >= monthStart;\r\n//   };\r\n\r\n//   const isTodayInMonth = (monthDate) => {\r\n//     return (\r\n//       today.getFullYear() === monthDate.getFullYear() &&\r\n//       today.getMonth() === monthDate.getMonth()\r\n//     );\r\n//   };\r\n\r\n//     const isTaskOnDate = (date, task) => {\r\n//     return date >= task.start && date <= task.end;\r\n//   };\r\n\r\n//   const calculateProgressBarStyle = (task) => {\r\n//     const weekStart = weekDates[0].date.getTime();\r\n//     const weekEnd = weekDates[6].date.getTime() + 24 * 60 * 60 * 1000 - 1;\r\n\r\n//     const taskStart = Math.max(task.start.getTime(), weekStart);\r\n//     const taskEnd = Math.min(task.end.getTime() + 24 * 60 * 60 * 1000 - 1, weekEnd);\r\n\r\n//     if (taskEnd < weekStart || taskStart > weekEnd) {\r\n//       return { display: 'none' };\r\n//     }\r\n\r\n//     const totalWeekMs = weekEnd - weekStart + 1;\r\n//     const offset = ((taskStart - weekStart) / totalWeekMs) * 100;\r\n//     const width = ((taskEnd - taskStart) / totalWeekMs) * 100;\r\n\r\n//     return {\r\n//       left: `${offset}%`,\r\n//       width: `${width}%`,\r\n//     };\r\n//   };\r\n\r\n//   const ProgressBar = ({ task, progressBarStyle }) => {\r\n//     return (\r\n//       <div className=\"progress-bar\" style={progressBarStyle}>\r\n//         <div\r\n//           className=\"progress\"\r\n//           style={{\r\n//             width: `${task.progress}%`,\r\n//             backgroundColor: task.color,\r\n//           }}\r\n//         >\r\n//           <span className=\"task-name\">{task.name}</span>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"gantt-chart\">\r\n//             {project ? (\r\n//                 <>\r\n//                     <h2 className=\"project-title\">📌 {project.name}</h2> \r\n//                     <p>프로젝트 시작일: {project.startDate}</p>\r\n//                 </>\r\n//             ) : (\r\n//                 <p>현재 선택된 프로젝트가 없습니다.</p>\r\n//             )}\r\n//       {viewMode === 'week' && (\r\n//         <>\r\n//           <div className=\"calendar\">\r\n//             {weekDates.map((day, index) => (\r\n//             <div key={index} className={`calendar-day ${isToday(day.date) ? 'today' : ''}`}>\r\n//                 <div className=\"day-name\">{day.day}\r\n//                 <div className=\"day-date\">\r\n//                   {day.date.toLocaleDateString('en-US', { day: 'numeric', month: 'short' })}\r\n//                 </div>\r\n//                 </div>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//           <div className=\"task-container\">\r\n//             {tasks.map((task) => {\r\n//               const progressBarStyle = calculateProgressBarStyle(task);\r\n//               return (\r\n//                 <div key={task.id} className=\"task\">\r\n//                   <ProgressBar task={task} progressBarStyle={progressBarStyle} />\r\n//                 </div>\r\n//               );\r\n//             })}\r\n//           </div>\r\n//         </>\r\n//       )}\r\n//       {viewMode === 'month' && (\r\n//         <div className=\"month-calendar\">\r\n//           <div className=\"month-header\">\r\n//             <button className=\"month-nav\" onClick={handlePreviousMonth}>\r\n//               &lt;\r\n//             </button>\r\n//             <div className=\"month-title\">\r\n//               {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\r\n//             </div>\r\n//             <button className=\"month-nav\" onClick={handleNextMonth}>\r\n//               &gt;\r\n//             </button>\r\n//           </div>\r\n//           <div className=\"calendar-grid\">\r\n//             {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\r\n//               <div key={day} className=\"calendar-day-name\">\r\n//                 {day}\r\n//               </div>\r\n//             ))}\r\n//             {monthDates.map((date, index) => (\r\n//               <div key={index} className={`calendar-day ${date && isToday(date) ? 'today' : ''}`}>\r\n//                 {date && (\r\n//                   <>\r\n//                     <div className=\"day-date\">{date.getDate()}</div>\r\n//                     <div className=\"task-indicator-container\">\r\n//                       {tasks.map(\r\n//                         (task) =>\r\n//                           isTaskOnDate(date, task) && (\r\n//                             <div key={task.id} className=\"task-indicator task-bar\" // 막대 모양\r\n//                             style={{ backgroundColor: task.color }}></div>\r\n//                           )\r\n//                       )}\r\n//                     </div>\r\n//                   </>\r\n//                 )}\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {viewMode === 'year' && (\r\n//               <div className=\"year-calendar\">\r\n//                 <div className=\"year-header\">\r\n//                   <button className=\"year-nav\" onClick={handlePreviousYear}>\r\n//                     &lt;\r\n//                   </button>\r\n//                   <div className=\"year-title\">{currentYear}</div>\r\n//                   <button className=\"year-nav\" onClick={handleNextYear}>\r\n//                     &gt;\r\n//                   </button>\r\n//                 </div>\r\n//                 <div className=\"year-grid\">\r\n//                   {yearMonths.map((month, index) => (\r\n//                     <div key={index} className=\"year-month\">\r\n//                       <div className={`month-name ${isTodayInMonth(month.date) ? 'today' : ''}`}>\r\n//                         {month.name}\r\n//                       </div>\r\n//                       <div className=\"month-tasks\">\r\n//                         {tasks.map(\r\n//                           (task) =>\r\n//                             isTaskInMonth(month.date, task) && (\r\n//                               <div\r\n//                                 key={task.id}\r\n//                                 className=\"task-indicator task-circle\"\r\n//                                 style={{ backgroundColor: task.color }}\r\n//                               ></div>\r\n//                             )\r\n//                         )}\r\n//                       </div>\r\n//                     </div>\r\n//                   ))}\r\n//                 </div>\r\n//               </div>\r\n//             )}\r\n//         <div className=\"view-mode-buttons\">\r\n//         <button\r\n//           className={`view-button ${viewMode === 'week' ? 'active' : ''}`}\r\n//           onClick={() => setViewMode('week')}\r\n//         >\r\n//           Week\r\n//         </button>\r\n//         <button\r\n//           className={`view-button ${viewMode === 'month' ? 'active' : ''}`}\r\n//           onClick={() => setViewMode('month')}\r\n//         >\r\n//           Month\r\n//         </button>\r\n//         <button\r\n//           className={`view-button ${viewMode === 'year' ? 'active' : ''}`}\r\n//           onClick={() => setViewMode('year')}\r\n//         >\r\n//           Year\r\n//         </button>\r\n//         </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default GanttChart;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport '../styles/GanttChart.css';\r\n\r\n// ✅ 수정: Task 데이터를 props로 받아서 사용하도록 변경\r\nconst GanttChart = ({ tasks }) => {\r\n  const [viewMode, setViewMode] = useState('week'); // ✅ 현재 보기 모드 (week, month, year)\r\n  const [currentWeekStart, setCurrentWeekStart] = useState(getStartOfWeek(new Date()));\r\n  const [currentMonth, setCurrentMonth] = useState(new Date());\r\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\r\n  const today = new Date();\r\n\r\n  // ✅ 삭제: 기존 더미 데이터 삭제 필요\r\n  // const initialTasks = [\r\n  //   { id: 1, name: 'Design Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 8), progress: 100 },\r\n  //   { id: 2, name: 'Development Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 9), progress: 75 },\r\n  //   { id: 3, name: 'Testing Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 10), progress: 30 },\r\n  // ];\r\n\r\n  const isTaskOnDate = (date, task) => {\r\n    const taskStart = new Date(task.start).setHours(0, 0, 0, 0);\r\n    const taskEnd = new Date(task.end).setHours(23, 59, 59, 999);\r\n    const checkDate = new Date(date).setHours(12, 0, 0, 0); // ✅ 날짜 중앙으로 설정 (비교 오류 방지)\r\n  \r\n    return checkDate >= taskStart && checkDate <= taskEnd;\r\n  };\r\n\r\n  // Task 데이터를 받아서 Gantt 차트에 반영\r\n  const formattedTasks = tasks.map((task) => ({\r\n    id: task.id,\r\n    name: task.name,\r\n    start: new Date(task.startDate),\r\n    end: new Date(new Date(task.dueDate).setHours(23, 59, 59, 999)), // ✅ 마감일 23:59:59로 설정\r\n    progress: 50, // ✅ 진행률 기본값 (추후 백엔드에서 가져오도록 수정 가능)\r\n  }));\r\n\r\n  // ✅ 현재 주의 시작 날짜 계산\r\n  function getStartOfWeek(date) {\r\n    const start = new Date(date);\r\n    start.setDate(start.getDate() - start.getDay()); // 일요일로 설정\r\n    start.setHours(0, 0, 0, 0);\r\n    return start;\r\n  }\r\n\r\n  // ✅ 한 주의 날짜 가져오기\r\n  // const getWeekDates = () => {\r\n  //   const today = new Date();\r\n  //   const firstDayOfWeek = today.getDate() - today.getDay();\r\n  //   return Array.from({ length: 7 }, (_, i) => {\r\n  //     const date = new Date(today.getFullYear(), today.getMonth(), firstDayOfWeek + i);\r\n  //     return {\r\n  //       day: date.toLocaleDateString('en-US', { weekday: 'short' }),\r\n  //       date: new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0),\r\n  //     };\r\n  //   });\r\n  // };\r\n  const getWeekDates = () => {\r\n    return Array.from({ length: 7 }, (_, i) => {\r\n      const date = new Date(currentWeekStart);\r\n      date.setDate(currentWeekStart.getDate() + i);\r\n      return {\r\n        day: date.toLocaleDateString('en-US', { weekday: 'short' }),\r\n        date: new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0),\r\n      };\r\n    });\r\n  };\r\n\r\n  // ✅ 이전 주 보기\r\n  const handlePreviousWeek = () => {\r\n    const prevWeek = new Date(currentWeekStart);\r\n    prevWeek.setDate(prevWeek.getDate() - 7);\r\n    setCurrentWeekStart(prevWeek);\r\n  };\r\n\r\n  // ✅ 다음 주 보기\r\n  const handleNextWeek = () => {\r\n    const nextWeek = new Date(currentWeekStart);\r\n    nextWeek.setDate(nextWeek.getDate() + 7);\r\n    setCurrentWeekStart(nextWeek);\r\n  };\r\n\r\n  const getMonthDates = () => {\r\n    const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\r\n    const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\r\n    const dates = [];\r\n\r\n    for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\r\n      dates.push(null);\r\n    }\r\n\r\n    for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\r\n      const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\r\n      dates.push(date);\r\n    }\r\n\r\n    return dates;\r\n  };\r\n\r\n  const handlePreviousMonth = () => {\r\n    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\r\n  };\r\n\r\n  const handleNextMonth = () => {\r\n    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\r\n  };\r\n\r\n  const getYearMonths = () => {\r\n    return Array.from({ length: 12 }, (_, index) => {\r\n      const monthDate = new Date(currentYear, index, 1);\r\n      return {\r\n        name: monthDate.toLocaleDateString('en-US', { month: 'short' }).toUpperCase(),\r\n        date: monthDate,\r\n      };\r\n    });\r\n  };\r\n\r\n  // ✅ 주어진 Task의 위치와 길이를 계산하여 한 주 안에서 표시\r\n  // const calculateProgressBarStyle = (task) => {\r\n  //   const totalDays = 7;\r\n  //   const weekStart = new Date();\r\n  //   weekStart.setDate(weekStart.getDate() - weekStart.getDay());\r\n\r\n  //   const startOffset = Math.max(0, (task.start - weekStart) / (1000 * 60 * 60 * 24));\r\n  //   const duration = Math.max(1, (task.end - task.start) / (1000 * 60 * 60 * 24));\r\n\r\n  //   return {\r\n  //     left: `${(startOffset / totalDays) * 100}%`,\r\n  //     width: `${(duration / totalDays) * 100}%`,\r\n  //   };\r\n  // };\r\n  const calculateProgressBarStyle = (task) => {\r\n    if (!(task.start instanceof Date) || !(task.end instanceof Date)) {\r\n      console.error(\"❌ `task.start` 또는 `task.end`가 Date 객체가 아닙니다:\", task);\r\n      return { display: 'none' };\r\n    }\r\n    \r\n    const weekStart = currentWeekStart.getTime();\r\n    const weekEnd = new Date(weekStart);\r\n    weekEnd.setDate(weekEnd.getDate() + 7);\r\n\r\n    const taskStart = Math.max(task.start.getTime(), weekStart);\r\n    const taskEnd = Math.min(task.end.getTime(), weekEnd);\r\n\r\n    if (taskEnd < weekStart || taskStart > weekEnd) {\r\n      return { display: 'none' };\r\n    }\r\n\r\n    const totalWeekMs = weekEnd - weekStart;\r\n    const offset = ((taskStart - weekStart) / totalWeekMs) * 100;\r\n    const width = ((taskEnd - taskStart) / totalWeekMs) * 100;\r\n\r\n    return {\r\n      left: `${offset}%`,\r\n      width: `${width}%`,\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"gantt-chart\">\r\n      <h2 className=\"project-title\">📊 업무 일정 (Gantt Chart)</h2>\r\n\r\n      {viewMode === 'week' && (\r\n        <>\r\n          <div className=\"week-navigation\">\r\n            <button onClick={handlePreviousWeek}>&lt;</button>\r\n            <span>{currentWeekStart.toLocaleDateString('en-US', { month: 'long', day: 'numeric' })} ~ {new Date(currentWeekStart.getTime() + 6 * 24 * 60 * 60 * 1000).toLocaleDateString('en-US', { month: 'long', day: 'numeric' })}</span>\r\n            <button onClick={handleNextWeek}>&gt;</button>\r\n          </div>\r\n\r\n          <div className=\"calendar\">\r\n            {getWeekDates().map((day, index) => (\r\n              <div key={index} className=\"calendar-day\">\r\n                <div className=\"day-name\">{day.day}</div>\r\n                <div className=\"day-date\">{day.date.toLocaleDateString('en-US', { day: 'numeric', month: 'short' })}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"task-container\">\r\n            {formattedTasks.map((task) => {\r\n              const progressBarStyle = calculateProgressBarStyle(task);\r\n              return (\r\n                <div key={task.id} className=\"task\">\r\n                  <div className=\"progress-bar\" style={progressBarStyle}>\r\n                    <div className=\"progress\">\r\n                      <span className=\"task-name\">{task.name}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {viewMode === 'month' && (\r\n        <div className=\"month-calendar\">\r\n          <div className=\"month-header\">\r\n            <button className=\"month-nav\" onClick={handlePreviousMonth}>&lt;</button>\r\n            <div className=\"month-title\">{currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}</div>\r\n            <button className=\"month-nav\" onClick={handleNextMonth}>&gt;</button>\r\n          </div>\r\n          {/* <div className=\"calendar-grid\">\r\n            {getMonthDates().map((date, index) => (\r\n              <div key={index} className=\"calendar-day\">\r\n                {date ? date.getDate() : \"\"}</div>\r\n            ))}\r\n          </div> */}\r\n          <div className=\"calendar-grid\">\r\n            {getMonthDates().map((date, index) => (\r\n              <div key={index} className=\"calendar-day\">\r\n                {date && (\r\n                  <>\r\n                    <div className=\"day-date\">{date.getDate()}</div>\r\n                    <div className=\"task-indicator-container\">\r\n                      {tasks.map(\r\n                        (task) =>\r\n                          isTaskOnDate(date, task) && (\r\n                            <div key={task.id} className=\"task-indicator task-bar\"\r\n                              style={{ backgroundColor: task.color }}></div>\r\n                          )\r\n                      )}\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"view-mode-buttons\">\r\n        <button className={`view-button ${viewMode === 'week' ? 'active' : ''}`} onClick={() => setViewMode('week')}>Week</button>\r\n        <button className={`view-button ${viewMode === 'month' ? 'active' : ''}`} onClick={() => setViewMode('month')}>Month</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GanttChart;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}