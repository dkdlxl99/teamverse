{"ast":null,"code":"var _jsxFileName = \"C:\\\\project2\\\\teamverse-2-boot,react - \\uC791\\uC5C5\\\\src\\\\pages\\\\TaskPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { getAccessToken } from \"../utils/authUtils\"; // ✅ 토큰 가져오기 함수\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskPage = () => {\n  _s();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const projectId = queryParams.get(\"projectId\");\n  const [project, setProject] = useState(null); // ✅ 프로젝트 정보 저장\n\n  // ✅ 프로젝트 정보를 불러오는 함수\n  const fetchProject = async () => {\n    if (!projectId) return; // 프로젝트 ID가 없으면 요청하지 않음\n\n    const token = getAccessToken();\n    if (!token) {\n      alert(\"로그인이 필요합니다.\");\n      return;\n    }\n    try {\n      const response = await axios.get(`http://localhost:8082/api/user/projects/${projectId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setProject(response.data); // ✅ 프로젝트 정보 저장\n    } catch (error) {\n      console.error(\"❌ 프로젝트 정보를 불러오는 데 실패했습니다:\", error);\n    }\n  };\n\n  // ✅ 페이지가 로드될 때 프로젝트 정보 가져오기\n  useEffect(() => {\n    fetchProject();\n  }, [projectId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: project ? project.name : \"로딩 중...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), \" \", projectId && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uD504\\uB85C\\uC81D\\uD2B8 ID: \", projectId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskPage, \"QwevHeqV17P1fLsQCaZSAxwVioc=\", false, function () {\n  return [useLocation];\n});\n_c = TaskPage;\nexport default TaskPage;\nvar _c;\n$RefreshReg$(_c, \"TaskPage\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","axios","getAccessToken","jsxDEV","_jsxDEV","TaskPage","_s","location","queryParams","URLSearchParams","search","projectId","get","project","setProject","fetchProject","token","alert","response","headers","Authorization","data","error","console","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/project2/teamverse-2-boot,react - 작업/src/pages/TaskPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { getAccessToken } from \"../utils/authUtils\"; // ✅ 토큰 가져오기 함수\r\n\r\nconst TaskPage = () => {\r\n  const location = useLocation();\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const projectId = queryParams.get(\"projectId\");\r\n\r\n  const [project, setProject] = useState(null); // ✅ 프로젝트 정보 저장\r\n\r\n  // ✅ 프로젝트 정보를 불러오는 함수\r\n  const fetchProject = async () => {\r\n    if (!projectId) return; // 프로젝트 ID가 없으면 요청하지 않음\r\n\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n      alert(\"로그인이 필요합니다.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.get(`http://localhost:8082/api/user/projects/${projectId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      setProject(response.data); // ✅ 프로젝트 정보 저장\r\n    } catch (error) {\r\n      console.error(\"❌ 프로젝트 정보를 불러오는 데 실패했습니다:\", error);\r\n    }\r\n  };\r\n\r\n  // ✅ 페이지가 로드될 때 프로젝트 정보 가져오기\r\n  useEffect(() => {\r\n    fetchProject();\r\n  }, [projectId]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>{project ? project.name : \"로딩 중...\"}</h1> {/* ✅ 프로젝트 이름 표시 */}\r\n      {projectId && <p>프로젝트 ID: {projectId}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,QAAQ,oBAAoB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAMQ,WAAW,GAAG,IAAIC,eAAe,CAACF,QAAQ,CAACG,MAAM,CAAC;EACxD,MAAMC,SAAS,GAAGH,WAAW,CAACI,GAAG,CAAC,WAAW,CAAC;EAE9C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9C;EACA,MAAMiB,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAACJ,SAAS,EAAE,OAAO,CAAC;;IAExB,MAAMK,KAAK,GAAGd,cAAc,CAAC,CAAC;IAC9B,IAAI,CAACc,KAAK,EAAE;MACVC,KAAK,CAAC,aAAa,CAAC;MACpB;IACF;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACW,GAAG,CAAC,2CAA2CD,SAAS,EAAE,EAAE;QACvFQ,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUJ,KAAK;QAAG;MAC9C,CAAC,CAAC;MACFF,UAAU,CAACI,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;;EAED;EACAvB,SAAS,CAAC,MAAM;IACdgB,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACJ,SAAS,CAAC,CAAC;EAEf,oBACEP,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,EAAKX,OAAO,GAAGA,OAAO,CAACY,IAAI,GAAG;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,KAAC,EAC7ClB,SAAS,iBAAIP,OAAA;MAAAoB,QAAA,GAAG,+BAAS,EAACb,SAAS;IAAA;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEV,CAAC;AAACvB,EAAA,CAtCID,QAAQ;EAAA,QACKL,WAAW;AAAA;AAAA8B,EAAA,GADxBzB,QAAQ;AAwCd,eAAeA,QAAQ;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}