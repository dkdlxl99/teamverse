{"ast":null,"code":"var _jsxFileName = \"C:\\\\project2\\\\teamverse-2-boot,react - \\uC791\\uC5C5\\\\src\\\\pages\\\\TaskPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { getAccessToken, refreshAccessToken } from \"../utils/authUtils\"; // ✅ refreshToken 활용\nimport TaskModal from \"../components/TaskModal\"; // ✅ 모달창 컴포넌트 추가\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskPage = () => {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate(); // ✅ 로그인 페이지로 이동 기능 추가\n  const queryParams = new URLSearchParams(location.search);\n  const projectId = queryParams.get(\"projectId\");\n  const [project, setProject] = useState(null); // ✅ 프로젝트 정보 저장\n  const [tasks, setTasks] = useState([]); // ✅ Task 목록 저장\n  const [loading, setLoading] = useState(true); // ✅ 로딩 상태 추가\n  const [error, setError] = useState(null); // ✅ 에러 상태 추가\n  const [isModalOpen, setIsModalOpen] = useState(false); // ✅ 모달창 상태 관리\n\n  // Task 목록 불러오기\n  const fetchTasks = async () => {\n    const token = getAccessToken();\n    if (!token) {\n      alert(\"로그인이 필요합니다.\");\n      navigate(\"/login\");\n      return;\n    }\n    try {\n      const response = await axios.get(`http://localhost:8082/api/user/tasks?projectId=${projectId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        },\n        withCredentials: true\n      });\n      console.log(\"✅ 서버에서 가져온 Task 목록:\", response.data);\n      setTasks(response.data); // ✅ 추가: Task 목록 상태 업데이트\n    } catch (error) {\n      console.error(\"❌ Task 목록 불러오기 실패:\", error);\n    }\n  };\n\n  // Task 추가 후 목록을 갱신하는 함수\n  const refreshTasks = () => {\n    fetchTasks();\n  };\n\n  // ✅ 프로젝트 정보를 불러오는 함수\n  const fetchProject = async (retry = true) => {\n    if (!projectId) {\n      setError(\"❌ 프로젝트 ID가 없습니다.\");\n      setLoading(false);\n      return;\n    }\n    let token = getAccessToken(); // ✅ 현재 토큰 가져오기\n    if (!token) {\n      console.warn(\"❌ accessToken이 없습니다. refreshToken을 사용하여 재발급 시도...\");\n      token = await refreshAccessToken(); // ✅ 새로운 accessToken 요청\n      if (!token) {\n        alert(\"로그인이 필요합니다.\");\n        navigate(\"/login\"); // ✅ 로그인 페이지로 이동\n        return;\n      }\n    }\n    try {\n      console.log(`📡 프로젝트 정보 요청: /api/user/projects/${projectId}`);\n      const response = await axios.get(`http://localhost:8082/api/user/projects/${projectId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        withCredentials: true // ✅ 쿠키 인증 포함\n      });\n      console.log(\"✅ 프로젝트 정보 응답:\", response.data);\n      setProject(response.data);\n      setLoading(false);\n      fetchTasks(); //Task 목록도 함께 불러오기\n    } catch (error) {\n      var _error$response;\n      console.error(\"❌ 프로젝트 정보를 불러오는 데 실패했습니다:\", error);\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && retry) {\n        console.warn(\"🔄 accessToken이 만료됨. refreshToken으로 재시도...\");\n        const newToken = await refreshAccessToken();\n        if (newToken) {\n          fetchProject(false); // ✅ 한 번만 재시도\n        } else {\n          alert(\"로그인이 필요합니다.\");\n          navigate(\"/login\"); // ✅ 로그인 페이지로 이동\n        }\n      } else {\n        setError(\"❌ 프로젝트 정보를 불러올 수 없습니다.\");\n        setLoading(false);\n      }\n    }\n  };\n\n  // ✅ 페이지가 로드될 때 프로젝트 정보 가져오기\n  useEffect(() => {\n    if (projectId) {\n      fetchProject();\n    }\n  }, [projectId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uB85C\\uB529 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: project ? project.name : \"프로젝트 없음\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this) // ✅ 프로젝트 이름 표시\n    , projectId && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uD504\\uB85C\\uC81D\\uD2B8 ID: \", projectId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsModalOpen(true),\n      children: \"+ \\uC5C5\\uBB34 \\uCD94\\uAC00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: task.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this), \" - \", task.status, \" (\\uB9C8\\uAC10\\uC77C: \", task.dueDate, \")\"]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 8\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(TaskModal, {\n      onClose: () => setIsModalOpen(false),\n      projectId: projectId,\n      refreshTasks: refreshTasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskPage, \"cS4Onm2Vy9buRj1JLpQ7v9+ClfA=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = TaskPage;\nexport default TaskPage;\nvar _c;\n$RefreshReg$(_c, \"TaskPage\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","axios","getAccessToken","refreshAccessToken","TaskModal","jsxDEV","_jsxDEV","TaskPage","_s","location","navigate","queryParams","URLSearchParams","search","projectId","get","project","setProject","tasks","setTasks","loading","setLoading","error","setError","isModalOpen","setIsModalOpen","fetchTasks","token","alert","response","headers","Authorization","withCredentials","console","log","data","refreshTasks","fetchProject","retry","warn","_error$response","status","newToken","children","fileName","_jsxFileName","lineNumber","columnNumber","name","onClick","map","task","dueDate","id","onClose","_c","$RefreshReg$"],"sources":["C:/project2/teamverse-2-boot,react - 작업/src/pages/TaskPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\"; \r\nimport axios from \"axios\";\r\nimport { getAccessToken, refreshAccessToken } from \"../utils/authUtils\"; // ✅ refreshToken 활용\r\nimport TaskModal from \"../components/TaskModal\"; // ✅ 모달창 컴포넌트 추가\r\n\r\n\r\nconst TaskPage = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate(); // ✅ 로그인 페이지로 이동 기능 추가\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const projectId = queryParams.get(\"projectId\");\r\n\r\n  const [project, setProject] = useState(null); // ✅ 프로젝트 정보 저장\r\n  const [tasks, setTasks] = useState([]); // ✅ Task 목록 저장\r\n  const [loading, setLoading] = useState(true); // ✅ 로딩 상태 추가\r\n  const [error, setError] = useState(null); // ✅ 에러 상태 추가\r\n  const [isModalOpen, setIsModalOpen] = useState(false); // ✅ 모달창 상태 관리\r\n\r\n   // Task 목록 불러오기\r\n   const fetchTasks = async () => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n      alert(\"로그인이 필요합니다.\");\r\n      navigate(\"/login\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.get(`http://localhost:8082/api/user/tasks?projectId=${projectId}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        withCredentials: true,\r\n      });\r\n\r\n      console.log(\"✅ 서버에서 가져온 Task 목록:\", response.data);\r\n      setTasks(response.data); // ✅ 추가: Task 목록 상태 업데이트\r\n    } catch (error) {\r\n      console.error(\"❌ Task 목록 불러오기 실패:\", error);\r\n    }\r\n  };\r\n\r\n  // Task 추가 후 목록을 갱신하는 함수\r\n  const refreshTasks = () => {\r\n    fetchTasks();\r\n  };\r\n\r\n\r\n  // ✅ 프로젝트 정보를 불러오는 함수\r\n  const fetchProject = async (retry = true) => {\r\n    if (!projectId) {\r\n      setError(\"❌ 프로젝트 ID가 없습니다.\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    let token = getAccessToken(); // ✅ 현재 토큰 가져오기\r\n    if (!token) {\r\n      console.warn(\"❌ accessToken이 없습니다. refreshToken을 사용하여 재발급 시도...\");\r\n      token = await refreshAccessToken(); // ✅ 새로운 accessToken 요청\r\n      if (!token) {\r\n        alert(\"로그인이 필요합니다.\");\r\n        navigate(\"/login\"); // ✅ 로그인 페이지로 이동\r\n        return;\r\n      }\r\n    }\r\n\r\n    try {\r\n      console.log(`📡 프로젝트 정보 요청: /api/user/projects/${projectId}`);\r\n      const response = await axios.get(`http://localhost:8082/api/user/projects/${projectId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n        withCredentials: true, // ✅ 쿠키 인증 포함\r\n      });\r\n\r\n      console.log(\"✅ 프로젝트 정보 응답:\", response.data);\r\n      setProject(response.data);\r\n      setLoading(false);\r\n      fetchTasks(); //Task 목록도 함께 불러오기\r\n    } catch (error) {\r\n      console.error(\"❌ 프로젝트 정보를 불러오는 데 실패했습니다:\", error);\r\n\r\n      if (error.response?.status === 401 && retry) {\r\n        console.warn(\"🔄 accessToken이 만료됨. refreshToken으로 재시도...\");\r\n        const newToken = await refreshAccessToken();\r\n        if (newToken) {\r\n          fetchProject(false); // ✅ 한 번만 재시도\r\n        } else {\r\n          alert(\"로그인이 필요합니다.\");\r\n          navigate(\"/login\"); // ✅ 로그인 페이지로 이동\r\n        }\r\n      } else {\r\n        setError(\"❌ 프로젝트 정보를 불러올 수 없습니다.\");\r\n        setLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  // ✅ 페이지가 로드될 때 프로젝트 정보 가져오기\r\n  useEffect(() => {\r\n    if (projectId) {\r\n      fetchProject();\r\n    }\r\n  }, [projectId]);\r\n\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <h1>로딩 중...</h1>\r\n      ) : error ? (\r\n        <h1>{error}</h1>\r\n      ) : (\r\n        <h1>{project ? project.name : \"프로젝트 없음\"}</h1> // ✅ 프로젝트 이름 표시\r\n      )}\r\n      {projectId && <p>프로젝트 ID: {projectId}</p>}\r\n\r\n      {/* ✅ \"업무 추가\" 버튼 */}\r\n      <button onClick={() => setIsModalOpen(true)}>+ 업무 추가</button>\r\n\r\n       {/* ✅ 추가: Task 목록 표시 */}\r\n       <ul>\r\n        {tasks.map((task) => (\r\n          <li key={task.id}>\r\n            <strong>{task.name}</strong> - {task.status} (마감일: {task.dueDate})\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      {/* ✅ 수정: Task 추가 후 목록 갱신 기능 포함 */}\r\n      {isModalOpen && <TaskModal onClose={() => setIsModalOpen(false)} projectId={projectId} refreshTasks={refreshTasks} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,EAAEC,kBAAkB,QAAQ,oBAAoB,CAAC,CAAC;AACzE,OAAOC,SAAS,MAAM,yBAAyB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGjD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAMW,QAAQ,GAAGV,WAAW,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMW,WAAW,GAAG,IAAIC,eAAe,CAACH,QAAQ,CAACI,MAAM,CAAC;EACxD,MAAMC,SAAS,GAAGH,WAAW,CAACI,GAAG,CAAC,WAAW,CAAC;EAE9C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACqB,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACyB,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1C,MAAM,CAAC2B,WAAW,EAAEC,cAAc,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAM6B,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMC,KAAK,GAAGzB,cAAc,CAAC,CAAC;IAC9B,IAAI,CAACyB,KAAK,EAAE;MACVC,KAAK,CAAC,aAAa,CAAC;MACpBlB,QAAQ,CAAC,QAAQ,CAAC;MAClB;IACF;IAEA,IAAI;MACF,MAAMmB,QAAQ,GAAG,MAAM5B,KAAK,CAACc,GAAG,CAAC,kDAAkDD,SAAS,EAAE,EAAE;QAC9FgB,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUJ,KAAK,EAAE;UAChC,cAAc,EAAE;QAClB,CAAC;QACDK,eAAe,EAAE;MACnB,CAAC,CAAC;MAEFC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEL,QAAQ,CAACM,IAAI,CAAC;MACjDhB,QAAQ,CAACU,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC;IAC3B,CAAC,CAAC,OAAOb,KAAK,EAAE;MACdW,OAAO,CAACX,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC5C;EACF,CAAC;;EAED;EACA,MAAMc,YAAY,GAAGA,CAAA,KAAM;IACzBV,UAAU,CAAC,CAAC;EACd,CAAC;;EAGD;EACA,MAAMW,YAAY,GAAG,MAAAA,CAAOC,KAAK,GAAG,IAAI,KAAK;IAC3C,IAAI,CAACxB,SAAS,EAAE;MACdS,QAAQ,CAAC,kBAAkB,CAAC;MAC5BF,UAAU,CAAC,KAAK,CAAC;MACjB;IACF;IAEA,IAAIM,KAAK,GAAGzB,cAAc,CAAC,CAAC,CAAC,CAAC;IAC9B,IAAI,CAACyB,KAAK,EAAE;MACVM,OAAO,CAACM,IAAI,CAAC,mDAAmD,CAAC;MACjEZ,KAAK,GAAG,MAAMxB,kBAAkB,CAAC,CAAC,CAAC,CAAC;MACpC,IAAI,CAACwB,KAAK,EAAE;QACVC,KAAK,CAAC,aAAa,CAAC;QACpBlB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QACpB;MACF;IACF;IAEA,IAAI;MACFuB,OAAO,CAACC,GAAG,CAAC,qCAAqCpB,SAAS,EAAE,CAAC;MAC7D,MAAMe,QAAQ,GAAG,MAAM5B,KAAK,CAACc,GAAG,CAAC,2CAA2CD,SAAS,EAAE,EAAE;QACvFgB,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUJ,KAAK;QAAG,CAAC;QAC7CK,eAAe,EAAE,IAAI,CAAE;MACzB,CAAC,CAAC;MAEFC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEL,QAAQ,CAACM,IAAI,CAAC;MAC3ClB,UAAU,CAACY,QAAQ,CAACM,IAAI,CAAC;MACzBd,UAAU,CAAC,KAAK,CAAC;MACjBK,UAAU,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC,CAAC,OAAOJ,KAAK,EAAE;MAAA,IAAAkB,eAAA;MACdP,OAAO,CAACX,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MAEjD,IAAI,EAAAkB,eAAA,GAAAlB,KAAK,CAACO,QAAQ,cAAAW,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,IAAIH,KAAK,EAAE;QAC3CL,OAAO,CAACM,IAAI,CAAC,4CAA4C,CAAC;QAC1D,MAAMG,QAAQ,GAAG,MAAMvC,kBAAkB,CAAC,CAAC;QAC3C,IAAIuC,QAAQ,EAAE;UACZL,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;QACvB,CAAC,MAAM;UACLT,KAAK,CAAC,aAAa,CAAC;UACpBlB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QACtB;MACF,CAAC,MAAM;QACLa,QAAQ,CAAC,wBAAwB,CAAC;QAClCF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;EACF,CAAC;;EAED;EACAvB,SAAS,CAAC,MAAM;IACd,IAAIgB,SAAS,EAAE;MACbuB,YAAY,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,CAACvB,SAAS,CAAC,CAAC;EAEf,oBACER,OAAA;IAAAqC,QAAA,GACGvB,OAAO,gBACNd,OAAA;MAAAqC,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,GACdzB,KAAK,gBACPhB,OAAA;MAAAqC,QAAA,EAAKrB;IAAK;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,gBAEhBzC,OAAA;MAAAqC,QAAA,EAAK3B,OAAO,GAAGA,OAAO,CAACgC,IAAI,GAAG;IAAS;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC;IAC/C,EACAjC,SAAS,iBAAIR,OAAA;MAAAqC,QAAA,GAAG,+BAAS,EAAC7B,SAAS;IAAA;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGzCzC,OAAA;MAAQ2C,OAAO,EAAEA,CAAA,KAAMxB,cAAc,CAAC,IAAI,CAAE;MAAAkB,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAG5DzC,OAAA;MAAAqC,QAAA,EACEzB,KAAK,CAACgC,GAAG,CAAEC,IAAI,iBACd7C,OAAA;QAAAqC,QAAA,gBACErC,OAAA;UAAAqC,QAAA,EAASQ,IAAI,CAACH;QAAI;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,OAAG,EAACI,IAAI,CAACV,MAAM,EAAC,wBAAO,EAACU,IAAI,CAACC,OAAO,EAAC,GACnE;MAAA,GAFSD,IAAI,CAACE,EAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEZ,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,EAGJvB,WAAW,iBAAIlB,OAAA,CAACF,SAAS;MAACkD,OAAO,EAAEA,CAAA,KAAM7B,cAAc,CAAC,KAAK,CAAE;MAACX,SAAS,EAAEA,SAAU;MAACsB,YAAY,EAAEA;IAAa;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClH,CAAC;AAEV,CAAC;AAACvC,EAAA,CA9HID,QAAQ;EAAA,QACKR,WAAW,EACXC,WAAW;AAAA;AAAAuD,EAAA,GAFxBhD,QAAQ;AAgId,eAAeA,QAAQ;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}