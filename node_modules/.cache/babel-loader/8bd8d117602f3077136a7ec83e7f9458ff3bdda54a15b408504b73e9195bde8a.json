{"ast":null,"code":"var _jsxFileName = \"/Users/woo/Documents/git_local/react/0213/src/components/GanttChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/GanttChart.css';\n\n// ✅ 수정: Task 데이터를 props로 받아서 사용하도록 변경\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GanttChart = ({\n  tasks\n}) => {\n  _s();\n  const [viewMode, setViewMode] = useState('week'); // ✅ 현재 보기 모드 (week, month, year)\n  const [currentWeekStart, setCurrentWeekStart] = useState(getStartOfWeek(new Date()));\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const today = new Date();\n  const isTaskOnDate = (date, task) => {\n    const taskStart = new Date(task.start).setHours(0, 0, 0, 0);\n    const taskEnd = new Date(task.end).setHours(23, 59, 59, 999);\n    const checkDate = new Date(date).setHours(12, 0, 0, 0); // ✅ 날짜 중앙으로 설정 (비교 오류 방지)\n\n    return checkDate >= taskStart && checkDate <= taskEnd;\n  };\n\n  // Task 데이터를 받아서 Gantt 차트에 반영\n  const formattedTasks = tasks.map(task => ({\n    id: task.id,\n    name: task.name,\n    start: new Date(task.startDate),\n    // ❌ startDate를 직접 변환 (undefined 가능성 있음)\n    end: new Date(task.dueDate),\n    // ❌ dueDate를 직접 변환 (undefined 가능성 있음)\n    color: task.color || \"#ff99a5\"\n  }));\n\n  // ✅ 현재 주의 시작 날짜 계산\n  function getStartOfWeek(date) {\n    const start = new Date(date);\n    const dayOfWeek = start.getDay(); // 현재 요일 (0: 일요일, 1: 월요일, ..., 6: 토요일)\n    const diff = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // 월요일을 기준\n    start.setDate(start.getDate() + diff);\n    start.setHours(0, 0, 0, 0);\n    return start;\n  }\n\n  // 주간 날짜 목록 생성\n  const getWeekDates = () => {\n    return Array.from({\n      length: 7\n    }, (_, i) => {\n      const date = new Date(currentWeekStart); // ✅ 현재 주 시작(월요일)에서 시작\n      date.setDate(currentWeekStart.getDate() + i); // ✅ 하루씩 더하면서 한 주를 채움\n      date.setHours(0, 0, 0, 0); // ✅ 00:00:00으로 초기화\n      return {\n        day: date.toLocaleDateString('en-US', {\n          weekday: 'short'\n        }),\n        // 'Mon', 'Tue' 형태\n        date: new Date(date) // ✅ Date 객체로 변환\n      };\n    });\n  };\n\n  // ✅ 월간 날짜 목록 생성\n  const getMonthDates = () => {\n    const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n    const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n    const dates = [];\n    for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\n      dates.push(null);\n    }\n    for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\n      const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\n      dates.push(date);\n    }\n    return dates;\n  };\n  // ✅ 이전/다음 주 & 월 이동 기능\n  const handlePreviousWeek = () => setCurrentWeekStart(new Date(currentWeekStart.setDate(currentWeekStart.getDate() - 7)));\n  const handleNextWeek = () => setCurrentWeekStart(new Date(currentWeekStart.setDate(currentWeekStart.getDate() + 7)));\n  const handlePreviousMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\n  const handleNextMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\n  const handlePreviousYear = () => setCurrentYear(currentYear - 1);\n  const handleNextYear = () => setCurrentYear(currentYear + 1);\n\n  // Year 뷰 - 12개월 목록 생성\n  const getYearMonths = () => {\n    return Array.from({\n      length: 12\n    }, (_, index) => {\n      const monthDate = new Date(currentYear, index, 1);\n      return {\n        name: monthDate.toLocaleDateString('en-US', {\n          month: 'short'\n        }).toUpperCase(),\n        date: monthDate\n      };\n    });\n  };\n\n  // Task가 특정 월에 포함되는지 확인하는 함수\n  const isTaskInMonth = (monthDate, task) => {\n    const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n    const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\n    return task.start <= monthEnd && task.end >= monthStart;\n  };\n  const calculateProgressBarStyle = task => {\n    console.log(\"📌 ProgressBar를 계산할 Task 데이터:\", task);\n\n    // ✅ 기존: task.start / task.end 사용 → task.startDate / task.dueDate로 대체\n    const taskStart = task.start || (task.startDate ? new Date(task.startDate + \"T00:00:00\") : null);\n    const taskEnd = task.end || (task.dueDate ? new Date(task.dueDate + \"T23:59:59\") : null);\n    if (!taskStart || !taskEnd) {\n      console.error(`🚨 Task ${task.name}의 시작일 또는 마감일이 없음!`);\n      return {\n        display: 'none'\n      };\n    }\n    const weekStart = new Date(currentWeekStart);\n    weekStart.setHours(0, 0, 0, 0);\n    const weekEnd = new Date(weekStart);\n    weekEnd.setDate(weekEnd.getDate() + 6);\n    weekEnd.setHours(23, 59, 59, 999);\n    console.log(`🛠️ Task ${task.name}: Start - ${taskStart}, End - ${taskEnd}`);\n    console.log(`📆 Week: Start - ${weekStart}, End - ${weekEnd}`);\n    if (taskEnd < weekStart || taskStart > weekEnd) {\n      console.log(`❌ Task ${task.name} is out of range`);\n      return {\n        display: 'none'\n      };\n    }\n    const clampedStart = Math.max(taskStart.getTime(), weekStart.getTime());\n    const clampedEnd = Math.min(taskEnd.getTime(), weekEnd.getTime());\n    const totalWeekMs = weekEnd.getTime() - weekStart.getTime();\n    const offset = (clampedStart - weekStart.getTime()) / totalWeekMs * 100;\n    const width = (clampedEnd - clampedStart) / totalWeekMs * 100;\n    return {\n      left: `${offset}%`,\n      width: `${width}%`,\n      backgroundColor: task.color || \"#4caf50\"\n    };\n  };\n  useEffect(() => {\n    console.log(\"📌 Week mode active, updating task bars...\");\n  }, [viewMode, currentWeekStart, tasks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gantt-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"view-mode-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'week' ? 'active' : ''}`,\n        onClick: () => setViewMode('week'),\n        children: \"Week\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'month' ? 'active' : ''}`,\n        onClick: () => setViewMode('month'),\n        children: \"Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'year' ? 'active' : ''}`,\n        onClick: () => setViewMode('year'),\n        children: \"Year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), viewMode === 'week' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"week-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePreviousWeek,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [currentWeekStart.toLocaleDateString('en-US', {\n            month: 'long',\n            day: 'numeric'\n          }), \" ~\", \" \", new Date(currentWeekStart.getTime() + 6 * 24 * 60 * 60 * 1000).toLocaleDateString('en-US', {\n            month: 'long',\n            day: 'numeric'\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextWeek,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar\",\n        children: getWeekDates().map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-day\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"day-name\",\n            children: day.day\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"day-date\",\n            children: day.date.toLocaleDateString('en-US', {\n              day: 'numeric',\n              month: 'short'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-container\",\n        children: tasks.map(task => {\n          const progressBarStyle = calculateProgressBarStyle(task);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-bar\",\n              style: progressBarStyle,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progress\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"task-name\",\n                  children: task.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 25\n            }, this)\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 21\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true), viewMode === 'month' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"month-calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"month-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"month-nav\",\n          onClick: handlePreviousMonth,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"month-title\",\n          children: currentMonth.toLocaleDateString('en-US', {\n            month: 'long',\n            year: 'numeric'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"month-nav\",\n          onClick: handleNextMonth,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-grid\",\n        children: getMonthDates().map((date, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-day\",\n          children: date && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"day-date\",\n              children: date.getDate()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-indicator-container\",\n              children: formattedTasks.map(task => {\n                return isTaskOnDate(date, task) ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"task-indicator task-bar\",\n                  style: {\n                    backgroundColor: task.color\n                  }\n                }, task.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 27\n                }, this) : null;\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this), viewMode === 'year' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"year-calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"year-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"year-nav\",\n          onClick: handlePreviousYear,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"year-title\",\n          children: currentYear\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"year-nav\",\n          onClick: handleNextYear,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"year-grid\",\n        children: getYearMonths().map((month, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"year-month\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"month-name\",\n            children: month.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"month-tasks\",\n            children: formattedTasks.map(task => {\n              return isTaskInMonth(month.date, task) ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"task-indicator task-circle\",\n                style: {\n                  backgroundColor: task.color\n                }\n              }, task.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 23\n              }, this) : null;\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(GanttChart, \"oklCmDbLLiD5ZADlE+MSSeb2ekI=\");\n_c = GanttChart;\nexport default GanttChart;\nvar _c;\n$RefreshReg$(_c, \"GanttChart\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","GanttChart","tasks","_s","viewMode","setViewMode","currentWeekStart","setCurrentWeekStart","getStartOfWeek","Date","currentMonth","setCurrentMonth","currentYear","setCurrentYear","getFullYear","today","isTaskOnDate","date","task","taskStart","start","setHours","taskEnd","end","checkDate","formattedTasks","map","id","name","startDate","dueDate","color","dayOfWeek","getDay","diff","setDate","getDate","getWeekDates","Array","from","length","_","i","day","toLocaleDateString","weekday","getMonthDates","firstDayOfMonth","getMonth","lastDayOfMonth","dates","push","handlePreviousWeek","handleNextWeek","handlePreviousMonth","handleNextMonth","handlePreviousYear","handleNextYear","getYearMonths","index","monthDate","month","toUpperCase","isTaskInMonth","monthStart","monthEnd","calculateProgressBarStyle","console","log","error","display","weekStart","weekEnd","clampedStart","Math","max","getTime","clampedEnd","min","totalWeekMs","offset","width","left","backgroundColor","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","progressBarStyle","style","year","_c","$RefreshReg$"],"sources":["/Users/woo/Documents/git_local/react/0213/src/components/GanttChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../styles/GanttChart.css';\n\n\n// ✅ 수정: Task 데이터를 props로 받아서 사용하도록 변경\nconst GanttChart = ({ tasks }) => {\n  const [viewMode, setViewMode] = useState('week'); // ✅ 현재 보기 모드 (week, month, year)\n  const [currentWeekStart, setCurrentWeekStart] = useState(getStartOfWeek(new Date()));\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const today = new Date();\n\n  const isTaskOnDate = (date, task) => {\n    const taskStart = new Date(task.start).setHours(0, 0, 0, 0);\n    const taskEnd = new Date(task.end).setHours(23, 59, 59, 999);\n    const checkDate = new Date(date).setHours(12, 0, 0, 0); // ✅ 날짜 중앙으로 설정 (비교 오류 방지)\n\n    return checkDate >= taskStart && checkDate <= taskEnd;\n  };\n\n  // Task 데이터를 받아서 Gantt 차트에 반영\n  const formattedTasks = tasks.map((task) => ({\n    id: task.id,\n    name: task.name,\n    start: new Date(task.startDate),  // ❌ startDate를 직접 변환 (undefined 가능성 있음)\n    end: new Date(task.dueDate),      // ❌ dueDate를 직접 변환 (undefined 가능성 있음)\n    color: task.color || \"#ff99a5\",\n}));\n\n\n  // ✅ 현재 주의 시작 날짜 계산\n  function getStartOfWeek(date) {\n    const start = new Date(date);\n    const dayOfWeek = start.getDay(); // 현재 요일 (0: 일요일, 1: 월요일, ..., 6: 토요일)\n    const diff = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // 월요일을 기준\n    start.setDate(start.getDate() + diff);\n    start.setHours(0, 0, 0, 0);\n    return start;\n  }\n\n  // 주간 날짜 목록 생성\n  const getWeekDates = () => {\n    return Array.from({ length: 7 }, (_, i) => {\n      const date = new Date(currentWeekStart); // ✅ 현재 주 시작(월요일)에서 시작\n      date.setDate(currentWeekStart.getDate() + i); // ✅ 하루씩 더하면서 한 주를 채움\n      date.setHours(0, 0, 0, 0); // ✅ 00:00:00으로 초기화\n      return {\n        day: date.toLocaleDateString('en-US', { weekday: 'short' }), // 'Mon', 'Tue' 형태\n        date: new Date(date), // ✅ Date 객체로 변환\n      };\n    });\n  };\n\n  // ✅ 월간 날짜 목록 생성\n  const getMonthDates = () => {\n    const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n    const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n    const dates = [];\n\n    for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\n      dates.push(null);\n    }\n\n    for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\n      const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\n      dates.push(date);\n    }\n\n    return dates;\n  };\n  // ✅ 이전/다음 주 & 월 이동 기능\n  const handlePreviousWeek = () => setCurrentWeekStart(new Date(currentWeekStart.setDate(currentWeekStart.getDate() - 7)));\n  const handleNextWeek = () => setCurrentWeekStart(new Date(currentWeekStart.setDate(currentWeekStart.getDate() + 7)));\n  const handlePreviousMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\n  const handleNextMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\n  const handlePreviousYear = () => setCurrentYear(currentYear - 1);\n  const handleNextYear = () => setCurrentYear(currentYear + 1);\n\n\n  // Year 뷰 - 12개월 목록 생성\n  const getYearMonths = () => {\n    return Array.from({ length: 12 }, (_, index) => {\n      const monthDate = new Date(currentYear, index, 1);\n      return {\n        name: monthDate.toLocaleDateString('en-US', { month: 'short' }).toUpperCase(),\n        date: monthDate,\n      };\n    });\n  };\n\n  // Task가 특정 월에 포함되는지 확인하는 함수\n  const isTaskInMonth = (monthDate, task) => {\n    const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n    const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\n    return task.start <= monthEnd && task.end >= monthStart;\n  };\n\n  \n  const calculateProgressBarStyle = (task) => {\n    console.log(\"📌 ProgressBar를 계산할 Task 데이터:\", task);\n\n    // ✅ 기존: task.start / task.end 사용 → task.startDate / task.dueDate로 대체\n    const taskStart = task.start || (task.startDate ? new Date(task.startDate + \"T00:00:00\") : null);\n    const taskEnd = task.end || (task.dueDate ? new Date(task.dueDate + \"T23:59:59\") : null);\n\n    if (!taskStart || !taskEnd) {\n        console.error(`🚨 Task ${task.name}의 시작일 또는 마감일이 없음!`);\n        return { display: 'none' };\n    }\n\n    const weekStart = new Date(currentWeekStart);\n    weekStart.setHours(0, 0, 0, 0);\n    const weekEnd = new Date(weekStart);\n    weekEnd.setDate(weekEnd.getDate() + 6);\n    weekEnd.setHours(23, 59, 59, 999);\n\n    console.log(`🛠️ Task ${task.name}: Start - ${taskStart}, End - ${taskEnd}`);\n    console.log(`📆 Week: Start - ${weekStart}, End - ${weekEnd}`);\n\n    if (taskEnd < weekStart || taskStart > weekEnd) {\n        console.log(`❌ Task ${task.name} is out of range`);\n        return { display: 'none' };\n    }\n\n    const clampedStart = Math.max(taskStart.getTime(), weekStart.getTime());\n    const clampedEnd = Math.min(taskEnd.getTime(), weekEnd.getTime());\n\n    const totalWeekMs = weekEnd.getTime() - weekStart.getTime();\n    const offset = ((clampedStart - weekStart.getTime()) / totalWeekMs) * 100;\n    const width = ((clampedEnd - clampedStart) / totalWeekMs) * 100;\n\n    return {\n        left: `${offset}%`,\n        width: `${width}%`,\n        backgroundColor: task.color || \"#4caf50\",\n    };\n};\n\n  useEffect(() => {\n    console.log(\"📌 Week mode active, updating task bars...\");\n  }, [viewMode, currentWeekStart, tasks]);\n\n  return (\n    <div className=\"gantt-chart\">\n      <div className=\"view-mode-buttons\">\n        <button className={`view-button ${viewMode === 'week' ? 'active' : ''}`} onClick={() => setViewMode('week')}>Week</button>\n        <button className={`view-button ${viewMode === 'month' ? 'active' : ''}`} onClick={() => setViewMode('month')}>Month</button>\n        <button className={`view-button ${viewMode === 'year' ? 'active' : ''}`} onClick={() => setViewMode('year')}>Year</button>\n      </div>\n\n      {viewMode === 'week' && (\n        <>\n          <div className=\"week-navigation\">\n            <button onClick={handlePreviousWeek}>&lt;</button>\n            <span>\n              {currentWeekStart.toLocaleDateString('en-US', { month: 'long', day: 'numeric' })} ~{\" \"}\n              {new Date(currentWeekStart.getTime() + 6 * 24 * 60 * 60 * 1000).toLocaleDateString('en-US', { month: 'long', day: 'numeric' })}\n            </span>\n            <button onClick={handleNextWeek}>&gt;</button>\n          </div>\n\n          <div className=\"calendar\">\n            {getWeekDates().map((day, index) => (\n              <div key={index} className=\"calendar-day\">\n                <div className=\"day-name\">{day.day}</div>\n                <div className=\"day-date\">{day.date.toLocaleDateString('en-US', { day: 'numeric', month: 'short' })}</div>\n              </div>\n            ))}\n          </div>\n\n        <div className=\"task-container\">\n            {tasks.map((task) => {\n                const progressBarStyle = calculateProgressBarStyle(task);\n                return (\n                    <div key={task.id} className=\"task\">\n                        <div className=\"progress-bar\" style={progressBarStyle}>\n                            <div className=\"progress\">\n                                <span className=\"task-name\">{task.name}</span>\n                            </div>\n                        </div>\n                    </div>\n                );\n            })}\n        </div>\n        </>\n      )}\n\n      {viewMode === 'month' && (\n        <div className=\"month-calendar\">\n          <div className=\"month-header\">\n            <button className=\"month-nav\" onClick={handlePreviousMonth}>&lt;</button>\n            <div className=\"month-title\">{currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}</div>\n            <button className=\"month-nav\" onClick={handleNextMonth}>&gt;</button>\n          </div>\n\n          <div className=\"calendar-grid\">\n            {getMonthDates().map((date, index) => (\n              <div key={index} className=\"calendar-day\">\n                {date && (\n                  <>\n                    <div className=\"day-date\">{date.getDate()}</div>\n                    <div className=\"task-indicator-container\">\n                      {formattedTasks.map((task) => {\n                        return isTaskOnDate(date, task) ? (\n                          <div key={task.id} className=\"task-indicator task-bar\" style={{ backgroundColor: task.color }}></div>\n                        ) : null;\n                      })}\n                    </div>\n                  </>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {viewMode === 'year' && (\n        <div className=\"year-calendar\">\n          <div className=\"year-header\">\n            <button className=\"year-nav\" onClick={handlePreviousYear}>&lt;</button>\n            <div className=\"year-title\">{currentYear}</div>\n            <button className=\"year-nav\" onClick={handleNextYear}>&gt;</button>\n          </div>\n\n          <div className=\"year-grid\">\n            {getYearMonths().map((month, index) => (\n              <div key={index} className=\"year-month\">\n                <div className=\"month-name\">{month.name}</div>\n                <div className=\"month-tasks\">\n                  {formattedTasks.map((task) => {\n                    return isTaskInMonth(month.date, task) ? (\n                      <div key={task.id} className=\"task-indicator task-circle\" style={{ backgroundColor: task.color }}></div>\n                    ) : null;\n                  })}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GanttChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}