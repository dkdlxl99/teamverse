{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = \"http://localhost:8082/api/auth\"; // ✅ 백엔드 경로 확인\n\nexport const signup = async (name, email, password) => {\n  try {\n    const response = await axios.post(\"http://localhost:8082/api/auth/register\", {\n      username: name,\n      email,\n      password\n    }, {\n      withCredentials: true\n    });\n\n    // ✅ 백엔드에서 성공 응답 시 message 필드가 존재하면 성공 처리\n    if (response.status === 200) {\n      return {\n        success: true,\n        message: response.data\n      };\n    } else {\n      return {\n        success: false,\n        message: \"회원가입 실패\"\n      };\n    }\n  } catch (error) {\n    var _error$response;\n    return {\n      success: false,\n      message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || \"회원가입 실패\"\n    };\n  }\n};\nexport const login = async (email, password) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/login`, {\n      email,\n      password\n    }, {\n      withCredentials: true\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    return {\n      message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"로그인 실패\"\n    };\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","signup","name","email","password","response","post","username","withCredentials","status","success","message","data","error","_error$response","login","_error$response2","_error$response2$data"],"sources":["C:/project2/teamverse-2 - 복사본/src/api/auth.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_BASE_URL = \"http://localhost:8082/api/auth\"; // ✅ 백엔드 경로 확인\r\n\r\nexport const signup = async (name, email, password) => {\r\n    try {\r\n        const response = await axios.post(\"http://localhost:8082/api/auth/register\", {\r\n            username: name,\r\n            email,\r\n            password\r\n        }, { withCredentials: true });\r\n\r\n        // ✅ 백엔드에서 성공 응답 시 message 필드가 존재하면 성공 처리\r\n        if (response.status === 200) {\r\n            return { success: true, message: response.data };\r\n        } else {\r\n            return { success: false, message: \"회원가입 실패\" };\r\n        }\r\n    } catch (error) {\r\n        return { \r\n            success: false, \r\n            message: error.response?.data || \"회원가입 실패\" \r\n        };\r\n    }\r\n};\r\n\r\n\r\nexport const login = async (email, password) => {\r\n    try {\r\n        const response = await axios.post(`${API_BASE_URL}/login`, { email, password }, { withCredentials: true });\r\n        return response.data;\r\n    } catch (error) {\r\n        return { message: error.response?.data?.message || \"로그인 실패\" };\r\n    }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,gCAAgC,CAAC,CAAC;;AAEvD,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,KAAK;EACnD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,yCAAyC,EAAE;MACzEC,QAAQ,EAAEL,IAAI;MACdC,KAAK;MACLC;IACJ,CAAC,EAAE;MAAEI,eAAe,EAAE;IAAK,CAAC,CAAC;;IAE7B;IACA,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,OAAO;QAAEC,OAAO,EAAE,IAAI;QAAEC,OAAO,EAAEN,QAAQ,CAACO;MAAK,CAAC;IACpD,CAAC,MAAM;MACH,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAU,CAAC;IACjD;EACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;IAAA,IAAAC,eAAA;IACZ,OAAO;MACHJ,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE,EAAAG,eAAA,GAAAD,KAAK,CAACR,QAAQ,cAAAS,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,KAAI;IACrC,CAAC;EACL;AACJ,CAAC;AAGD,OAAO,MAAMG,KAAK,GAAG,MAAAA,CAAOZ,KAAK,EAAEC,QAAQ,KAAK;EAC5C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,GAAGN,YAAY,QAAQ,EAAE;MAAEG,KAAK;MAAEC;IAAS,CAAC,EAAE;MAAEI,eAAe,EAAE;IAAK,CAAC,CAAC;IAC1G,OAAOH,QAAQ,CAACO,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAG,gBAAA,EAAAC,qBAAA;IACZ,OAAO;MAAEN,OAAO,EAAE,EAAAK,gBAAA,GAAAH,KAAK,CAACR,QAAQ,cAAAW,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBJ,IAAI,cAAAK,qBAAA,uBAApBA,qBAAA,CAAsBN,OAAO,KAAI;IAAS,CAAC;EACjE;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}