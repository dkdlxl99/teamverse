{"ast":null,"code":"var _jsxFileName = \"C:\\\\project2\\\\teamverse-2\\\\src\\\\components\\\\Chatbox.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import '../styles/Chatbox.css';\n// import FileManager from './FileManager';\n// import connectToChat from '../utils/ConnectToChat';\n\n// const Chatbox = () => {\n//   const [messages, setMessages] = useState([\n//     { id: 1, user: 'Alice', content: 'Hello Team!' },\n//     { id: 2, user: 'Bob', content: 'Hi Alice!' },\n//   ]);\n\n//   const [input, setInput] = useState('');\n\n//   const handleSend = () => {\n//     if (input.trim()) {\n//       setMessages([...messages, { id: messages.length + 1, user: 'You', content: input }]);\n//       setInput('');\n//     }\n//   };\n\n//   return (\n//     <div className=\"chatbox\">\n//       <h3>Chat</h3>\n//       <div className=\"messages\">\n//         {messages.map((msg) => (\n//           <p key={msg.id}>\n//             <strong>{msg.user}: </strong>{msg.content}\n//           </p>\n//         ))}\n//       </div>\n//       <div className=\"input-area\">\n//         <input\n//           type=\"text\"\n//           value={input}\n//           onChange={(e) => setInput(e.target.value)}\n//           placeholder=\"Type a message\"\n//         />\n//         <button onClick={handleSend}>Send</button>\n\n//       </div>\n//       <FileManager /> {/* 파일 관리 기능 추가 */}\n//     </div>\n//   );\n// };\n\n// export default Chatbox;\n\nimport React, { useState, useEffect } from 'react';\nimport '../styles/Chatbox.css';\nimport FileManager from './FileManager';\nimport connectToChat from '../utils/ConnectToChat';\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"stompjs\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbox = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [stompClient, setStompClient] = useState(null);\n  useEffect(() => {\n    const connectWebSocket = async () => {\n      try {\n        // 1️⃣ Secondary Token 요청\n        const response = await axios.post(\"http://localhost:8082/api/user/secondary-token\", {}, {\n          withCredentials: true\n        });\n        const secondaryToken = response.data.secondaryToken;\n        console.log(\"✅ Secondary Token:\", secondaryToken);\n\n        // 2️⃣ WebSocket 연결 (Secondary Token 포함)\n        const socket = new SockJS(`http://localhost:8082/ws?secondaryToken=${secondaryToken}`);\n        const client = Stomp.over(socket);\n        client.connect({}, frame => {\n          console.log(\"🟢 WebSocket 연결 성공:\", frame);\n\n          // 3️⃣ 채팅방 구독 (teamId = 1 예시)\n          client.subscribe(\"/topic/chat/1\", message => {\n            const receivedMessage = JSON.parse(message.body);\n            setMessages(prevMessages => [...prevMessages, receivedMessage]);\n          });\n          setStompClient(client);\n        }, error => {\n          console.error(\"⛔ WebSocket 연결 실패:\", error);\n        });\n      } catch (error) {\n        console.error(\"❌ Secondary Token 요청 실패:\", error);\n      }\n    };\n    connectWebSocket();\n    return () => {\n      if (stompClient) {\n        stompClient.disconnect();\n        console.log(\"🔴 WebSocket 연결 종료\");\n      }\n    };\n  }, []);\n  const handleSend = () => {\n    if (input.trim() && stompClient) {\n      const message = {\n        user: \"You\",\n        content: input,\n        teamId: 1\n      }; // 팀 ID는 1로 가정\n      stompClient.send(\"/app/chat/send\", {}, JSON.stringify(message));\n      setInput('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Team Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.user, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this), msg.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type a message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FileManager, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbox, \"zL46gsz8J9sqVZpvtYxjMKWv1jE=\");\n_c = Chatbox;\nexport default Chatbox;\nvar _c;\n$RefreshReg$(_c, \"Chatbox\");","map":{"version":3,"names":["React","useState","useEffect","FileManager","connectToChat","SockJS","Stomp","axios","jsxDEV","_jsxDEV","Chatbox","_s","messages","setMessages","input","setInput","stompClient","setStompClient","connectWebSocket","response","post","withCredentials","secondaryToken","data","console","log","socket","client","over","connect","frame","subscribe","message","receivedMessage","JSON","parse","body","prevMessages","error","disconnect","handleSend","trim","user","content","teamId","send","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/project2/teamverse-2/src/components/Chatbox.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import '../styles/Chatbox.css';\r\n// import FileManager from './FileManager';\r\n// import connectToChat from '../utils/ConnectToChat';\r\n\r\n\r\n// const Chatbox = () => {\r\n//   const [messages, setMessages] = useState([\r\n//     { id: 1, user: 'Alice', content: 'Hello Team!' },\r\n//     { id: 2, user: 'Bob', content: 'Hi Alice!' },\r\n//   ]);\r\n\r\n//   const [input, setInput] = useState('');\r\n\r\n//   const handleSend = () => {\r\n//     if (input.trim()) {\r\n//       setMessages([...messages, { id: messages.length + 1, user: 'You', content: input }]);\r\n//       setInput('');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"chatbox\">\r\n//       <h3>Chat</h3>\r\n//       <div className=\"messages\">\r\n//         {messages.map((msg) => (\r\n//           <p key={msg.id}>\r\n//             <strong>{msg.user}: </strong>{msg.content}\r\n//           </p>\r\n//         ))}\r\n//       </div>\r\n//       <div className=\"input-area\">\r\n//         <input\r\n//           type=\"text\"\r\n//           value={input}\r\n//           onChange={(e) => setInput(e.target.value)}\r\n//           placeholder=\"Type a message\"\r\n//         />\r\n//         <button onClick={handleSend}>Send</button>\r\n        \r\n//       </div>\r\n//       <FileManager /> {/* 파일 관리 기능 추가 */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Chatbox;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport '../styles/Chatbox.css';\r\nimport FileManager from './FileManager';\r\nimport connectToChat from '../utils/ConnectToChat';\r\nimport SockJS from \"sockjs-client\";\r\nimport Stomp from \"stompjs\";\r\nimport axios from \"axios\";\r\n\r\nconst Chatbox = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [stompClient, setStompClient] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const connectWebSocket = async () => {\r\n      try {\r\n        // 1️⃣ Secondary Token 요청\r\n        const response = await axios.post(\"http://localhost:8082/api/user/secondary-token\", {}, { withCredentials: true });\r\n        const secondaryToken = response.data.secondaryToken;\r\n        console.log(\"✅ Secondary Token:\", secondaryToken);\r\n\r\n        // 2️⃣ WebSocket 연결 (Secondary Token 포함)\r\n        const socket = new SockJS(`http://localhost:8082/ws?secondaryToken=${secondaryToken}`);\r\n        const client = Stomp.over(socket);\r\n\r\n        client.connect({}, (frame) => {\r\n          console.log(\"🟢 WebSocket 연결 성공:\", frame);\r\n\r\n          // 3️⃣ 채팅방 구독 (teamId = 1 예시)\r\n          client.subscribe(\"/topic/chat/1\", (message) => {\r\n            const receivedMessage = JSON.parse(message.body);\r\n            setMessages((prevMessages) => [...prevMessages, receivedMessage]);\r\n          });\r\n\r\n          setStompClient(client);\r\n        }, (error) => {\r\n          console.error(\"⛔ WebSocket 연결 실패:\", error);\r\n        });\r\n\r\n      } catch (error) {\r\n        console.error(\"❌ Secondary Token 요청 실패:\", error);\r\n      }\r\n    };\r\n\r\n    connectWebSocket();\r\n\r\n    return () => {\r\n      if (stompClient) {\r\n        stompClient.disconnect();\r\n        console.log(\"🔴 WebSocket 연결 종료\");\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleSend = () => {\r\n    if (input.trim() && stompClient) {\r\n      const message = { user: \"You\", content: input, teamId: 1 }; // 팀 ID는 1로 가정\r\n      stompClient.send(\"/app/chat/send\", {}, JSON.stringify(message));\r\n      setInput('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbox\">\r\n      <h3>Team Chat</h3>\r\n      <div className=\"messages\">\r\n        {messages.map((msg, index) => (\r\n          <p key={index}>\r\n            <strong>{msg.user}: </strong>{msg.content}\r\n          </p>\r\n        ))}\r\n      </div>\r\n      <div className=\"input-area\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type a message\"\r\n        />\r\n        <button onClick={handleSend}>Send</button>\r\n      </div>\r\n      <FileManager /> {/* 파일 관리 기능 추가 */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}