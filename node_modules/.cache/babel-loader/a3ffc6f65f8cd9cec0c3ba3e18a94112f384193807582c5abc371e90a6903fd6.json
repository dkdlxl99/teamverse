{"ast":null,"code":"var _jsxFileName = \"C:\\\\project2\\\\teamverse-2-boot,react - \\uC791\\uC5C5\\\\src\\\\pages\\\\MainPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import Sidebar from \"../components/Sidebar\";\n// import GanttChart from \"../components/GanttChart\";\n// import Chatbox from \"../components/Chatbox\";\n// import Dashboard from \"../components/Dashboard\";\n// import TaskBoard from \"../components/TaskBoard\";\n// import \"../styles/MainPage.css\";\n// import axios from \"axios\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n\n// const MainPage = () => {\n//     const [projects, setProjects] = useState([]);\n//     const [selectedProject, setSelectedProject] = useState(null);\n//     const [showModal, setShowModal] = useState(false);\n//     const [projectName, setProjectName] = useState(\"\");\n//     const [user, setUser] = useState(null);\n//     const { userId } = useParams(); // ✅ userId 가져오기\n//     const navigate = useNavigate(); // 수정: useNavigate 훅 사용\n\n//     // 🔹 로그인한 유저 정보 가져오기\n//     const fetchUserInfo = async () => {\n//         const token = localStorage.getItem(\"accessToken\");\n//         if (!token) {\n//             navigate(\"/login\"); // 수정: 로그인하지 않은 경우 로그인 페이지로 이동\n//             return;\n//         }\n\n//         try {\n//             const response = await axios.get(\"http://localhost:8082/api/auth/me\", {\n//                 headers: {\n//                     Authorization: `Bearer ${token}`,\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//             });\n\n//             console.log(\"✅ 로그인한 사용자 정보:\", response.data);\n//             setUser(response.data);\n//             localStorage.setItem(\"user\", JSON.stringify(response.data));\n\n//             // 수정: 로그인 후 사용자 ID 기반 URL 이동\n//             navigate(`/dashboard/${response.data.id}`);\n\n//         } catch (error) {\n//             console.error(\"❌ 사용자 정보 불러오기 실패:\", error);\n//             navigate(\"/login\"); // 수정: 사용자 정보 로드 실패 시 로그인 페이지로 이동\n\n//         }\n//     };\n\n//     // 🔹 로그인한 유저의 프로젝트 불러오기\n//     const fetchProjects = async () => {\n//         const token = localStorage.getItem(\"accessToken\");\n//         if (!token) return;\n\n//         try {\n//             const response = await axios.get(\"http://localhost:8082/api/user/projects\", {\n//                 headers: {\n//                     Authorization: `Bearer ${token}`,\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//             });\n\n//             console.log(\"✅ 프로젝트 목록:\", response.data);\n//             setProjects(response.data);\n\n//             // const savedProjectId = localStorage.getItem(\"selectedProjectId\");\n//             // if (savedProjectId) {\n//             //     const foundProject = response.data.find(proj => proj.id === parseInt(savedProjectId));\n//             //     if (foundProject) {\n//             //         setSelectedProject(foundProject);\n//             //     }\n//             // }\n\n//             if (response.data.length > 0) {\n//                 const savedProjectId = localStorage.getItem(\"selectedProjectId\");\n//                 if (savedProjectId) {\n//                     const foundProject = response.data.find(proj => proj.id === parseInt(savedProjectId));\n//                     if (foundProject) {\n//                         setSelectedProject(foundProject);\n//                     }\n//                 }\n//             }\n//         } catch (error) {\n//             console.error(\"❌ 프로젝트 목록 불러오기 실패:\", error);\n//             alert(\"프로젝트 데이터를 불러올 수 없습니다.\");\n//         }\n//     };\n\n//     // ✅ 처음 렌더링될 때 유저 정보 및 프로젝트 가져오기\n//     // useEffect(() => {\n//     //     fetchUserInfo();\n//     //     fetchProjects();\n//     // }, []);\n//     useEffect(() => {\n//         const fetchUserInfo = async () => {\n//             const token = localStorage.getItem(\"accessToken\");\n//             if (!token) {\n//                 console.error(\"🚨 토큰이 없습니다! 로그인 페이지로 이동합니다.\");\n//                 navigate(\"/login\");\n//                 return;\n//             }\n\n//             try {\n//                 const response = await axios.get(\"http://localhost:8082/api/auth/me\", {\n//                     headers: { Authorization: `Bearer ${token}` },\n//                 });\n\n//                 console.log(\"📌 MainPage에서 가져온 사용자 정보:\", response.data);\n\n//                 if (response.data.id !== parseInt(userId)) {\n//                     console.warn(\"🚨 URL의 userId와 로그인한 사용자 ID가 다름!\");\n//                     navigate(`/dashboard/${response.data.id}`);\n//                 }\n\n//                 setUser(response.data);\n//             } catch (error) {\n//                 console.error(\"❌ 사용자 정보를 불러오는 데 실패했습니다:\", error);\n//                 navigate(\"/login\"); // 🚨 401 Unauthorized 응답이 오면 로그인 페이지로 이동\n//             }\n//         };\n\n//         fetchUserInfo();\n//     }, [userId, navigate]);\n\n//     const handleCreateProject = async () => {\n//         const token = localStorage.getItem(\"accessToken\");\n//         if (!token) {\n//             alert(\"로그인이 필요합니다.\");\n//             return;\n//         }\n\n//         try {\n//             const response = await axios.post(\n//                 \"http://localhost:8082/api/user/projects\",\n//                 { name: projectName, startDate: new Date().toISOString().split(\"T\")[0] },\n//                 {\n//                     headers: {\n//                         Authorization: `Bearer ${token}`,\n//                         \"Content-Type\": \"application/json\",\n//                     },\n//                 }\n//             );\n\n//             console.log(\"✅ 프로젝트 생성 성공:\", response.data);\n//             setProjects([...projects, response.data]);\n//             setSelectedProject(response.data);\n//             localStorage.setItem(\"selectedProjectId\", response.data.id);\n//             setShowModal(false);\n//         } catch (error) {\n//             console.error(\"❌ 프로젝트 생성 실패:\", error);\n//             alert(\"프로젝트 생성에 실패했습니다.\");\n//         }\n//     };\n\n//     return (\n//         <div className=\"main-page\">\n//             <div className=\"content\">\n//                 {projects.length === 0 ? (\n//                     <div className=\"empty-gantt\">\n//                         <p>현재 프로젝트가 없습니다.</p>\n//                         <button className=\"create-project-btn\" onClick={() => setShowModal(true)}>\n//                             새로운 프로젝트 생성\n//                         </button>\n//                     </div>\n//                 ) : (\n//                     <GanttChart project={projects[0]} />\n//                 )}\n//                 <TaskBoard />\n//                 <Dashboard tasks={[]} />\n//             </div>\n//             <div className=\"chatbox-container\">\n//                 <Sidebar />\n//                 <Chatbox />\n//             </div>\n\n//             {/* 🔹 프로젝트 생성 모달 */}\n//             {showModal && (\n//                 <div className=\"modal\">\n//                     <div className=\"modal-content\">\n//                         <h2>새 프로젝트 생성</h2>\n//                         <input\n//                             type=\"text\"\n//                             placeholder=\"프로젝트 이름\"\n//                             value={projectName}\n//                             onChange={(e) => setProjectName(e.target.value)}\n//                         />\n//                         <button onClick={handleCreateProject}>생성</button>\n//                         <button onClick={() => setShowModal(false)}>취소</button>\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default MainPage;\n\nimport React, { useState, useEffect } from \"react\";\nimport Sidebar from \"../components/Sidebar\";\nimport GanttChart from \"../components/GanttChart\";\nimport Chatbox from \"../components/Chatbox\";\nimport Dashboard from \"../components/Dashboard\";\nimport TaskBoard from \"../components/TaskBoard\";\nimport \"../styles/MainPage.css\";\nimport axios from \"axios\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainPage = () => {\n  _s();\n  const [projects, setProjects] = useState([]); // ✅ 프로젝트 목록 저장\n  const [selectedProject, setSelectedProject] = useState(null); // ✅ 선택한 프로젝트 저장\n  const [showModal, setShowModal] = useState(false);\n  const [projectName, setProjectName] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const {\n    userId\n  } = useParams();\n  const navigate = useNavigate();\n\n  // ✅ 프로젝트 목록 불러오기\n  useEffect(() => {\n    const fetchProjects = async () => {\n      const token = localStorage.getItem(\"accessToken\");\n      if (!token) return;\n      try {\n        const response = await axios.get(\"http://localhost:8082/api/user/projects\", {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        console.log(\"✅ 프로젝트 목록:\", response.data);\n        setProjects(response.data);\n\n        // ✅ 저장된 프로젝트 ID가 있다면 자동 선택\n        const savedProjectId = localStorage.getItem(\"selectedProjectId\");\n        if (savedProjectId) {\n          const foundProject = response.data.find(proj => proj.id === parseInt(savedProjectId));\n          if (foundProject) {\n            setSelectedProject(foundProject);\n          }\n        }\n      } catch (error) {\n        console.error(\"❌ 프로젝트 목록 불러오기 실패:\", error);\n        alert(\"프로젝트 데이터를 불러올 수 없습니다.\");\n      }\n    };\n    fetchProjects();\n  }, []);\n\n  // ✅ 새로운 프로젝트 생성\n  const handleCreateProject = async () => {\n    const token = localStorage.getItem(\"accessToken\");\n    if (!token) {\n      alert(\"로그인이 필요합니다.\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://localhost:8082/api/user/projects\", {\n        name: projectName,\n        startDate: new Date().toISOString().split(\"T\")[0]\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      console.log(\"✅ 프로젝트 생성 성공:\", response.data);\n      setProjects([...projects, response.data]);\n      setSelectedProject(response.data);\n      localStorage.setItem(\"selectedProjectId\", response.data.id);\n      setShowModal(false);\n    } catch (error) {\n      console.error(\"❌ 프로젝트 생성 실패:\", error);\n      alert(\"프로젝트 생성에 실패했습니다.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83D\\uDCC2 \\uD504\\uB85C\\uC81D\\uD2B8 \\uBAA9\\uB85D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 21\n        }, this), projects.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uD604\\uC7AC \\uD504\\uB85C\\uC81D\\uD2B8\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: projects.map(project => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `project-btn ${(selectedProject === null || selectedProject === void 0 ? void 0 : selectedProject.id) === project.id ? \"active\" : \"\"}`,\n              onClick: () => {\n                setSelectedProject(project);\n                localStorage.setItem(\"selectedProjectId\", project.id);\n              },\n              children: project.name || project.title || project.projectName || \"🚨 이름 없음\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 37\n            }, this)\n          }, project.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"create-project-btn\",\n          onClick: () => setShowModal(true),\n          children: \"\\uC0C8\\uB85C\\uC6B4 \\uD504\\uB85C\\uC81D\\uD2B8 \\uC0DD\\uC131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }, this), selectedProject ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"\\uD83D\\uDCCA \", selectedProject.name, \" - Gantt Chart\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(GanttChart, {\n          project: selectedProject\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-project-selected\",\n        children: \"\\uD83D\\uDCCC \\uD504\\uB85C\\uC81D\\uD2B8\\uB97C \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(TaskBoard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dashboard, {\n        tasks: []\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbox-container\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Chatbox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }, this), showModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uC0C8 \\uD504\\uB85C\\uC81D\\uD2B8 \\uC0DD\\uC131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\uD504\\uB85C\\uC81D\\uD2B8 \\uC774\\uB984\",\n          value: projectName,\n          onChange: e => setProjectName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCreateProject,\n          children: \"\\uC0DD\\uC131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowModal(false),\n          children: \"\\uCDE8\\uC18C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 9\n  }, this);\n};\n_s(MainPage, \"sAWmYWzU9gym5JA4E2S9yLJ+pS0=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","Sidebar","GanttChart","Chatbox","Dashboard","TaskBoard","axios","useNavigate","useParams","jsxDEV","_jsxDEV","MainPage","_s","projects","setProjects","selectedProject","setSelectedProject","showModal","setShowModal","projectName","setProjectName","user","setUser","userId","navigate","fetchProjects","token","localStorage","getItem","response","get","headers","Authorization","console","log","data","savedProjectId","foundProject","find","proj","id","parseInt","error","alert","handleCreateProject","post","name","startDate","Date","toISOString","split","setItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","project","onClick","title","tasks","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/project2/teamverse-2-boot,react - 작업/src/pages/MainPage.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import Sidebar from \"../components/Sidebar\";\r\n// import GanttChart from \"../components/GanttChart\";\r\n// import Chatbox from \"../components/Chatbox\";\r\n// import Dashboard from \"../components/Dashboard\";\r\n// import TaskBoard from \"../components/TaskBoard\";\r\n// import \"../styles/MainPage.css\";\r\n// import axios from \"axios\";\r\n// import { useNavigate, useParams } from \"react-router-dom\";\r\n\r\n// const MainPage = () => {\r\n//     const [projects, setProjects] = useState([]);\r\n//     const [selectedProject, setSelectedProject] = useState(null);\r\n//     const [showModal, setShowModal] = useState(false);\r\n//     const [projectName, setProjectName] = useState(\"\");\r\n//     const [user, setUser] = useState(null);\r\n//     const { userId } = useParams(); // ✅ userId 가져오기\r\n//     const navigate = useNavigate(); // 수정: useNavigate 훅 사용\r\n\r\n\r\n//     // 🔹 로그인한 유저 정보 가져오기\r\n//     const fetchUserInfo = async () => {\r\n//         const token = localStorage.getItem(\"accessToken\");\r\n//         if (!token) {\r\n//             navigate(\"/login\"); // 수정: 로그인하지 않은 경우 로그인 페이지로 이동\r\n//             return;\r\n//         }\r\n\r\n//         try {\r\n//             const response = await axios.get(\"http://localhost:8082/api/auth/me\", {\r\n//                 headers: {\r\n//                     Authorization: `Bearer ${token}`,\r\n//                     \"Content-Type\": \"application/json\",\r\n//                 },\r\n//             });\r\n\r\n//             console.log(\"✅ 로그인한 사용자 정보:\", response.data);\r\n//             setUser(response.data);\r\n//             localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n\r\n\r\n//             // 수정: 로그인 후 사용자 ID 기반 URL 이동\r\n//             navigate(`/dashboard/${response.data.id}`);\r\n\r\n//         } catch (error) {\r\n//             console.error(\"❌ 사용자 정보 불러오기 실패:\", error);\r\n//             navigate(\"/login\"); // 수정: 사용자 정보 로드 실패 시 로그인 페이지로 이동\r\n\r\n//         }\r\n//     };\r\n\r\n//     // 🔹 로그인한 유저의 프로젝트 불러오기\r\n//     const fetchProjects = async () => {\r\n//         const token = localStorage.getItem(\"accessToken\");\r\n//         if (!token) return;\r\n\r\n//         try {\r\n//             const response = await axios.get(\"http://localhost:8082/api/user/projects\", {\r\n//                 headers: {\r\n//                     Authorization: `Bearer ${token}`,\r\n//                     \"Content-Type\": \"application/json\",\r\n//                 },\r\n//             });\r\n\r\n//             console.log(\"✅ 프로젝트 목록:\", response.data);\r\n//             setProjects(response.data);\r\n\r\n//             // const savedProjectId = localStorage.getItem(\"selectedProjectId\");\r\n//             // if (savedProjectId) {\r\n//             //     const foundProject = response.data.find(proj => proj.id === parseInt(savedProjectId));\r\n//             //     if (foundProject) {\r\n//             //         setSelectedProject(foundProject);\r\n//             //     }\r\n//             // }\r\n            \r\n//             if (response.data.length > 0) {\r\n//                 const savedProjectId = localStorage.getItem(\"selectedProjectId\");\r\n//                 if (savedProjectId) {\r\n//                     const foundProject = response.data.find(proj => proj.id === parseInt(savedProjectId));\r\n//                     if (foundProject) {\r\n//                         setSelectedProject(foundProject);\r\n//                     }\r\n//                 }\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"❌ 프로젝트 목록 불러오기 실패:\", error);\r\n//             alert(\"프로젝트 데이터를 불러올 수 없습니다.\");\r\n//         }\r\n//     };\r\n\r\n//     // ✅ 처음 렌더링될 때 유저 정보 및 프로젝트 가져오기\r\n//     // useEffect(() => {\r\n//     //     fetchUserInfo();\r\n//     //     fetchProjects();\r\n//     // }, []);\r\n//     useEffect(() => {\r\n//         const fetchUserInfo = async () => {\r\n//             const token = localStorage.getItem(\"accessToken\");\r\n//             if (!token) {\r\n//                 console.error(\"🚨 토큰이 없습니다! 로그인 페이지로 이동합니다.\");\r\n//                 navigate(\"/login\");\r\n//                 return;\r\n//             }\r\n\r\n//             try {\r\n//                 const response = await axios.get(\"http://localhost:8082/api/auth/me\", {\r\n//                     headers: { Authorization: `Bearer ${token}` },\r\n//                 });\r\n\r\n//                 console.log(\"📌 MainPage에서 가져온 사용자 정보:\", response.data);\r\n\r\n//                 if (response.data.id !== parseInt(userId)) {\r\n//                     console.warn(\"🚨 URL의 userId와 로그인한 사용자 ID가 다름!\");\r\n//                     navigate(`/dashboard/${response.data.id}`);\r\n//                 }\r\n\r\n//                 setUser(response.data);\r\n//             } catch (error) {\r\n//                 console.error(\"❌ 사용자 정보를 불러오는 데 실패했습니다:\", error);\r\n//                 navigate(\"/login\"); // 🚨 401 Unauthorized 응답이 오면 로그인 페이지로 이동\r\n//             }\r\n//         };\r\n\r\n//         fetchUserInfo();\r\n//     }, [userId, navigate]);\r\n\r\n\r\n\r\n//     const handleCreateProject = async () => {\r\n//         const token = localStorage.getItem(\"accessToken\");\r\n//         if (!token) {\r\n//             alert(\"로그인이 필요합니다.\");\r\n//             return;\r\n//         }\r\n\r\n//         try {\r\n//             const response = await axios.post(\r\n//                 \"http://localhost:8082/api/user/projects\",\r\n//                 { name: projectName, startDate: new Date().toISOString().split(\"T\")[0] },\r\n//                 {\r\n//                     headers: {\r\n//                         Authorization: `Bearer ${token}`,\r\n//                         \"Content-Type\": \"application/json\",\r\n//                     },\r\n//                 }\r\n//             );\r\n\r\n//             console.log(\"✅ 프로젝트 생성 성공:\", response.data);\r\n//             setProjects([...projects, response.data]);\r\n//             setSelectedProject(response.data);\r\n//             localStorage.setItem(\"selectedProjectId\", response.data.id);\r\n//             setShowModal(false);\r\n//         } catch (error) {\r\n//             console.error(\"❌ 프로젝트 생성 실패:\", error);\r\n//             alert(\"프로젝트 생성에 실패했습니다.\");\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"main-page\">\r\n//             <div className=\"content\">\r\n//                 {projects.length === 0 ? (\r\n//                     <div className=\"empty-gantt\">\r\n//                         <p>현재 프로젝트가 없습니다.</p>\r\n//                         <button className=\"create-project-btn\" onClick={() => setShowModal(true)}>\r\n//                             새로운 프로젝트 생성\r\n//                         </button>\r\n//                     </div>\r\n//                 ) : (\r\n//                     <GanttChart project={projects[0]} />\r\n//                 )}\r\n//                 <TaskBoard />\r\n//                 <Dashboard tasks={[]} />\r\n//             </div>\r\n//             <div className=\"chatbox-container\">\r\n//                 <Sidebar />\r\n//                 <Chatbox />\r\n//             </div>\r\n\r\n//             {/* 🔹 프로젝트 생성 모달 */}\r\n//             {showModal && (\r\n//                 <div className=\"modal\">\r\n//                     <div className=\"modal-content\">\r\n//                         <h2>새 프로젝트 생성</h2>\r\n//                         <input\r\n//                             type=\"text\"\r\n//                             placeholder=\"프로젝트 이름\"\r\n//                             value={projectName}\r\n//                             onChange={(e) => setProjectName(e.target.value)}\r\n//                         />\r\n//                         <button onClick={handleCreateProject}>생성</button>\r\n//                         <button onClick={() => setShowModal(false)}>취소</button>\r\n//                     </div>\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default MainPage;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport GanttChart from \"../components/GanttChart\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport Dashboard from \"../components/Dashboard\";\r\nimport TaskBoard from \"../components/TaskBoard\";\r\nimport \"../styles/MainPage.css\";\r\nimport axios from \"axios\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\nconst MainPage = () => {\r\n    const [projects, setProjects] = useState([]); // ✅ 프로젝트 목록 저장\r\n    const [selectedProject, setSelectedProject] = useState(null); // ✅ 선택한 프로젝트 저장\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [projectName, setProjectName] = useState(\"\");\r\n    const [user, setUser] = useState(null);\r\n    const { userId } = useParams();\r\n    const navigate = useNavigate();\r\n\r\n    // ✅ 프로젝트 목록 불러오기\r\n    useEffect(() => {\r\n        const fetchProjects = async () => {\r\n            const token = localStorage.getItem(\"accessToken\");\r\n            if (!token) return;\r\n\r\n            try {\r\n                const response = await axios.get(\"http://localhost:8082/api/user/projects\", {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                });\r\n\r\n                console.log(\"✅ 프로젝트 목록:\", response.data);\r\n                setProjects(response.data);\r\n\r\n                // ✅ 저장된 프로젝트 ID가 있다면 자동 선택\r\n                const savedProjectId = localStorage.getItem(\"selectedProjectId\");\r\n                if (savedProjectId) {\r\n                    const foundProject = response.data.find(proj => proj.id === parseInt(savedProjectId));\r\n                    if (foundProject) {\r\n                        setSelectedProject(foundProject);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error(\"❌ 프로젝트 목록 불러오기 실패:\", error);\r\n                alert(\"프로젝트 데이터를 불러올 수 없습니다.\");\r\n            }\r\n        };\r\n\r\n        fetchProjects();\r\n    }, []);\r\n\r\n    // ✅ 새로운 프로젝트 생성\r\n    const handleCreateProject = async () => {\r\n        const token = localStorage.getItem(\"accessToken\");\r\n        if (!token) {\r\n            alert(\"로그인이 필요합니다.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.post(\r\n                \"http://localhost:8082/api/user/projects\",\r\n                { name: projectName, startDate: new Date().toISOString().split(\"T\")[0] },\r\n                {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                }\r\n            );\r\n\r\n            console.log(\"✅ 프로젝트 생성 성공:\", response.data);\r\n            setProjects([...projects, response.data]);\r\n            setSelectedProject(response.data);\r\n            localStorage.setItem(\"selectedProjectId\", response.data.id);\r\n            setShowModal(false);\r\n        } catch (error) {\r\n            console.error(\"❌ 프로젝트 생성 실패:\", error);\r\n            alert(\"프로젝트 생성에 실패했습니다.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"main-page\">\r\n            <div className=\"content\">\r\n                {/* ✅ 프로젝트 목록 표시 */}\r\n                <div className=\"project-list\">\r\n                    <h2>📂 프로젝트 목록</h2>\r\n                    {projects.length === 0 ? (\r\n                        <p>현재 프로젝트가 없습니다.</p>\r\n                    ) : (\r\n                        <ul>\r\n                            {projects.map((project) => (\r\n                                <li key={project.id}>\r\n                                    <button\r\n                                        className={`project-btn ${selectedProject?.id === project.id ? \"active\" : \"\"}`}\r\n                                        onClick={() => {\r\n                                            setSelectedProject(project);\r\n                                            localStorage.setItem(\"selectedProjectId\", project.id);\r\n                                        }}\r\n                                    >\r\n                                        {project.name || project.title || project.projectName || \"🚨 이름 없음\"}\r\n                                    </button>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    )}\r\n                    <button className=\"create-project-btn\" onClick={() => setShowModal(true)}>\r\n                        새로운 프로젝트 생성\r\n                    </button>\r\n                </div>\r\n\r\n                {/* ✅ 선택한 프로젝트의 간트 차트 표시 */}\r\n                {selectedProject ? (\r\n                    <div className=\"project-details\">\r\n                        <h2>📊 {selectedProject.name} - Gantt Chart</h2>\r\n                        <GanttChart project={selectedProject} />\r\n                    </div>\r\n                ) : (\r\n                    <p className=\"no-project-selected\">📌 프로젝트를 선택해주세요.</p>\r\n                )}\r\n\r\n                <TaskBoard />\r\n                <Dashboard tasks={[]} />\r\n            </div>\r\n            <div className=\"chatbox-container\">\r\n                <Sidebar />\r\n                <Chatbox />\r\n            </div>\r\n\r\n            {/* 🔹 프로젝트 생성 모달 */}\r\n            {showModal && (\r\n                <div className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <h2>새 프로젝트 생성</h2>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"프로젝트 이름\"\r\n                            value={projectName}\r\n                            onChange={(e) => setProjectName(e.target.value)}\r\n                        />\r\n                        <button onClick={handleCreateProject}>생성</button>\r\n                        <button onClick={() => setShowModal(false)}>취소</button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainPage;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAO,wBAAwB;AAC/B,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}