{"ast":null,"code":"var _jsxFileName = \"C:\\\\project2\\\\teamverse-2-boot,react - \\uC791\\uC5C5\\\\src\\\\pages\\\\TeamStatusPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import Navbar from \"../components/Navbar\";\n// import \"../styles/TeamStatusPage.css\";\n// import axios from \"axios\";\n\n// const TeamStatusPage = () => {\n//   const [showInviteModal, setShowInviteModal] = useState(false);\n//   const [inviteEmail, setInviteEmail] = useState(\"\");\n\n//   const handleInvite = async () => {\n//       if (!inviteEmail.trim()) {\n//           alert(\"초대할 사용자의 이메일을 입력하세요.\");\n//           return;\n//       }\n\n//       try {\n//           const token = localStorage.getItem(\"accessToken\"); // 🔹 JWT 토큰 가져오기\n//           if (!token) {\n//               alert(\"로그인이 필요합니다.\");\n//               return;\n//           }\n\n//             // ✅ 현재 선택된 프로젝트 ID 가져오기\n//         const projectId = localStorage.getItem(\"selectedProjectId\");\n//         if (!projectId) {\n//             alert(\"프로젝트를 먼저 선택해주세요.\");\n//             return;\n//         }\n\n//           const response = await axios.post(\n//               \"http://localhost:8082/api/team/invite\",\n//               { email: inviteEmail, projectId },\n//               {\n//                   headers: {\n//                       \"Authorization\": `Bearer ${token}`,\n//                       \"Content-Type\": \"application/json\"\n//                   }\n//               }\n//           );\n\n//           if (response.status === 200) {\n//               alert(\"초대 요청이 성공적으로 전송되었습니다!\");\n//               setShowInviteModal(false);\n//               setInviteEmail(\"\"); // 입력 필드 초기화\n//           } else {\n//               alert(\"초대할 수 없는 사용자입니다.\");\n//           }\n//       } catch (error) {\n//           console.error(\"초대 요청 실패:\", error);\n//           alert(\"초대 요청을 보낼 수 없습니다.\");\n//       }\n//   };\n\n//   return (\n//     <div className=\"team-status\">\n//         <h2>팀 상태</h2>\n//         <button className=\"invite-button\" onClick={() => setShowInviteModal(true)}>\n//             팀원 초대\n//         </button>\n\n//         {showInviteModal && (\n//             <div className=\"modal\">\n//                 <div className=\"modal-content\">\n//                     <h3>초대할 사용자 이메일 입력</h3>\n//                     <input\n//                         type=\"email\"\n//                         placeholder=\"사용자 이메일\"\n//                         value={inviteEmail}\n//                         onChange={(e) => setInviteEmail(e.target.value)}\n//                     />\n//                     <button onClick={handleInvite}>초대하기</button>\n//                     <button onClick={() => setShowInviteModal(false)}>취소</button>\n//                 </div>\n//             </div>\n//         )}\n//     </div>\n// );\n// };\n\n// export default TeamStatusPage;\n\nimport React, { useState } from \"react\";\nimport Navbar from \"../components/Navbar\";\nimport \"../styles/TeamStatusPage.css\";\nimport axios from \"axios\";\nimport { getAccessToken, getRefreshToken } from \"../utils/authUtils\"; // ✅ 토큰 가져오는 유틸 함수 추가\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TeamStatusPage = () => {\n  _s();\n  const [showInviteModal, setShowInviteModal] = useState(false);\n  const [inviteEmail, setInviteEmail] = useState(\"\");\n\n  // ✅ Access Token이 없으면 자동으로 Refresh Token을 사용하여 갱신하는 함수\n  const getValidAccessToken = async () => {\n    let token = getAccessToken();\n    if (!token) {\n      const refreshToken = getRefreshToken();\n      if (!refreshToken) {\n        alert(\"로그인이 필요합니다.\");\n        return null;\n      }\n      try {\n        const response = await axios.post(\"http://localhost:8082/api/auth/refresh\", {\n          refreshToken\n        });\n        localStorage.setItem(\"accessToken\", response.data.accessToken);\n        sessionStorage.setItem(\"accessToken\", response.data.accessToken);\n        token = response.data.accessToken;\n      } catch (error) {\n        alert(\"세션이 만료되었습니다. 다시 로그인해주세요.\");\n        return null;\n      }\n    }\n    return token;\n  };\n  const handleInvite = async () => {\n    if (!inviteEmail.trim()) {\n      alert(\"초대할 사용자의 이메일을 입력하세요.\");\n      return;\n    }\n    const token = await getValidAccessToken(); // ✅ Access Token이 없으면 자동 갱신\n    if (!token) {\n      alert(\"로그인이 필요합니다.\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://localhost:8082/api/team/invite\", {\n        email: inviteEmail\n      }, {\n        headers: {\n          \"Authorization\": `Bearer ${token}`,\n          // ✅ 헤더 추가\n          \"Content-Type\": \"application/json\"\n        },\n        withCredentials: true // ✅ 쿠키 인증 포함\n      });\n      if (response.status === 200) {\n        alert(\"초대 요청이 성공적으로 전송되었습니다!\");\n        setShowInviteModal(false);\n        setInviteEmail(\"\");\n      } else {\n        alert(\"초대할 수 없는 사용자입니다.\");\n      }\n    } catch (error) {\n      console.error(\"초대 요청 실패:\", error);\n      alert(\"초대 요청을 보낼 수 없습니다.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"team-status\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD300 \\uC0C1\\uD0DC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"invite-button\",\n      onClick: () => setShowInviteModal(true),\n      children: \"\\uD300\\uC6D0 \\uCD08\\uB300\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), showInviteModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uCD08\\uB300\\uD560 \\uC0AC\\uC6A9\\uC790 \\uC774\\uBA54\\uC77C \\uC785\\uB825\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"\\uC0AC\\uC6A9\\uC790 \\uC774\\uBA54\\uC77C\",\n          value: inviteEmail,\n          onChange: e => setInviteEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleInvite,\n          children: \"\\uCD08\\uB300\\uD558\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowInviteModal(false),\n          children: \"\\uCDE8\\uC18C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 9\n  }, this);\n};\n_s(TeamStatusPage, \"nDCy6TYkK2XmcX4Sb/2BOoXb25A=\");\n_c = TeamStatusPage;\nexport default TeamStatusPage;\nvar _c;\n$RefreshReg$(_c, \"TeamStatusPage\");","map":{"version":3,"names":["React","useState","Navbar","axios","getAccessToken","getRefreshToken","jsxDEV","_jsxDEV","TeamStatusPage","_s","showInviteModal","setShowInviteModal","inviteEmail","setInviteEmail","getValidAccessToken","token","refreshToken","alert","response","post","localStorage","setItem","data","accessToken","sessionStorage","error","handleInvite","trim","email","headers","withCredentials","status","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/project2/teamverse-2-boot,react - 작업/src/pages/TeamStatusPage.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import Navbar from \"../components/Navbar\";\r\n// import \"../styles/TeamStatusPage.css\";\r\n// import axios from \"axios\";\r\n\r\n// const TeamStatusPage = () => {\r\n//   const [showInviteModal, setShowInviteModal] = useState(false);\r\n//   const [inviteEmail, setInviteEmail] = useState(\"\");\r\n\r\n//   const handleInvite = async () => {\r\n//       if (!inviteEmail.trim()) {\r\n//           alert(\"초대할 사용자의 이메일을 입력하세요.\");\r\n//           return;\r\n//       }\r\n\r\n//       try {\r\n//           const token = localStorage.getItem(\"accessToken\"); // 🔹 JWT 토큰 가져오기\r\n//           if (!token) {\r\n//               alert(\"로그인이 필요합니다.\");\r\n//               return;\r\n//           }\r\n\r\n//             // ✅ 현재 선택된 프로젝트 ID 가져오기\r\n//         const projectId = localStorage.getItem(\"selectedProjectId\");\r\n//         if (!projectId) {\r\n//             alert(\"프로젝트를 먼저 선택해주세요.\");\r\n//             return;\r\n//         }\r\n\r\n//           const response = await axios.post(\r\n//               \"http://localhost:8082/api/team/invite\",\r\n//               { email: inviteEmail, projectId },\r\n//               {\r\n//                   headers: {\r\n//                       \"Authorization\": `Bearer ${token}`,\r\n//                       \"Content-Type\": \"application/json\"\r\n//                   }\r\n//               }\r\n//           );\r\n\r\n//           if (response.status === 200) {\r\n//               alert(\"초대 요청이 성공적으로 전송되었습니다!\");\r\n//               setShowInviteModal(false);\r\n//               setInviteEmail(\"\"); // 입력 필드 초기화\r\n//           } else {\r\n//               alert(\"초대할 수 없는 사용자입니다.\");\r\n//           }\r\n//       } catch (error) {\r\n//           console.error(\"초대 요청 실패:\", error);\r\n//           alert(\"초대 요청을 보낼 수 없습니다.\");\r\n//       }\r\n//   };\r\n\r\n\r\n//   return (\r\n//     <div className=\"team-status\">\r\n//         <h2>팀 상태</h2>\r\n//         <button className=\"invite-button\" onClick={() => setShowInviteModal(true)}>\r\n//             팀원 초대\r\n//         </button>\r\n\r\n//         {showInviteModal && (\r\n//             <div className=\"modal\">\r\n//                 <div className=\"modal-content\">\r\n//                     <h3>초대할 사용자 이메일 입력</h3>\r\n//                     <input\r\n//                         type=\"email\"\r\n//                         placeholder=\"사용자 이메일\"\r\n//                         value={inviteEmail}\r\n//                         onChange={(e) => setInviteEmail(e.target.value)}\r\n//                     />\r\n//                     <button onClick={handleInvite}>초대하기</button>\r\n//                     <button onClick={() => setShowInviteModal(false)}>취소</button>\r\n//                 </div>\r\n//             </div>\r\n//         )}\r\n//     </div>\r\n// );\r\n// };\r\n\r\n// export default TeamStatusPage;\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport \"../styles/TeamStatusPage.css\";\r\nimport axios from \"axios\";\r\nimport { getAccessToken, getRefreshToken } from \"../utils/authUtils\"; // ✅ 토큰 가져오는 유틸 함수 추가\r\n\r\nconst TeamStatusPage = () => {\r\n    const [showInviteModal, setShowInviteModal] = useState(false);\r\n    const [inviteEmail, setInviteEmail] = useState(\"\");\r\n\r\n    // ✅ Access Token이 없으면 자동으로 Refresh Token을 사용하여 갱신하는 함수\r\n    const getValidAccessToken = async () => {\r\n        let token = getAccessToken();\r\n        if (!token) {\r\n            const refreshToken = getRefreshToken();\r\n            if (!refreshToken) {\r\n                alert(\"로그인이 필요합니다.\");\r\n                return null;\r\n            }\r\n            try {\r\n                const response = await axios.post(\"http://localhost:8082/api/auth/refresh\", { refreshToken });\r\n                localStorage.setItem(\"accessToken\", response.data.accessToken);\r\n                sessionStorage.setItem(\"accessToken\", response.data.accessToken);\r\n                token = response.data.accessToken;\r\n            } catch (error) {\r\n                alert(\"세션이 만료되었습니다. 다시 로그인해주세요.\");\r\n                return null;\r\n            }\r\n        }\r\n        return token;\r\n    };\r\n\r\n    const handleInvite = async () => {\r\n        if (!inviteEmail.trim()) {\r\n            alert(\"초대할 사용자의 이메일을 입력하세요.\");\r\n            return;\r\n        }\r\n\r\n        const token = await getValidAccessToken(); // ✅ Access Token이 없으면 자동 갱신\r\n        if (!token) {\r\n            alert(\"로그인이 필요합니다.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.post(\r\n                \"http://localhost:8082/api/team/invite\",\r\n                { email: inviteEmail },\r\n                {\r\n                    headers: {\r\n                        \"Authorization\": `Bearer ${token}`, // ✅ 헤더 추가\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    withCredentials: true // ✅ 쿠키 인증 포함\r\n                }\r\n            );\r\n\r\n            if (response.status === 200) {\r\n                alert(\"초대 요청이 성공적으로 전송되었습니다!\");\r\n                setShowInviteModal(false);\r\n                setInviteEmail(\"\");\r\n            } else {\r\n                alert(\"초대할 수 없는 사용자입니다.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"초대 요청 실패:\", error);\r\n            alert(\"초대 요청을 보낼 수 없습니다.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"team-status\">\r\n            <h2>팀 상태</h2>\r\n            <button className=\"invite-button\" onClick={() => setShowInviteModal(true)}>\r\n                팀원 초대\r\n            </button>\r\n\r\n            {showInviteModal && (\r\n                <div className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <h3>초대할 사용자 이메일 입력</h3>\r\n                        <input\r\n                            type=\"email\"\r\n                            placeholder=\"사용자 이메일\"\r\n                            value={inviteEmail}\r\n                            onChange={(e) => setInviteEmail(e.target.value)}\r\n                        />\r\n                        <button onClick={handleInvite}>초대하기</button>\r\n                        <button onClick={() => setShowInviteModal(false)}>취소</button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TeamStatusPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}