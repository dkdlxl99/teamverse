{"ast":null,"code":"var _jsxFileName = \"C:\\\\project2\\\\teamverse-2\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n\n  // 로그인 API 요청\n  const login = async (username, password) => {\n    try {\n      const response = await fetch(\"http://localhost:8080/api/users/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (!response.ok) throw new Error(\"로그인 실패\");\n      const data = await response.json();\n      localStorage.setItem(\"token\", data.token);\n      setUser({\n        username: data.username\n      });\n\n      // 🚀 페이지 새로고침하면서 /dashboard로 이동\n      window.location.href = \"/dashboard\";\n    } catch (error) {\n      alert(\"로그인 실패\");\n    }\n  };\n\n  // 로그아웃 처리\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    setUser(null);\n\n    // 🚀 로그아웃 후 메인 페이지로 이동하면서 새로고침\n    window.location.href = \"/\";\n  };\n\n  // 페이지 새로고침 시 로그인 상태 유지\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      fetch(\"http://localhost:8080/api/users/me\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(res => res.json()).then(data => setUser({\n        username: data.username\n      })).catch(() => logout());\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["AuthProvider","children","_s","user","setUser","useState","login","username","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","localStorage","setItem","token","window","location","href","error","alert","logout","removeItem","useEffect","getItem","Authorization","then","res","catch","_jsxDEV","AuthContext","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/project2/teamverse-2/src/context/AuthContext.js"],"sourcesContent":["export const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  // 로그인 API 요청\r\n  const login = async (username, password) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8080/api/users/login\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"로그인 실패\");\r\n\r\n      const data = await response.json();\r\n      localStorage.setItem(\"token\", data.token);\r\n      setUser({ username: data.username });\r\n\r\n      // 🚀 페이지 새로고침하면서 /dashboard로 이동\r\n      window.location.href = \"/dashboard\";\r\n    } catch (error) {\r\n      alert(\"로그인 실패\");\r\n    }\r\n  };\r\n\r\n  // 로그아웃 처리\r\n  const logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    setUser(null);\r\n\r\n    // 🚀 로그아웃 후 메인 페이지로 이동하면서 새로고침\r\n    window.location.href = \"/\";\r\n  };\r\n\r\n  // 페이지 새로고침 시 로그인 상태 유지\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      fetch(\"http://localhost:8080/api/users/me\", {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => setUser({ username: data.username }))\r\n        .catch(() => logout());\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAO,MAAMA,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACA,MAAMC,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IAC1C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;QACpEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,QAAQ;UAAEC;QAAS,CAAC;MAC7C,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,QAAQ,CAAC;MAE3C,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;MACzClB,OAAO,CAAC;QAAEG,QAAQ,EAAEW,IAAI,CAACX;MAAS,CAAC,CAAC;;MAEpC;MACAgB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,YAAY;IACrC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,KAAK,CAAC,QAAQ,CAAC;IACjB;EACF,CAAC;;EAED;EACA,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCzB,OAAO,CAAC,IAAI,CAAC;;IAEb;IACAmB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;EAC5B,CAAC;;EAED;EACAK,SAAS,CAAC,MAAM;IACd,MAAMR,KAAK,GAAGF,YAAY,CAACW,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIT,KAAK,EAAE;MACTZ,KAAK,CAAC,oCAAoC,EAAE;QAC1CE,OAAO,EAAE;UAAEoB,aAAa,EAAE,UAAUV,KAAK;QAAG;MAC9C,CAAC,CAAC,CACCW,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACf,IAAI,CAAC,CAAC,CAAC,CACzBc,IAAI,CAAEf,IAAI,IAAKd,OAAO,CAAC;QAAEG,QAAQ,EAAEW,IAAI,CAACX;MAAS,CAAC,CAAC,CAAC,CACpD4B,KAAK,CAAC,MAAMP,MAAM,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEQ,OAAA,CAACC,WAAW,CAACC,QAAQ;IAACC,KAAK,EAAE;MAAEpC,IAAI;MAAEG,KAAK;MAAEsB;IAAO,CAAE;IAAA3B,QAAA,EAClDA;EAAQ;IAAAuC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACzC,EAAA,CApDWF,YAAY;AAAA4C,EAAA,GAAZ5C,YAAY;AAAA,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}