{"ast":null,"code":"import axios from \"axios\";\nimport { getAccessToken } from \"../utils/authUtils\"; // ✅ accessToken 가져오기\n\nconst API_BASE_URL = \"http://localhost:8082/api/auth\"; // ✅ 백엔드 경로 확인\n\n// ✅ 모든 요청에 accessToken 자동 추가\nconst authAxios = axios.create({\n  baseURL: API_BASE_URL,\n  withCredentials: true // ✅ 쿠키 포함하여 요청 (필수)\n});\nauthAxios.interceptors.request.use(config => {\n  const token = getAccessToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`; // ✅ Authorization 헤더 추가\n  }\n  return config;\n}, error => Promise.reject(error));\nexport const signup = async (name, email, password) => {\n  try {\n    const response = await axios.post(\"http://localhost:8082/api/auth/register\", {\n      username: name,\n      email,\n      password\n    }, {\n      withCredentials: true\n    });\n\n    // ✅ 백엔드에서 성공 응답 시 message 필드가 존재하면 성공 처리\n    if (response.status === 200) {\n      return {\n        success: true,\n        message: response.data\n      };\n    } else {\n      return {\n        success: false,\n        message: \"회원가입 실패\"\n      };\n    }\n  } catch (error) {\n    var _error$response;\n    return {\n      success: false,\n      message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || \"회원가입 실패\"\n    };\n  }\n};\nexport const login = async (email, password, rememberMe) => {\n  try {\n    const response = await authAxios.post(\"/login\", {\n      email,\n      password\n    }, {\n      params: {\n        rememberMe\n      } // ✅ 로그인 유지 옵션 전달\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    return {\n      message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"로그인 실패\"\n    };\n  }\n};","map":{"version":3,"names":["axios","getAccessToken","API_BASE_URL","authAxios","create","baseURL","withCredentials","interceptors","request","use","config","token","headers","Authorization","error","Promise","reject","signup","name","email","password","response","post","username","status","success","message","data","_error$response","login","rememberMe","params","_error$response2","_error$response2$data"],"sources":["/Users/woo/Documents/git_local/react/0213/src/api/auth.js"],"sourcesContent":["import axios from \"axios\";\nimport { getAccessToken } from \"../utils/authUtils\"; // ✅ accessToken 가져오기\n\nconst API_BASE_URL = \"http://localhost:8082/api/auth\"; // ✅ 백엔드 경로 확인\n\n// ✅ 모든 요청에 accessToken 자동 추가\nconst authAxios = axios.create({\n\tbaseURL: API_BASE_URL,\n\twithCredentials: true, // ✅ 쿠키 포함하여 요청 (필수)\n});\n\nauthAxios.interceptors.request.use(\n\t(config) => {\n\t\tconst token = getAccessToken();\n\t\tif (token) {\n\t\t\tconfig.headers.Authorization = `Bearer ${token}`; // ✅ Authorization 헤더 추가\n\t\t}\n\t\treturn config;\n\t},\n\t(error) => Promise.reject(error)\n);\n\nexport const signup = async (name, email, password) => {\n\ttry {\n\t\tconst response = await axios.post(\"http://localhost:8082/api/auth/register\", {\n\t\t\tusername: name,\n\t\t\temail,\n\t\t\tpassword\n\t\t}, { withCredentials: true });\n\n\t\t// ✅ 백엔드에서 성공 응답 시 message 필드가 존재하면 성공 처리\n\t\tif (response.status === 200) {\n\t\t\treturn { success: true, message: response.data };\n\t\t} else {\n\t\t\treturn { success: false, message: \"회원가입 실패\" };\n\t\t}\n\t} catch (error) {\n\t\treturn {\n\t\t\tsuccess: false,\n\t\t\tmessage: error.response?.data || \"회원가입 실패\"\n\t\t};\n\t}\n};\n\nexport const login = async (email, password, rememberMe) => {\n\t\ntry {\n\tconst response = await authAxios.post(\"/login\", { email, password }, {\n\t\t\tparams: { rememberMe }, // ✅ 로그인 유지 옵션 전달\n\t\t\t\n\t});\n\treturn response.data;\n} catch (error) {\n\treturn { message: error.response?.data?.message || \"로그인 실패\" };\n}\n};\n\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,QAAQ,oBAAoB,CAAC,CAAC;;AAErD,MAAMC,YAAY,GAAG,gCAAgC,CAAC,CAAC;;AAEvD;AACA,MAAMC,SAAS,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC9BC,OAAO,EAAEH,YAAY;EACrBI,eAAe,EAAE,IAAI,CAAE;AACxB,CAAC,CAAC;AAEFH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAChCC,MAAM,IAAK;EACX,MAAMC,KAAK,GAAGV,cAAc,CAAC,CAAC;EAC9B,IAAIU,KAAK,EAAE;IACVD,MAAM,CAACE,OAAO,CAACC,aAAa,GAAG,UAAUF,KAAK,EAAE,CAAC,CAAC;EACnD;EACA,OAAOD,MAAM;AACd,CAAC,EACAI,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CAChC,CAAC;AAED,OAAO,MAAMG,MAAM,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,KAAK;EACtD,IAAI;IACH,MAAMC,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,IAAI,CAAC,yCAAyC,EAAE;MAC5EC,QAAQ,EAAEL,IAAI;MACdC,KAAK;MACLC;IACD,CAAC,EAAE;MAAEd,eAAe,EAAE;IAAK,CAAC,CAAC;;IAE7B;IACA,IAAIe,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;MAC5B,OAAO;QAAEC,OAAO,EAAE,IAAI;QAAEC,OAAO,EAAEL,QAAQ,CAACM;MAAK,CAAC;IACjD,CAAC,MAAM;MACN,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAU,CAAC;IAC9C;EACD,CAAC,CAAC,OAAOZ,KAAK,EAAE;IAAA,IAAAc,eAAA;IACf,OAAO;MACNH,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE,EAAAE,eAAA,GAAAd,KAAK,CAACO,QAAQ,cAAAO,eAAA,uBAAdA,eAAA,CAAgBD,IAAI,KAAI;IAClC,CAAC;EACF;AACD,CAAC;AAED,OAAO,MAAME,KAAK,GAAG,MAAAA,CAAOV,KAAK,EAAEC,QAAQ,EAAEU,UAAU,KAAK;EAE5D,IAAI;IACH,MAAMT,QAAQ,GAAG,MAAMlB,SAAS,CAACmB,IAAI,CAAC,QAAQ,EAAE;MAAEH,KAAK;MAAEC;IAAS,CAAC,EAAE;MACnEW,MAAM,EAAE;QAAED;MAAW,CAAC,CAAE;IAE1B,CAAC,CAAC;IACF,OAAOT,QAAQ,CAACM,IAAI;EACrB,CAAC,CAAC,OAAOb,KAAK,EAAE;IAAA,IAAAkB,gBAAA,EAAAC,qBAAA;IACf,OAAO;MAAEP,OAAO,EAAE,EAAAM,gBAAA,GAAAlB,KAAK,CAACO,QAAQ,cAAAW,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBL,IAAI,cAAAM,qBAAA,uBAApBA,qBAAA,CAAsBP,OAAO,KAAI;IAAS,CAAC;EAC9D;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}