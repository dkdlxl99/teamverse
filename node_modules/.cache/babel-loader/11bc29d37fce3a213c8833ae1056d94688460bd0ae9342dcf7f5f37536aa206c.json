{"ast":null,"code":"var _jsxFileName = \"/Users/woo/Documents/git_local/react/0213/src/components/GanttChart.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import '../styles/GanttChart.css';\n\n// // 파스텔 톤 색상 생성 함수\n// const generatePastelColor = () => {\n//   const r = Math.floor((Math.random() * 127) + 127); // 127~254\n//   const g = Math.floor((Math.random() * 127) + 127); // 127~254\n//   const b = Math.floor((Math.random() * 127) + 127); // 127~254\n//   return `rgb(${r}, ${g}, ${b})`;\n// };\n\n// const GanttChart = ({ project }) => {\n//   const initialTasks = [\n//     { id: 1, name: 'Design Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 8), progress: 100 },\n//     { id: 2, name: 'Development Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 9), progress: 75 },\n//     { id: 3, name: 'Testing Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 10), progress: 30 },\n//   ];\n\n//   const [tasks, setTasks] = useState([]);\n//   const [viewMode, setViewMode] = useState('week'); // 현재 보기 모드 (week, month, year)\n//   const [currentMonth, setCurrentMonth] = useState(new Date());\n//   const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n//   const today = new Date();\n\n//   useEffect(() => {\n\n//     if (!project) {\n//       setTasks([]); // ✅ 프로젝트 없을 경우 빈 상태 유지\n//       return;\n//     }\n\n//     console.log(\"📌 선택된 프로젝트:\", project.name); // ✅ 콘솔에서 프로젝트 이름 확인\n\n//     const savedColors = JSON.parse(localStorage.getItem('taskColors')) || {};\n//     const tasksWithColors = initialTasks.map((task) => ({\n//       ...task,\n//       color: savedColors[task.id] || generatePastelColor(),\n//     }));\n\n//     const newColors = tasksWithColors.reduce((acc, task) => {\n//       if (!savedColors[task.id]) {\n//         acc[task.id] = task.color;\n//       }\n//       return acc;\n//     }, {});\n//     localStorage.setItem('taskColors', JSON.stringify({ ...savedColors, ...newColors }));\n\n//     setTasks(tasksWithColors);\n//   },[project]);\n\n//   const getWeekDates = () => {\n//     const today = new Date();\n//     const firstDayOfWeek = today.getDate() - today.getDay();\n//     return Array.from({ length: 7 }, (_, i) => {\n//       const date = new Date(today.getFullYear(), today.getMonth(), firstDayOfWeek + i);\n//       return {\n//         day: date.toLocaleDateString('en-US', { weekday: 'short' }),\n//         date: new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0),\n//       };\n//     });\n//   };\n\n//   const getMonthDates = () => {\n//     const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n//     const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n//     const dates = [];\n\n//     // 첫 주 빈 칸\n//     for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\n//       dates.push(null);\n//     }\n\n//     // 해당 월의 모든 날짜\n//     for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\n//       const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\n//       dates.push(date);\n//     }\n\n//     return dates;\n//   };\n\n//   const handlePreviousMonth = () => {\n//     setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\n//   };\n\n//   const handleNextMonth = () => {\n//     setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\n//   };\n\n//   const getYearMonths = () => {\n//     return Array.from({ length: 12 }, (_, index) => {\n//       const monthDate = new Date(currentYear, index, 1);\n//       return {\n//         name: monthDate.toLocaleDateString('en-US', { month: 'short' }).toUpperCase(),\n//         date: monthDate,\n//       };\n//     });\n//   };\n\n//   const isToday = (date) => {\n//     // date가 유효한 경우에만 체크\n//     return date && today.getFullYear() === date.getFullYear() &&\n//       today.getMonth() === date.getMonth() &&\n//       today.getDate() === date.getDate();\n//   };\n\n//   const weekDates = getWeekDates();\n//   const monthDates = getMonthDates();\n//   const yearMonths = getYearMonths();\n\n//   const handlePreviousYear = () => {\n//     setCurrentYear((prevYear) => prevYear - 1);\n//   };\n\n//   const handleNextYear = () => {\n//     setCurrentYear((prevYear) => prevYear + 1);\n//   };\n\n//   const isTaskInMonth = (monthDate, task) => {\n//     const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n//     const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\n//     return task.start <= monthEnd && task.end >= monthStart;\n//   };\n\n//   const isTodayInMonth = (monthDate) => {\n//     return (\n//       today.getFullYear() === monthDate.getFullYear() &&\n//       today.getMonth() === monthDate.getMonth()\n//     );\n//   };\n\n//     const isTaskOnDate = (date, task) => {\n//     return date >= task.start && date <= task.end;\n//   };\n\n//   const calculateProgressBarStyle = (task) => {\n//     const weekStart = weekDates[0].date.getTime();\n//     const weekEnd = weekDates[6].date.getTime() + 24 * 60 * 60 * 1000 - 1;\n\n//     const taskStart = Math.max(task.start.getTime(), weekStart);\n//     const taskEnd = Math.min(task.end.getTime() + 24 * 60 * 60 * 1000 - 1, weekEnd);\n\n//     if (taskEnd < weekStart || taskStart > weekEnd) {\n//       return { display: 'none' };\n//     }\n\n//     const totalWeekMs = weekEnd - weekStart + 1;\n//     const offset = ((taskStart - weekStart) / totalWeekMs) * 100;\n//     const width = ((taskEnd - taskStart) / totalWeekMs) * 100;\n\n//     return {\n//       left: `${offset}%`,\n//       width: `${width}%`,\n//     };\n//   };\n\n//   const ProgressBar = ({ task, progressBarStyle }) => {\n//     return (\n//       <div className=\"progress-bar\" style={progressBarStyle}>\n//         <div\n//           className=\"progress\"\n//           style={{\n//             width: `${task.progress}%`,\n//             backgroundColor: task.color,\n//           }}\n//         >\n//           <span className=\"task-name\">{task.name}</span>\n//         </div>\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div className=\"gantt-chart\">\n//             {project ? (\n//                 <>\n//                     <h2 className=\"project-title\">📌 {project.name}</h2> \n//                     <p>프로젝트 시작일: {project.startDate}</p>\n//                 </>\n//             ) : (\n//                 <p>현재 선택된 프로젝트가 없습니다.</p>\n//             )}\n//       {viewMode === 'week' && (\n//         <>\n//           <div className=\"calendar\">\n//             {weekDates.map((day, index) => (\n//             <div key={index} className={`calendar-day ${isToday(day.date) ? 'today' : ''}`}>\n//                 <div className=\"day-name\">{day.day}\n//                 <div className=\"day-date\">\n//                   {day.date.toLocaleDateString('en-US', { day: 'numeric', month: 'short' })}\n//                 </div>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"task-container\">\n//             {tasks.map((task) => {\n//               const progressBarStyle = calculateProgressBarStyle(task);\n//               return (\n//                 <div key={task.id} className=\"task\">\n//                   <ProgressBar task={task} progressBarStyle={progressBarStyle} />\n//                 </div>\n//               );\n//             })}\n//           </div>\n//         </>\n//       )}\n//       {viewMode === 'month' && (\n//         <div className=\"month-calendar\">\n//           <div className=\"month-header\">\n//             <button className=\"month-nav\" onClick={handlePreviousMonth}>\n//               &lt;\n//             </button>\n//             <div className=\"month-title\">\n//               {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n//             </div>\n//             <button className=\"month-nav\" onClick={handleNextMonth}>\n//               &gt;\n//             </button>\n//           </div>\n//           <div className=\"calendar-grid\">\n//             {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\n//               <div key={day} className=\"calendar-day-name\">\n//                 {day}\n//               </div>\n//             ))}\n//             {monthDates.map((date, index) => (\n//               <div key={index} className={`calendar-day ${date && isToday(date) ? 'today' : ''}`}>\n//                 {date && (\n//                   <>\n//                     <div className=\"day-date\">{date.getDate()}</div>\n//                     <div className=\"task-indicator-container\">\n//                       {tasks.map(\n//                         (task) =>\n//                           isTaskOnDate(date, task) && (\n//                             <div key={task.id} className=\"task-indicator task-bar\" // 막대 모양\n//                             style={{ backgroundColor: task.color }}></div>\n//                           )\n//                       )}\n//                     </div>\n//                   </>\n//                 )}\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       )}\n\n//       {viewMode === 'year' && (\n//               <div className=\"year-calendar\">\n//                 <div className=\"year-header\">\n//                   <button className=\"year-nav\" onClick={handlePreviousYear}>\n//                     &lt;\n//                   </button>\n//                   <div className=\"year-title\">{currentYear}</div>\n//                   <button className=\"year-nav\" onClick={handleNextYear}>\n//                     &gt;\n//                   </button>\n//                 </div>\n//                 <div className=\"year-grid\">\n//                   {yearMonths.map((month, index) => (\n//                     <div key={index} className=\"year-month\">\n//                       <div className={`month-name ${isTodayInMonth(month.date) ? 'today' : ''}`}>\n//                         {month.name}\n//                       </div>\n//                       <div className=\"month-tasks\">\n//                         {tasks.map(\n//                           (task) =>\n//                             isTaskInMonth(month.date, task) && (\n//                               <div\n//                                 key={task.id}\n//                                 className=\"task-indicator task-circle\"\n//                                 style={{ backgroundColor: task.color }}\n//                               ></div>\n//                             )\n//                         )}\n//                       </div>\n//                     </div>\n//                   ))}\n//                 </div>\n//               </div>\n//             )}\n//         <div className=\"view-mode-buttons\">\n//         <button\n//           className={`view-button ${viewMode === 'week' ? 'active' : ''}`}\n//           onClick={() => setViewMode('week')}\n//         >\n//           Week\n//         </button>\n//         <button\n//           className={`view-button ${viewMode === 'month' ? 'active' : ''}`}\n//           onClick={() => setViewMode('month')}\n//         >\n//           Month\n//         </button>\n//         <button\n//           className={`view-button ${viewMode === 'year' ? 'active' : ''}`}\n//           onClick={() => setViewMode('year')}\n//         >\n//           Year\n//         </button>\n//         </div>\n//     </div>\n//   );\n// };\n\n// export default GanttChart;\n\nimport React, { useState, useEffect } from 'react';\nimport '../styles/GanttChart.css';\n\n// ✅ 수정: Task 데이터를 props로 받아서 사용하도록 변경\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GanttChart = ({\n  tasks\n}) => {\n  _s();\n  const [viewMode, setViewMode] = useState('week'); // ✅ 현재 보기 모드 (week, month, year)\n  const [currentWeekStart, setCurrentWeekStart] = useState(getStartOfWeek(new Date()));\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const today = new Date();\n  const isTaskOnDate = (date, task) => {\n    const taskStart = new Date(task.start).setHours(0, 0, 0, 0);\n    const taskEnd = new Date(task.end).setHours(23, 59, 59, 999);\n    const checkDate = new Date(date).setHours(12, 0, 0, 0); // ✅ 날짜 중앙으로 설정 (비교 오류 방지)\n\n    return checkDate >= taskStart && checkDate <= taskEnd;\n  };\n\n  // Task 데이터를 받아서 Gantt 차트에 반영\n  const formattedTasks = tasks.map(task => ({\n    id: task.id,\n    name: task.name,\n    start: new Date(task.startDate),\n    end: new Date(new Date(task.dueDate).setHours(23, 59, 59, 999)),\n    // ✅ 마감일 23:59:59로 설정\n    color: task.color || \"#ff99a5\" // ✅ 색상이 없을 경우 기본값 지정\n    //progress: 50, // ✅ 진행률 기본값 (추후 백엔드에서 가져오도록 수정 가능)\n  }));\n\n  // ✅ 현재 주의 시작 날짜 계산\n  function getStartOfWeek(date) {\n    const start = new Date(date);\n    const dayOfWeek = start.getDay(); // 현재 요일 (0: 일요일, 1: 월요일, ..., 6: 토요일)\n    const diff = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // 월요일을 기준\n    start.setDate(start.getDate() + diff);\n    start.setHours(0, 0, 0, 0);\n    return start;\n  }\n\n  // 주간 날짜 목록 생성\n  const getWeekDates = () => {\n    return Array.from({\n      length: 7\n    }, (_, i) => {\n      const date = new Date(currentWeekStart); // ✅ 현재 주 시작(월요일)에서 시작\n      date.setDate(currentWeekStart.getDate() + i); // ✅ 하루씩 더하면서 한 주를 채움\n      date.setHours(0, 0, 0, 0); // ✅ 00:00:00으로 초기화\n      return {\n        day: date.toLocaleDateString('en-US', {\n          weekday: 'short'\n        }),\n        // 'Mon', 'Tue' 형태\n        date: new Date(date) // ✅ Date 객체로 변환\n      };\n    });\n  };\n\n  // ✅ 월간 날짜 목록 생성\n  const getMonthDates = () => {\n    const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n    const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n    const dates = [];\n    for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\n      dates.push(null);\n    }\n    for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\n      const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\n      dates.push(date);\n    }\n    return dates;\n  };\n  // ✅ 이전/다음 주 & 월 이동 기능\n  const handlePreviousWeek = () => setCurrentWeekStart(new Date(currentWeekStart.setDate(currentWeekStart.getDate() - 7)));\n  const handleNextWeek = () => setCurrentWeekStart(new Date(currentWeekStart.setDate(currentWeekStart.getDate() + 7)));\n  const handlePreviousMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\n  const handleNextMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\n  const handlePreviousYear = () => setCurrentYear(currentYear - 1);\n  const handleNextYear = () => setCurrentYear(currentYear + 1);\n\n  // Year 뷰 - 12개월 목록 생성\n  const getYearMonths = () => {\n    return Array.from({\n      length: 12\n    }, (_, index) => {\n      const monthDate = new Date(currentYear, index, 1);\n      return {\n        name: monthDate.toLocaleDateString('en-US', {\n          month: 'short'\n        }).toUpperCase(),\n        date: monthDate\n      };\n    });\n  };\n\n  // Task가 특정 월에 포함되는지 확인하는 함수\n  const isTaskInMonth = (monthDate, task) => {\n    const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n    const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\n    return task.start <= monthEnd && task.end >= monthStart;\n  };\n  const calculateProgressBarStyle = task => {\n    const weekStart = new Date(currentWeekStart);\n    weekStart.setHours(0, 0, 0, 0);\n    const weekEnd = new Date(weekStart);\n    weekEnd.setDate(weekEnd.getDate() + 6); // 주의 마지막 날짜\n    weekEnd.setHours(23, 59, 59, 999);\n    const taskStart = new Date(task.start);\n    const taskEnd = new Date(task.end);\n    taskStart.setHours(0, 0, 0, 0);\n    taskEnd.setHours(23, 59, 59, 999);\n    console.log(`🛠️ Task ${task.name}: Start - ${taskStart}, End - ${taskEnd}`);\n    console.log(`📆 Week: Start - ${weekStart}, End - ${weekEnd}`);\n\n    // ✅ 1. 작업이 주간 범위 내에 있는지 확인\n    if (taskEnd < weekStart || taskStart > weekEnd) {\n      console.log(`❌ Task ${task.name} is out of range`);\n      return {\n        display: 'none'\n      };\n    }\n\n    // ✅ 2. Task 시작/종료 날짜를 주간 범위 내로 조정\n    const clampedStart = Math.max(taskStart.getTime(), weekStart.getTime());\n    const clampedEnd = Math.min(taskEnd.getTime(), weekEnd.getTime());\n\n    // ✅ 3. 막대 표시 범위(%) 계산\n    const totalWeekMs = weekEnd.getTime() - weekStart.getTime();\n    const offset = (clampedStart - weekStart.getTime()) / totalWeekMs * 100;\n    const width = (clampedEnd - clampedStart) / totalWeekMs * 100;\n    return {\n      left: `${offset}%`,\n      width: `${width}%`,\n      backgroundColor: task.color || \"#4caf50\"\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gantt-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"view-mode-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'week' ? 'active' : ''}`,\n        onClick: () => setViewMode('week'),\n        children: \"Week\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'month' ? 'active' : ''}`,\n        onClick: () => setViewMode('month'),\n        children: \"Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'year' ? 'active' : ''}`,\n        onClick: () => setViewMode('year'),\n        children: \"Year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 7\n    }, this), viewMode === 'week' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"week-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePreviousWeek,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [currentWeekStart.toLocaleDateString('en-US', {\n            month: 'long',\n            day: 'numeric'\n          }), \" ~\", \" \", new Date(currentWeekStart.getTime() + 6 * 24 * 60 * 60 * 1000).toLocaleDateString('en-US', {\n            month: 'long',\n            day: 'numeric'\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextWeek,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar\",\n        children: getWeekDates().map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-day\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"day-name\",\n            children: day.day\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"day-date\",\n            children: day.date.toLocaleDateString('en-US', {\n              day: 'numeric',\n              month: 'short'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-container\",\n        children: formattedTasks.map(task => {\n          const progressBarStyle = calculateProgressBarStyle(task);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-bar\",\n              style: progressBarStyle,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progress\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"task-name\",\n                  children: task.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 482,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 481,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 19\n            }, this)\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), viewMode === 'month' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"month-calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"month-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"month-nav\",\n          onClick: handlePreviousMonth,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"month-title\",\n          children: currentMonth.toLocaleDateString('en-US', {\n            month: 'long',\n            year: 'numeric'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"month-nav\",\n          onClick: handleNextMonth,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-grid\",\n        children: getMonthDates().map((date, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-day\",\n          children: date && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"day-date\",\n              children: date.getDate()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-indicator-container\",\n              children: formattedTasks.map(task => {\n                return isTaskOnDate(date, task) ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"task-indicator task-bar\",\n                  style: {\n                    backgroundColor: task.color\n                  }\n                }, task.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 509,\n                  columnNumber: 27\n                }, this) : null;\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 9\n    }, this), viewMode === 'year' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"year-calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"year-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"year-nav\",\n          onClick: handlePreviousYear,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"year-title\",\n          children: currentYear\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"year-nav\",\n          onClick: handleNextYear,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"year-grid\",\n        children: getYearMonths().map((month, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"year-month\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"month-name\",\n            children: month.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"month-tasks\",\n            children: formattedTasks.map(task => {\n              return isTaskInMonth(month.date, task) ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"task-indicator task-circle\",\n                style: {\n                  backgroundColor: task.color\n                }\n              }, task.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 536,\n                columnNumber: 23\n              }, this) : null;\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 448,\n    columnNumber: 5\n  }, this);\n};\n_s(GanttChart, \"LyfnJf+H3U6upcVxeLT+KmgL2fo=\");\n_c = GanttChart;\nexport default GanttChart;\nvar _c;\n$RefreshReg$(_c, \"GanttChart\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","GanttChart","tasks","_s","viewMode","setViewMode","currentWeekStart","setCurrentWeekStart","getStartOfWeek","Date","currentMonth","setCurrentMonth","currentYear","setCurrentYear","getFullYear","today","isTaskOnDate","date","task","taskStart","start","setHours","taskEnd","end","checkDate","formattedTasks","map","id","name","startDate","dueDate","color","dayOfWeek","getDay","diff","setDate","getDate","getWeekDates","Array","from","length","_","i","day","toLocaleDateString","weekday","getMonthDates","firstDayOfMonth","getMonth","lastDayOfMonth","dates","push","handlePreviousWeek","handleNextWeek","handlePreviousMonth","handleNextMonth","handlePreviousYear","handleNextYear","getYearMonths","index","monthDate","month","toUpperCase","isTaskInMonth","monthStart","monthEnd","calculateProgressBarStyle","weekStart","weekEnd","console","log","display","clampedStart","Math","max","getTime","clampedEnd","min","totalWeekMs","offset","width","left","backgroundColor","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","progressBarStyle","style","year","_c","$RefreshReg$"],"sources":["/Users/woo/Documents/git_local/react/0213/src/components/GanttChart.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import '../styles/GanttChart.css';\n\n// // 파스텔 톤 색상 생성 함수\n// const generatePastelColor = () => {\n//   const r = Math.floor((Math.random() * 127) + 127); // 127~254\n//   const g = Math.floor((Math.random() * 127) + 127); // 127~254\n//   const b = Math.floor((Math.random() * 127) + 127); // 127~254\n//   return `rgb(${r}, ${g}, ${b})`;\n// };\n\n// const GanttChart = ({ project }) => {\n//   const initialTasks = [\n//     { id: 1, name: 'Design Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 8), progress: 100 },\n//     { id: 2, name: 'Development Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 9), progress: 75 },\n//     { id: 3, name: 'Testing Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 10), progress: 30 },\n//   ];\n\n//   const [tasks, setTasks] = useState([]);\n//   const [viewMode, setViewMode] = useState('week'); // 현재 보기 모드 (week, month, year)\n//   const [currentMonth, setCurrentMonth] = useState(new Date());\n//   const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n//   const today = new Date();\n\n\n//   useEffect(() => {\n\n//     if (!project) {\n//       setTasks([]); // ✅ 프로젝트 없을 경우 빈 상태 유지\n//       return;\n//     }\n\n//     console.log(\"📌 선택된 프로젝트:\", project.name); // ✅ 콘솔에서 프로젝트 이름 확인\n\n//     const savedColors = JSON.parse(localStorage.getItem('taskColors')) || {};\n//     const tasksWithColors = initialTasks.map((task) => ({\n//       ...task,\n//       color: savedColors[task.id] || generatePastelColor(),\n//     }));\n\n//     const newColors = tasksWithColors.reduce((acc, task) => {\n//       if (!savedColors[task.id]) {\n//         acc[task.id] = task.color;\n//       }\n//       return acc;\n//     }, {});\n//     localStorage.setItem('taskColors', JSON.stringify({ ...savedColors, ...newColors }));\n\n//     setTasks(tasksWithColors);\n//   },[project]);\n\n\n\n//   const getWeekDates = () => {\n//     const today = new Date();\n//     const firstDayOfWeek = today.getDate() - today.getDay();\n//     return Array.from({ length: 7 }, (_, i) => {\n//       const date = new Date(today.getFullYear(), today.getMonth(), firstDayOfWeek + i);\n//       return {\n//         day: date.toLocaleDateString('en-US', { weekday: 'short' }),\n//         date: new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0),\n//       };\n//     });\n//   };\n\n//   const getMonthDates = () => {\n//     const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n//     const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n//     const dates = [];\n\n//     // 첫 주 빈 칸\n//     for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\n//       dates.push(null);\n//     }\n\n//     // 해당 월의 모든 날짜\n//     for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\n//       const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\n//       dates.push(date);\n//     }\n\n//     return dates;\n//   };\n\n//   const handlePreviousMonth = () => {\n//     setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\n//   };\n\n//   const handleNextMonth = () => {\n//     setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\n//   };\n\n//   const getYearMonths = () => {\n//     return Array.from({ length: 12 }, (_, index) => {\n//       const monthDate = new Date(currentYear, index, 1);\n//       return {\n//         name: monthDate.toLocaleDateString('en-US', { month: 'short' }).toUpperCase(),\n//         date: monthDate,\n//       };\n//     });\n//   };\n\n//   const isToday = (date) => {\n//     // date가 유효한 경우에만 체크\n//     return date && today.getFullYear() === date.getFullYear() &&\n//       today.getMonth() === date.getMonth() &&\n//       today.getDate() === date.getDate();\n//   };\n\n//   const weekDates = getWeekDates();\n//   const monthDates = getMonthDates();\n//   const yearMonths = getYearMonths();\n\n//   const handlePreviousYear = () => {\n//     setCurrentYear((prevYear) => prevYear - 1);\n//   };\n\n//   const handleNextYear = () => {\n//     setCurrentYear((prevYear) => prevYear + 1);\n//   };\n\n//   const isTaskInMonth = (monthDate, task) => {\n//     const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n//     const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\n//     return task.start <= monthEnd && task.end >= monthStart;\n//   };\n\n//   const isTodayInMonth = (monthDate) => {\n//     return (\n//       today.getFullYear() === monthDate.getFullYear() &&\n//       today.getMonth() === monthDate.getMonth()\n//     );\n//   };\n\n//     const isTaskOnDate = (date, task) => {\n//     return date >= task.start && date <= task.end;\n//   };\n\n//   const calculateProgressBarStyle = (task) => {\n//     const weekStart = weekDates[0].date.getTime();\n//     const weekEnd = weekDates[6].date.getTime() + 24 * 60 * 60 * 1000 - 1;\n\n//     const taskStart = Math.max(task.start.getTime(), weekStart);\n//     const taskEnd = Math.min(task.end.getTime() + 24 * 60 * 60 * 1000 - 1, weekEnd);\n\n//     if (taskEnd < weekStart || taskStart > weekEnd) {\n//       return { display: 'none' };\n//     }\n\n//     const totalWeekMs = weekEnd - weekStart + 1;\n//     const offset = ((taskStart - weekStart) / totalWeekMs) * 100;\n//     const width = ((taskEnd - taskStart) / totalWeekMs) * 100;\n\n//     return {\n//       left: `${offset}%`,\n//       width: `${width}%`,\n//     };\n//   };\n\n//   const ProgressBar = ({ task, progressBarStyle }) => {\n//     return (\n//       <div className=\"progress-bar\" style={progressBarStyle}>\n//         <div\n//           className=\"progress\"\n//           style={{\n//             width: `${task.progress}%`,\n//             backgroundColor: task.color,\n//           }}\n//         >\n//           <span className=\"task-name\">{task.name}</span>\n//         </div>\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div className=\"gantt-chart\">\n//             {project ? (\n//                 <>\n//                     <h2 className=\"project-title\">📌 {project.name}</h2> \n//                     <p>프로젝트 시작일: {project.startDate}</p>\n//                 </>\n//             ) : (\n//                 <p>현재 선택된 프로젝트가 없습니다.</p>\n//             )}\n//       {viewMode === 'week' && (\n//         <>\n//           <div className=\"calendar\">\n//             {weekDates.map((day, index) => (\n//             <div key={index} className={`calendar-day ${isToday(day.date) ? 'today' : ''}`}>\n//                 <div className=\"day-name\">{day.day}\n//                 <div className=\"day-date\">\n//                   {day.date.toLocaleDateString('en-US', { day: 'numeric', month: 'short' })}\n//                 </div>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"task-container\">\n//             {tasks.map((task) => {\n//               const progressBarStyle = calculateProgressBarStyle(task);\n//               return (\n//                 <div key={task.id} className=\"task\">\n//                   <ProgressBar task={task} progressBarStyle={progressBarStyle} />\n//                 </div>\n//               );\n//             })}\n//           </div>\n//         </>\n//       )}\n//       {viewMode === 'month' && (\n//         <div className=\"month-calendar\">\n//           <div className=\"month-header\">\n//             <button className=\"month-nav\" onClick={handlePreviousMonth}>\n//               &lt;\n//             </button>\n//             <div className=\"month-title\">\n//               {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n//             </div>\n//             <button className=\"month-nav\" onClick={handleNextMonth}>\n//               &gt;\n//             </button>\n//           </div>\n//           <div className=\"calendar-grid\">\n//             {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\n//               <div key={day} className=\"calendar-day-name\">\n//                 {day}\n//               </div>\n//             ))}\n//             {monthDates.map((date, index) => (\n//               <div key={index} className={`calendar-day ${date && isToday(date) ? 'today' : ''}`}>\n//                 {date && (\n//                   <>\n//                     <div className=\"day-date\">{date.getDate()}</div>\n//                     <div className=\"task-indicator-container\">\n//                       {tasks.map(\n//                         (task) =>\n//                           isTaskOnDate(date, task) && (\n//                             <div key={task.id} className=\"task-indicator task-bar\" // 막대 모양\n//                             style={{ backgroundColor: task.color }}></div>\n//                           )\n//                       )}\n//                     </div>\n//                   </>\n//                 )}\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       )}\n\n//       {viewMode === 'year' && (\n//               <div className=\"year-calendar\">\n//                 <div className=\"year-header\">\n//                   <button className=\"year-nav\" onClick={handlePreviousYear}>\n//                     &lt;\n//                   </button>\n//                   <div className=\"year-title\">{currentYear}</div>\n//                   <button className=\"year-nav\" onClick={handleNextYear}>\n//                     &gt;\n//                   </button>\n//                 </div>\n//                 <div className=\"year-grid\">\n//                   {yearMonths.map((month, index) => (\n//                     <div key={index} className=\"year-month\">\n//                       <div className={`month-name ${isTodayInMonth(month.date) ? 'today' : ''}`}>\n//                         {month.name}\n//                       </div>\n//                       <div className=\"month-tasks\">\n//                         {tasks.map(\n//                           (task) =>\n//                             isTaskInMonth(month.date, task) && (\n//                               <div\n//                                 key={task.id}\n//                                 className=\"task-indicator task-circle\"\n//                                 style={{ backgroundColor: task.color }}\n//                               ></div>\n//                             )\n//                         )}\n//                       </div>\n//                     </div>\n//                   ))}\n//                 </div>\n//               </div>\n//             )}\n//         <div className=\"view-mode-buttons\">\n//         <button\n//           className={`view-button ${viewMode === 'week' ? 'active' : ''}`}\n//           onClick={() => setViewMode('week')}\n//         >\n//           Week\n//         </button>\n//         <button\n//           className={`view-button ${viewMode === 'month' ? 'active' : ''}`}\n//           onClick={() => setViewMode('month')}\n//         >\n//           Month\n//         </button>\n//         <button\n//           className={`view-button ${viewMode === 'year' ? 'active' : ''}`}\n//           onClick={() => setViewMode('year')}\n//         >\n//           Year\n//         </button>\n//         </div>\n//     </div>\n//   );\n// };\n\n// export default GanttChart;\n\nimport React, { useState, useEffect } from 'react';\nimport '../styles/GanttChart.css';\n\n\n// ✅ 수정: Task 데이터를 props로 받아서 사용하도록 변경\nconst GanttChart = ({ tasks }) => {\n  const [viewMode, setViewMode] = useState('week'); // ✅ 현재 보기 모드 (week, month, year)\n  const [currentWeekStart, setCurrentWeekStart] = useState(getStartOfWeek(new Date()));\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const today = new Date();\n\n  const isTaskOnDate = (date, task) => {\n    const taskStart = new Date(task.start).setHours(0, 0, 0, 0);\n    const taskEnd = new Date(task.end).setHours(23, 59, 59, 999);\n    const checkDate = new Date(date).setHours(12, 0, 0, 0); // ✅ 날짜 중앙으로 설정 (비교 오류 방지)\n\n    return checkDate >= taskStart && checkDate <= taskEnd;\n  };\n\n  // Task 데이터를 받아서 Gantt 차트에 반영\n  const formattedTasks = tasks.map((task) => ({\n    id: task.id,\n    name: task.name,\n    start: new Date(task.startDate),\n    end: new Date(new Date(task.dueDate).setHours(23, 59, 59, 999)), // ✅ 마감일 23:59:59로 설정\n    color: task.color || \"#ff99a5\", // ✅ 색상이 없을 경우 기본값 지정\n    //progress: 50, // ✅ 진행률 기본값 (추후 백엔드에서 가져오도록 수정 가능)\n  }));\n\n  // ✅ 현재 주의 시작 날짜 계산\n  function getStartOfWeek(date) {\n    const start = new Date(date);\n    const dayOfWeek = start.getDay(); // 현재 요일 (0: 일요일, 1: 월요일, ..., 6: 토요일)\n    const diff = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // 월요일을 기준\n    start.setDate(start.getDate() + diff);\n    start.setHours(0, 0, 0, 0);\n    return start;\n  }\n\n  // 주간 날짜 목록 생성\n  const getWeekDates = () => {\n    return Array.from({ length: 7 }, (_, i) => {\n      const date = new Date(currentWeekStart); // ✅ 현재 주 시작(월요일)에서 시작\n      date.setDate(currentWeekStart.getDate() + i); // ✅ 하루씩 더하면서 한 주를 채움\n      date.setHours(0, 0, 0, 0); // ✅ 00:00:00으로 초기화\n      return {\n        day: date.toLocaleDateString('en-US', { weekday: 'short' }), // 'Mon', 'Tue' 형태\n        date: new Date(date), // ✅ Date 객체로 변환\n      };\n    });\n  };\n\n  // ✅ 월간 날짜 목록 생성\n  const getMonthDates = () => {\n    const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n    const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n    const dates = [];\n\n    for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\n      dates.push(null);\n    }\n\n    for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\n      const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\n      dates.push(date);\n    }\n\n    return dates;\n  };\n  // ✅ 이전/다음 주 & 월 이동 기능\n  const handlePreviousWeek = () => setCurrentWeekStart(new Date(currentWeekStart.setDate(currentWeekStart.getDate() - 7)));\n  const handleNextWeek = () => setCurrentWeekStart(new Date(currentWeekStart.setDate(currentWeekStart.getDate() + 7)));\n  const handlePreviousMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\n  const handleNextMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\n  const handlePreviousYear = () => setCurrentYear(currentYear - 1);\n  const handleNextYear = () => setCurrentYear(currentYear + 1);\n\n\n  // Year 뷰 - 12개월 목록 생성\n  const getYearMonths = () => {\n    return Array.from({ length: 12 }, (_, index) => {\n      const monthDate = new Date(currentYear, index, 1);\n      return {\n        name: monthDate.toLocaleDateString('en-US', { month: 'short' }).toUpperCase(),\n        date: monthDate,\n      };\n    });\n  };\n\n  // Task가 특정 월에 포함되는지 확인하는 함수\n  const isTaskInMonth = (monthDate, task) => {\n    const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n    const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\n    return task.start <= monthEnd && task.end >= monthStart;\n  };\n\n  const calculateProgressBarStyle = (task) => {\n    const weekStart = new Date(currentWeekStart);\n    weekStart.setHours(0, 0, 0, 0);\n    const weekEnd = new Date(weekStart);\n    weekEnd.setDate(weekEnd.getDate() + 6); // 주의 마지막 날짜\n    weekEnd.setHours(23, 59, 59, 999);\n\n    const taskStart = new Date(task.start);\n    const taskEnd = new Date(task.end);\n    taskStart.setHours(0, 0, 0, 0);\n    taskEnd.setHours(23, 59, 59, 999);\n\n    console.log(`🛠️ Task ${task.name}: Start - ${taskStart}, End - ${taskEnd}`);\n    console.log(`📆 Week: Start - ${weekStart}, End - ${weekEnd}`);\n\n    // ✅ 1. 작업이 주간 범위 내에 있는지 확인\n    if (taskEnd < weekStart || taskStart > weekEnd) {\n        console.log(`❌ Task ${task.name} is out of range`);\n        return { display: 'none' };\n    }\n\n    // ✅ 2. Task 시작/종료 날짜를 주간 범위 내로 조정\n    const clampedStart = Math.max(taskStart.getTime(), weekStart.getTime());\n    const clampedEnd = Math.min(taskEnd.getTime(), weekEnd.getTime());\n\n    // ✅ 3. 막대 표시 범위(%) 계산\n    const totalWeekMs = weekEnd.getTime() - weekStart.getTime();\n    const offset = ((clampedStart - weekStart.getTime()) / totalWeekMs) * 100;\n    const width = ((clampedEnd - clampedStart) / totalWeekMs) * 100;\n\n    return {\n        left: `${offset}%`,\n        width: `${width}%`,\n        backgroundColor: task.color || \"#4caf50\",\n    };\n};\n\n\n  return (\n    <div className=\"gantt-chart\">\n      <div className=\"view-mode-buttons\">\n        <button className={`view-button ${viewMode === 'week' ? 'active' : ''}`} onClick={() => setViewMode('week')}>Week</button>\n        <button className={`view-button ${viewMode === 'month' ? 'active' : ''}`} onClick={() => setViewMode('month')}>Month</button>\n        <button className={`view-button ${viewMode === 'year' ? 'active' : ''}`} onClick={() => setViewMode('year')}>Year</button>\n      </div>\n\n      {viewMode === 'week' && (\n        <>\n          <div className=\"week-navigation\">\n            <button onClick={handlePreviousWeek}>&lt;</button>\n            <span>\n              {currentWeekStart.toLocaleDateString('en-US', { month: 'long', day: 'numeric' })} ~{\" \"}\n              {new Date(currentWeekStart.getTime() + 6 * 24 * 60 * 60 * 1000).toLocaleDateString('en-US', { month: 'long', day: 'numeric' })}\n            </span>\n            <button onClick={handleNextWeek}>&gt;</button>\n          </div>\n\n          <div className=\"calendar\">\n            {getWeekDates().map((day, index) => (\n              <div key={index} className=\"calendar-day\">\n                <div className=\"day-name\">{day.day}</div>\n                <div className=\"day-date\">{day.date.toLocaleDateString('en-US', { day: 'numeric', month: 'short' })}</div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"task-container\">\n            {formattedTasks.map((task) => {\n              const progressBarStyle = calculateProgressBarStyle(task);\n              return (\n                <div key={task.id} className=\"task\">\n                  <div className=\"progress-bar\" style={progressBarStyle}>\n                    <div className=\"progress\">\n                      <span className=\"task-name\">{task.name}</span>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </>\n      )}\n\n      {viewMode === 'month' && (\n        <div className=\"month-calendar\">\n          <div className=\"month-header\">\n            <button className=\"month-nav\" onClick={handlePreviousMonth}>&lt;</button>\n            <div className=\"month-title\">{currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}</div>\n            <button className=\"month-nav\" onClick={handleNextMonth}>&gt;</button>\n          </div>\n\n          <div className=\"calendar-grid\">\n            {getMonthDates().map((date, index) => (\n              <div key={index} className=\"calendar-day\">\n                {date && (\n                  <>\n                    <div className=\"day-date\">{date.getDate()}</div>\n                    <div className=\"task-indicator-container\">\n                      {formattedTasks.map((task) => {\n                        return isTaskOnDate(date, task) ? (\n                          <div key={task.id} className=\"task-indicator task-bar\" style={{ backgroundColor: task.color }}></div>\n                        ) : null;\n                      })}\n                    </div>\n                  </>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {viewMode === 'year' && (\n        <div className=\"year-calendar\">\n          <div className=\"year-header\">\n            <button className=\"year-nav\" onClick={handlePreviousYear}>&lt;</button>\n            <div className=\"year-title\">{currentYear}</div>\n            <button className=\"year-nav\" onClick={handleNextYear}>&gt;</button>\n          </div>\n\n          <div className=\"year-grid\">\n            {getYearMonths().map((month, index) => (\n              <div key={index} className=\"year-month\">\n                <div className=\"month-name\">{month.name}</div>\n                <div className=\"month-tasks\">\n                  {formattedTasks.map((task) => {\n                    return isTaskInMonth(month.date, task) ? (\n                      <div key={task.id} className=\"task-indicator task-circle\" style={{ backgroundColor: task.color }}></div>\n                    ) : null;\n                  })}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GanttChart;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}