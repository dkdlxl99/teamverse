{"ast":null,"code":"var _jsxFileName = \"/Users/woo/Documents/git_local/react/0213/src/components/Chatbox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { getAccessToken } from \"../utils/authUtils\";\nimport { getStompClient } from \"../api/websocket\"; // ✅ WebSocket 클라이언트 가져오기\nimport \"../styles/Chatbox.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chatbox = ({\n  projectId\n}) => {\n  _s();\n  // ✅ 프로젝트 ID를 props로 받음\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  // ✅ 채팅 메시지 불러오기 함수\n  const fetchChatMessages = async () => {\n    if (!projectId) {\n      console.warn(\"❌ 프로젝트 ID가 정의되지 않음, 채팅 불러오지 않음.\");\n      return;\n    }\n    const token = getAccessToken();\n    try {\n      const response = await axios.get(`http://localhost:8082/api/chat/${projectId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setMessages(response.data);\n      console.log(\"✅ 채팅 메시지 로드 성공:\", response.data);\n    } catch (error) {\n      console.error(\"❌ 채팅 기록 불러오기 실패:\", error);\n    }\n  };\n\n  // ✅ 프로젝트가 변경될 때 WebSocket 구독 및 기존 메시지 불러오기\n  useEffect(() => {\n    if (!projectId) return;\n    console.log(`🔄 Chatbox에서 감지된 프로젝트 ID: ${projectId}`);\n    fetchChatMessages(); // ✅ 채팅 기록 가져오기\n\n    const stompClient = getStompClient();\n    if (!stompClient.connected) {\n      // ✅ 연결 상태 확인\n      console.warn(\"⚠️ STOMP 연결이 활성화되지 않았습니다. 연결을 시도합니다...\");\n      stompClient.activate();\n    } else {\n      console.log(\"✅ STOMP WebSocket이 이미 연결됨.\");\n    }\n\n    // ✅ 구독 (Subscribe) 설정\n    const subscription = stompClient.subscribe(`/topic/chat/${projectId}`, message => {\n      const receivedMessage = JSON.parse(message.body);\n      console.log(\"📩 새 채팅 메시지 수신:\", receivedMessage);\n      setMessages(prevMessages => [...prevMessages, receivedMessage]); // ✅ 메시지 추가\n    });\n    return () => {\n      console.log(\"🛑 WebSocket 구독 해제:\", `/topic/chat/${projectId}`);\n      subscription.unsubscribe();\n    };\n  }, [projectId]);\n\n  // ✅ 메시지 전송 함수\n  const sendMessage = async () => {\n    if (!newMessage.trim() || !projectId) {\n      console.warn(\"🚨 메시지를 보낼 프로젝트가 선택되지 않음.\");\n      return;\n    }\n\n    // ✅ 로그인한 사용자 이메일 가져오기 (localStorage & sessionStorage 확인)\n    const userEmail = localStorage.getItem(\"email\") || sessionStorage.getItem(\"email\");\n    if (!userEmail) {\n      console.error(\"❌ 로그인한 사용자의 이메일을 찾을 수 없습니다!\");\n      return;\n    }\n    try {\n      const messageData = {\n        project: {\n          id: projectId\n        },\n        sender: {\n          email: userEmail\n        },\n        // ✅ 이메일 포함\n        content: newMessage.trim()\n      };\n\n      // ✅ WebSocket을 통해 메시지 전송\n      const stompClient = getStompClient();\n      if (!stompClient || !stompClient.connected) {\n        console.error(\"🚨 WebSocket이 연결되지 않음!\");\n        return;\n      }\n      stompClient.publish({\n        destination: `/app/chat`,\n        body: JSON.stringify(messageData)\n      });\n      console.log(\"📤 메시지 전송:\", messageData);\n      setNewMessage(\"\");\n    } catch (error) {\n      console.error(\"❌ 메시지 전송 실패:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbox-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uD300 \\uCC44\\uD305\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), projectId ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.length > 0 ? messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: msg.sender.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 19\n          }, this), \": \", msg.content]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uD83D\\uDCED \\uC544\\uC9C1 \\uBA54\\uC2DC\\uC9C0\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"\\uC804\\uC1A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uD83D\\uDEA8 \\uD504\\uB85C\\uC81D\\uD2B8\\uB97C \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this) // ✅ 프로젝트가 없을 때 안내 메시지\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbox, \"bFuYpZWMfOU2WhBa/CyaGkj6fmk=\");\n_c = Chatbox;\nexport default Chatbox;\nvar _c;\n$RefreshReg$(_c, \"Chatbox\");","map":{"version":3,"names":["React","useState","useEffect","axios","getAccessToken","getStompClient","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatbox","projectId","_s","messages","setMessages","newMessage","setNewMessage","fetchChatMessages","console","warn","token","response","get","headers","Authorization","data","log","error","stompClient","connected","activate","subscription","subscribe","message","receivedMessage","JSON","parse","body","prevMessages","unsubscribe","sendMessage","trim","userEmail","localStorage","getItem","sessionStorage","messageData","project","id","sender","email","content","publish","destination","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","msg","index","username","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/woo/Documents/git_local/react/0213/src/components/Chatbox.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { getAccessToken } from \"../utils/authUtils\";\nimport { getStompClient } from \"../api/websocket\"; // ✅ WebSocket 클라이언트 가져오기\nimport \"../styles/Chatbox.css\"; \n\nconst Chatbox = ({ projectId }) => { // ✅ 프로젝트 ID를 props로 받음\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  // ✅ 채팅 메시지 불러오기 함수\n  const fetchChatMessages = async () => {\n    if (!projectId) {\n      console.warn(\"❌ 프로젝트 ID가 정의되지 않음, 채팅 불러오지 않음.\");\n      return;\n    }\n\n    const token = getAccessToken();\n    try {\n      const response = await axios.get(`http://localhost:8082/api/chat/${projectId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setMessages(response.data);\n      console.log(\"✅ 채팅 메시지 로드 성공:\", response.data);\n    } catch (error) {\n      console.error(\"❌ 채팅 기록 불러오기 실패:\", error);\n    }\n  };\n\n  // ✅ 프로젝트가 변경될 때 WebSocket 구독 및 기존 메시지 불러오기\n  useEffect(() => {\n    if (!projectId) return;\n  \n    console.log(`🔄 Chatbox에서 감지된 프로젝트 ID: ${projectId}`);\n    fetchChatMessages(); // ✅ 채팅 기록 가져오기\n  \n    const stompClient = getStompClient();\n  \n    if (!stompClient.connected) { // ✅ 연결 상태 확인\n      console.warn(\"⚠️ STOMP 연결이 활성화되지 않았습니다. 연결을 시도합니다...\");\n      stompClient.activate();\n  } else {\n      console.log(\"✅ STOMP WebSocket이 이미 연결됨.\");\n  }\n  \n    // ✅ 구독 (Subscribe) 설정\n    const subscription = stompClient.subscribe(`/topic/chat/${projectId}`, (message) => {\n      const receivedMessage = JSON.parse(message.body);\n      console.log(\"📩 새 채팅 메시지 수신:\", receivedMessage);\n      setMessages((prevMessages) => [...prevMessages, receivedMessage]); // ✅ 메시지 추가\n    });\n  \n    return () => {\n      console.log(\"🛑 WebSocket 구독 해제:\", `/topic/chat/${projectId}`);\n      subscription.unsubscribe();\n    };\n  }, [projectId]);\n  \n  // ✅ 메시지 전송 함수\n  const sendMessage = async () => {\n    if (!newMessage.trim() || !projectId) {\n        console.warn(\"🚨 메시지를 보낼 프로젝트가 선택되지 않음.\");\n        return;\n    }\n\n    // ✅ 로그인한 사용자 이메일 가져오기 (localStorage & sessionStorage 확인)\n    const userEmail = localStorage.getItem(\"email\") || sessionStorage.getItem(\"email\");\n    if (!userEmail) {\n        console.error(\"❌ 로그인한 사용자의 이메일을 찾을 수 없습니다!\");\n        return;\n    }\n\n    try {\n        const messageData = {\n            project: { id: projectId },\n            sender: { email: userEmail }, // ✅ 이메일 포함\n            content: newMessage.trim(),\n        };\n\n        // ✅ WebSocket을 통해 메시지 전송\n        const stompClient = getStompClient();\n        if (!stompClient || !stompClient.connected) {\n            console.error(\"🚨 WebSocket이 연결되지 않음!\");\n            return;\n        }\n\n        stompClient.publish({\n            destination: `/app/chat`,\n            body: JSON.stringify(messageData),\n        });\n\n        console.log(\"📤 메시지 전송:\", messageData);\n\n        setNewMessage(\"\");\n    } catch (error) {\n        console.error(\"❌ 메시지 전송 실패:\", error);\n    }\n};\n\n\n\n\n\n  return (\n    <div className=\"chatbox-container\">\n      <h3>팀 채팅</h3>\n      {projectId ? (\n        <>\n          <div className=\"messages\">\n            {messages.length > 0 ? (\n              messages.map((msg, index) => (\n                <p key={index}>\n                  <strong>{msg.sender.username}</strong>: {msg.content}\n                </p>\n              ))\n            ) : (\n              <p>📭 아직 메시지가 없습니다.</p>\n            )}\n          </div>\n          <input\n            type=\"text\"\n            value={newMessage}\n            onChange={(e) => setNewMessage(e.target.value)}\n            placeholder=\"메시지를 입력하세요...\"\n          />\n          <button onClick={sendMessage}>전송</button>\n        </>\n      ) : (\n        <p>🚨 프로젝트를 선택해주세요.</p> // ✅ 프로젝트가 없을 때 안내 메시지\n      )}\n    </div>\n  );\n};\n\nexport default Chatbox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}