{"ast":null,"code":"var _jsxFileName = \"C:\\\\project2\\\\teamverse-2-boot,react - \\uC791\\uC5C5\\\\src\\\\components\\\\Navbar.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../styles/Navbar.css\";\n\n// const Navbar = () => {\n//   const [invitations, setInvitations] = useState([]);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const [user, setUser] = useState(null);\n\n//   // ✅ 사용자 정보 불러오기\n//   const fetchUserInfo = async () => {\n//     try {\n//       const token = localStorage.getItem(\"accessToken\"); // accessToken 사용\n//       if (!token) {\n//         console.error(\"🚨 JWT 토큰이 없습니다! 로그인이 필요합니다.\");\n//         return;\n//       }\n\n//       const response = await axios.get(\"http://localhost:8082/api/auth/me\", {\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           \"Content-Type\": \"application/json\",\n//         },\n//         withCredentials: true,\n//       });\n\n//       localStorage.setItem(\"user\", JSON.stringify(response.data));\n//       setUser(response.data);\n//     } catch (error) {\n//       console.error(\"❌ 사용자 정보 불러오기 실패:\", error);\n//     }\n//   };\n\n//   // ✅ 초대 목록 불러오기\n//   const fetchInvitations = async () => {\n//     try {\n//       const token = localStorage.getItem(\"token\");\n//       if (!token) return;\n\n//       const response = await axios.get(\"http://localhost:8082/api/team/invitations\", {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n\n//       setInvitations(response.data);\n//       if (response.data.length > 0) setShowPopup(true);\n//     } catch (error) {\n//       console.error(\"초대 목록 불러오기 실패:\", error);\n//     }\n//   };\n\n//   // ✅ 초대 수락하기\n//   const acceptInvite = async (inviteId) => {\n//     try {\n//       const token = localStorage.getItem(\"token\");\n//       await axios.post(\n//         `http://localhost:8082/api/invites/${inviteId}/accept`,\n//         {},\n//         { headers: { Authorization: `Bearer ${token}` } }\n//       );\n\n//       alert(\"✅ 초대를 수락했습니다!\");\n//       fetchInvitations(); // 새 초대 목록 다시 불러오기\n//     } catch (error) {\n//       console.error(\"❌ 초대 수락 실패:\", error);\n//     }\n//   };\n\n//   // ✅ 로그아웃\n//   // const handleLogout = () => {\n//   //   localStorage.removeItem(\"token\");\n//   //   localStorage.removeItem(\"refreshToken\");\n//   //   localStorage.removeItem(\"user\");\n//   //   setUser(null);\n//   //   window.location.href = \"/login\";\n//   // };\n\n//   // useEffect(() => {\n//   //   fetchUserInfo();\n//   //   fetchInvitations();\n//   // }, []);\n//   const handleLogout = async () => {\n//     try {\n//       const token = localStorage.getItem(\"accessToken\"); // 로그아웃 시 Authorization 헤더에 토큰 포함\n//  if (!token) {\n//       console.error(\"🚨 JWT 토큰이 없습니다! 로그아웃 요청을 할 수 없습니다.\");\n//       return; // 🔹 토큰이 없으면 로그아웃 요청을 실행하지 않음\n//     }\n\n//   await axios.post(\"http://localhost:8082/api/auth/logout\", {}, {\n//       headers: { Authorization: `Bearer ${token}` }, // Authorization 헤더 포함\n//       withCredentials: true\n//     });\n\n//       // ✅ 쿠키 삭제 (브라우저에서 강제 삭제)\n//     document.cookie = \"accessToken=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;\";\n//     document.cookie = \"refreshToken=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;\";\n\n//     // ✅ 로컬스토리지 삭제\n//     localStorage.removeItem(\"accessToken\");\n//     localStorage.removeItem(\"refreshToken\");\n//     localStorage.removeItem(\"user\");\n\n//       setUser(null); // 로그아웃 후 사용자 상태 초기화\n//       alert(\"로그아웃 되었습니다.\");\n//       window.location.href = \"/\";\n//     } catch (error) {\n//       console.error(\"로그아웃 실패:\", error);\n//     }\n//   };\n\n//   // 페이지 로드시 사용자 정보 자동 불러오기\n//   useEffect(() => {\n//     fetchUserInfo();\n//   }, []);\n\n//   return (\n//     <nav className=\"navbar\">\n//       <div className=\"navbar-logo\">TeamVerse</div>\n\n//       {/* ✅ 초대 팝업 */}\n//       {showPopup && (\n//         <div className=\"invitation-popup\">\n//           <h2>초대 알림</h2>\n//           <ul>\n//             {invitations.map((invite) => (\n//               <li key={invite.id}>\n//                 <p>{invite.email}님이 팀 초대를 보냈습니다.</p>\n//                 <button className=\"accept-btn\" onClick={() => acceptInvite(invite.id)}>\n//                   수락\n//                 </button>\n//               </li>\n//             ))}\n//           </ul>\n//           <button className=\"close-btn\" onClick={() => setShowPopup(false)}>닫기</button>\n//         </div>\n//       )}\n\n//       <div className=\"navbar-links\">\n//         <Link to=\"/\">Dashboard</Link>\n//         <Link to=\"/statistics\">Statistics</Link>\n//         <Link to=\"/team-status\">Team</Link>\n//         <Link to=\"/settings\">Settings</Link>\n//         {user ? (\n//           <Link\n//             to=\"/login\"\n//             onClick={(e) => {\n//               e.preventDefault(); // 기본 이동 방지\n//               handleLogout(); // 로그아웃 함수 실행\n//             }}\n//           >\n//             Logout\n//           </Link>\n//         ) : (\n//           <Link to=\"/login\">Login</Link>\n//         )}\n//       </div>\n//     </nav>\n//   );\n// };\n\n// export default Navbar;\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\"; // ✅ useNavigate 추가\nimport axios from \"axios\";\nimport { getAccessToken } from \"../utils/authUtils\"; // ✅ 로그인 상태 확인을 위한 accessToken 가져오기\nimport \"../styles/Navbar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Navbar = () => {\n  _s();\n  const [invitations, setInvitations] = useState([]);\n  const [showPopup, setShowPopup] = useState(false);\n  const [user, setUser] = useState(null);\n  const navigate = useNavigate(); // ✅ 페이지 이동을 위한 useNavigate 추가\n\n  // ✅ 사용자 정보 불러오기\n  const fetchUserInfo = async () => {\n    try {\n      const token = getAccessToken(); // ✅ 수정: sessionStorage에서도 가져올 수 있도록 변경\n      if (!token) {\n        console.error(\"🚨 JWT 토큰이 없습니다! 로그인이 필요합니다.\");\n        return;\n      }\n      const response = await axios.get(\"http://localhost:8082/api/auth/me\", {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        },\n        withCredentials: true\n      });\n      localStorage.setItem(\"user\", JSON.stringify(response.data));\n      setUser(response.data);\n    } catch (error) {\n      console.error(\"❌ 사용자 정보 불러오기 실패:\", error);\n    }\n  };\n\n  // ✅ 초대 목록 불러오기\n  const fetchInvitations = async () => {\n    try {\n      const token = getAccessToken(); // ✅ 수정: token 가져오는 방식 통일\n      if (!token) return;\n      const response = await axios.get(\"http://localhost:8082/api/team/invitations\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setInvitations(response.data);\n      if (response.data.length > 0) setShowPopup(true);\n    } catch (error) {\n      console.error(\"초대 목록 불러오기 실패:\", error);\n    }\n  };\n\n  // ✅ 초대 수락하기\n  const acceptInvite = async inviteId => {\n    try {\n      const token = getAccessToken(); // ✅ 수정: token 가져오는 방식 통일\n      await axios.post(`http://localhost:8082/api/invites/${inviteId}/accept`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(\"✅ 초대를 수락했습니다!\");\n      fetchInvitations(); // 새 초대 목록 다시 불러오기\n    } catch (error) {\n      console.error(\"❌ 초대 수락 실패:\", error);\n    }\n  };\n\n  // ✅ 로그아웃\n  const handleLogout = async () => {\n    try {\n      const token = getAccessToken(); // ✅ 수정: sessionStorage에서도 가져올 수 있도록 변경\n      if (!token) {\n        console.error(\"🚨 JWT 토큰이 없습니다! 로그아웃 요청을 할 수 없습니다.\");\n        return;\n      }\n      await axios.post(\"http://localhost:8082/api/auth/logout\", {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        withCredentials: true\n      });\n\n      // ✅ 쿠키 삭제 (브라우저에서 강제 삭제)\n      document.cookie = \"accessToken=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;\";\n      document.cookie = \"refreshToken=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;\";\n\n      // ✅ 로컬스토리지 및 세션스토리지 삭제\n      localStorage.removeItem(\"accessToken\");\n      localStorage.removeItem(\"refreshToken\");\n      localStorage.removeItem(\"user\");\n      sessionStorage.removeItem(\"accessToken\"); // ✅ 추가: sessionStorage에서도 삭제\n      sessionStorage.removeItem(\"refreshToken\"); // ✅ 추가: sessionStorage에서도 삭제\n\n      setUser(null); // ✅ 상태 업데이트\n      alert(\"로그아웃 되었습니다.\");\n      navigate(\"/\"); // ✅ 로그인 페이지로 이동\n    } catch (error) {\n      console.error(\"로그아웃 실패:\", error);\n    }\n  };\n\n  // ✅ 로그인 상태 확인 후 user 상태 업데이트\n  useEffect(() => {\n    fetchUserInfo();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"navbar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-logo\",\n      children: \"TeamVerse\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"invitation-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uCD08\\uB300 \\uC54C\\uB9BC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: invitations.map(invite => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [invite.email, \"\\uB2D8\\uC774 \\uD300 \\uCD08\\uB300\\uB97C \\uBCF4\\uB0C8\\uC2B5\\uB2C8\\uB2E4.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"accept-btn\",\n            onClick: () => acceptInvite(invite.id),\n            children: \"\\uC218\\uB77D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 17\n          }, this)]\n        }, invite.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-btn\",\n        onClick: () => setShowPopup(false),\n        children: \"\\uB2EB\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-links\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/statistics\",\n        children: \"Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/team-status\",\n        children: \"Team\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/settings\",\n        children: \"Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), user ? /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/login\",\n        onClick: e => {\n          e.preventDefault();\n          handleLogout();\n        },\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/login\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n};\n_s(Navbar, \"9HTa0xTOq7oFxoRrNF6xa3w41mU=\", false, function () {\n  return [useNavigate];\n});\n_c = Navbar;\nexport default Navbar;\nvar _c;\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["React","useEffect","useState","Link","useNavigate","axios","getAccessToken","jsxDEV","_jsxDEV","Navbar","_s","invitations","setInvitations","showPopup","setShowPopup","user","setUser","navigate","fetchUserInfo","token","console","error","response","get","headers","Authorization","withCredentials","localStorage","setItem","JSON","stringify","data","fetchInvitations","length","acceptInvite","inviteId","post","alert","handleLogout","document","cookie","removeItem","sessionStorage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","invite","email","onClick","id","to","e","preventDefault","_c","$RefreshReg$"],"sources":["C:/project2/teamverse-2-boot,react - 작업/src/components/Navbar.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n// import \"../styles/Navbar.css\";\r\n\r\n// const Navbar = () => {\r\n//   const [invitations, setInvitations] = useState([]);\r\n//   const [showPopup, setShowPopup] = useState(false);\r\n//   const [user, setUser] = useState(null);\r\n\r\n//   // ✅ 사용자 정보 불러오기\r\n//   const fetchUserInfo = async () => {\r\n//     try {\r\n//       const token = localStorage.getItem(\"accessToken\"); // accessToken 사용\r\n//       if (!token) {\r\n//         console.error(\"🚨 JWT 토큰이 없습니다! 로그인이 필요합니다.\");\r\n//         return;\r\n//       }\r\n\r\n//       const response = await axios.get(\"http://localhost:8082/api/auth/me\", {\r\n//         headers: {\r\n//           Authorization: `Bearer ${token}`,\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         withCredentials: true,\r\n//       });\r\n\r\n//       localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n//       setUser(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"❌ 사용자 정보 불러오기 실패:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // ✅ 초대 목록 불러오기\r\n//   const fetchInvitations = async () => {\r\n//     try {\r\n//       const token = localStorage.getItem(\"token\");\r\n//       if (!token) return;\r\n\r\n//       const response = await axios.get(\"http://localhost:8082/api/team/invitations\", {\r\n//         headers: { Authorization: `Bearer ${token}` },\r\n//       });\r\n\r\n//       setInvitations(response.data);\r\n//       if (response.data.length > 0) setShowPopup(true);\r\n//     } catch (error) {\r\n//       console.error(\"초대 목록 불러오기 실패:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // ✅ 초대 수락하기\r\n//   const acceptInvite = async (inviteId) => {\r\n//     try {\r\n//       const token = localStorage.getItem(\"token\");\r\n//       await axios.post(\r\n//         `http://localhost:8082/api/invites/${inviteId}/accept`,\r\n//         {},\r\n//         { headers: { Authorization: `Bearer ${token}` } }\r\n//       );\r\n\r\n//       alert(\"✅ 초대를 수락했습니다!\");\r\n//       fetchInvitations(); // 새 초대 목록 다시 불러오기\r\n//     } catch (error) {\r\n//       console.error(\"❌ 초대 수락 실패:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // ✅ 로그아웃\r\n//   // const handleLogout = () => {\r\n//   //   localStorage.removeItem(\"token\");\r\n//   //   localStorage.removeItem(\"refreshToken\");\r\n//   //   localStorage.removeItem(\"user\");\r\n//   //   setUser(null);\r\n//   //   window.location.href = \"/login\";\r\n//   // };\r\n\r\n//   // useEffect(() => {\r\n//   //   fetchUserInfo();\r\n//   //   fetchInvitations();\r\n//   // }, []);\r\n//   const handleLogout = async () => {\r\n//     try {\r\n//       const token = localStorage.getItem(\"accessToken\"); // 로그아웃 시 Authorization 헤더에 토큰 포함\r\n//  if (!token) {\r\n//       console.error(\"🚨 JWT 토큰이 없습니다! 로그아웃 요청을 할 수 없습니다.\");\r\n//       return; // 🔹 토큰이 없으면 로그아웃 요청을 실행하지 않음\r\n//     }\r\n\r\n//   await axios.post(\"http://localhost:8082/api/auth/logout\", {}, {\r\n//       headers: { Authorization: `Bearer ${token}` }, // Authorization 헤더 포함\r\n//       withCredentials: true\r\n//     });\r\n\r\n//       // ✅ 쿠키 삭제 (브라우저에서 강제 삭제)\r\n//     document.cookie = \"accessToken=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;\";\r\n//     document.cookie = \"refreshToken=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;\";\r\n     \r\n//     // ✅ 로컬스토리지 삭제\r\n//     localStorage.removeItem(\"accessToken\");\r\n//     localStorage.removeItem(\"refreshToken\");\r\n//     localStorage.removeItem(\"user\");\r\n\r\n//       setUser(null); // 로그아웃 후 사용자 상태 초기화\r\n//       alert(\"로그아웃 되었습니다.\");\r\n//       window.location.href = \"/\";\r\n//     } catch (error) {\r\n//       console.error(\"로그아웃 실패:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // 페이지 로드시 사용자 정보 자동 불러오기\r\n//   useEffect(() => {\r\n//     fetchUserInfo();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <nav className=\"navbar\">\r\n//       <div className=\"navbar-logo\">TeamVerse</div>\r\n\r\n//       {/* ✅ 초대 팝업 */}\r\n//       {showPopup && (\r\n//         <div className=\"invitation-popup\">\r\n//           <h2>초대 알림</h2>\r\n//           <ul>\r\n//             {invitations.map((invite) => (\r\n//               <li key={invite.id}>\r\n//                 <p>{invite.email}님이 팀 초대를 보냈습니다.</p>\r\n//                 <button className=\"accept-btn\" onClick={() => acceptInvite(invite.id)}>\r\n//                   수락\r\n//                 </button>\r\n//               </li>\r\n//             ))}\r\n//           </ul>\r\n//           <button className=\"close-btn\" onClick={() => setShowPopup(false)}>닫기</button>\r\n//         </div>\r\n//       )}\r\n\r\n//       <div className=\"navbar-links\">\r\n//         <Link to=\"/\">Dashboard</Link>\r\n//         <Link to=\"/statistics\">Statistics</Link>\r\n//         <Link to=\"/team-status\">Team</Link>\r\n//         <Link to=\"/settings\">Settings</Link>\r\n//         {user ? (\r\n//           <Link\r\n//             to=\"/login\"\r\n//             onClick={(e) => {\r\n//               e.preventDefault(); // 기본 이동 방지\r\n//               handleLogout(); // 로그아웃 함수 실행\r\n//             }}\r\n//           >\r\n//             Logout\r\n//           </Link>\r\n//         ) : (\r\n//           <Link to=\"/login\">Login</Link>\r\n//         )}\r\n//       </div>\r\n//     </nav>\r\n//   );\r\n// };\r\n\r\n// export default Navbar;\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\"; // ✅ useNavigate 추가\r\nimport axios from \"axios\";\r\nimport { getAccessToken } from \"../utils/authUtils\"; // ✅ 로그인 상태 확인을 위한 accessToken 가져오기\r\nimport \"../styles/Navbar.css\";\r\n\r\nconst Navbar = () => {\r\n  const [invitations, setInvitations] = useState([]);\r\n  const [showPopup, setShowPopup] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const navigate = useNavigate(); // ✅ 페이지 이동을 위한 useNavigate 추가\r\n\r\n  // ✅ 사용자 정보 불러오기\r\n  const fetchUserInfo = async () => {\r\n    try {\r\n      const token = getAccessToken(); // ✅ 수정: sessionStorage에서도 가져올 수 있도록 변경\r\n      if (!token) {\r\n        console.error(\"🚨 JWT 토큰이 없습니다! 로그인이 필요합니다.\");\r\n        return;\r\n      }\r\n\r\n      const response = await axios.get(\"http://localhost:8082/api/auth/me\", {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        withCredentials: true,\r\n      });\r\n\r\n      localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n      setUser(response.data);\r\n    } catch (error) {\r\n      console.error(\"❌ 사용자 정보 불러오기 실패:\", error);\r\n    }\r\n  };\r\n\r\n  // ✅ 초대 목록 불러오기\r\n  const fetchInvitations = async () => {\r\n    try {\r\n      const token = getAccessToken(); // ✅ 수정: token 가져오는 방식 통일\r\n      if (!token) return;\r\n\r\n      const response = await axios.get(\"http://localhost:8082/api/team/invitations\", {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n\r\n      setInvitations(response.data);\r\n      if (response.data.length > 0) setShowPopup(true);\r\n    } catch (error) {\r\n      console.error(\"초대 목록 불러오기 실패:\", error);\r\n    }\r\n  };\r\n\r\n  // ✅ 초대 수락하기\r\n  const acceptInvite = async (inviteId) => {\r\n    try {\r\n      const token = getAccessToken(); // ✅ 수정: token 가져오는 방식 통일\r\n      await axios.post(\r\n        `http://localhost:8082/api/invites/${inviteId}/accept`,\r\n        {},\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n\r\n      alert(\"✅ 초대를 수락했습니다!\");\r\n      fetchInvitations(); // 새 초대 목록 다시 불러오기\r\n    } catch (error) {\r\n      console.error(\"❌ 초대 수락 실패:\", error);\r\n    }\r\n  };\r\n\r\n  // ✅ 로그아웃\r\n  const handleLogout = async () => {\r\n    try {\r\n      const token = getAccessToken(); // ✅ 수정: sessionStorage에서도 가져올 수 있도록 변경\r\n      if (!token) {\r\n        console.error(\"🚨 JWT 토큰이 없습니다! 로그아웃 요청을 할 수 없습니다.\");\r\n        return; \r\n      }\r\n\r\n      await axios.post(\"http://localhost:8082/api/auth/logout\", {}, {\r\n        headers: { Authorization: `Bearer ${token}` }, \r\n        withCredentials: true\r\n      });\r\n\r\n      // ✅ 쿠키 삭제 (브라우저에서 강제 삭제)\r\n      document.cookie = \"accessToken=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;\";\r\n      document.cookie = \"refreshToken=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;\";\r\n      \r\n      // ✅ 로컬스토리지 및 세션스토리지 삭제\r\n      localStorage.removeItem(\"accessToken\");\r\n      localStorage.removeItem(\"refreshToken\");\r\n      localStorage.removeItem(\"user\");\r\n      sessionStorage.removeItem(\"accessToken\"); // ✅ 추가: sessionStorage에서도 삭제\r\n      sessionStorage.removeItem(\"refreshToken\"); // ✅ 추가: sessionStorage에서도 삭제\r\n\r\n      setUser(null); // ✅ 상태 업데이트\r\n      alert(\"로그아웃 되었습니다.\");\r\n      navigate(\"/\"); // ✅ 로그인 페이지로 이동\r\n    } catch (error) {\r\n      console.error(\"로그아웃 실패:\", error);\r\n    }\r\n  };\r\n\r\n  // ✅ 로그인 상태 확인 후 user 상태 업데이트\r\n  useEffect(() => {\r\n    fetchUserInfo();\r\n  }, []);\r\n\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div className=\"navbar-logo\">TeamVerse</div>\r\n\r\n      {/* ✅ 초대 팝업 */}\r\n      {showPopup && (\r\n        <div className=\"invitation-popup\">\r\n          <h2>초대 알림</h2>\r\n          <ul>\r\n            {invitations.map((invite) => (\r\n              <li key={invite.id}>\r\n                <p>{invite.email}님이 팀 초대를 보냈습니다.</p>\r\n                <button className=\"accept-btn\" onClick={() => acceptInvite(invite.id)}>\r\n                  수락\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <button className=\"close-btn\" onClick={() => setShowPopup(false)}>닫기</button>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"navbar-links\">\r\n        <Link to=\"/\">Dashboard</Link>\r\n        <Link to=\"/statistics\">Statistics</Link>\r\n        <Link to=\"/team-status\">Team</Link>\r\n        <Link to=\"/settings\">Settings</Link>\r\n        {user ? (\r\n          <Link\r\n            to=\"/login\"\r\n            onClick={(e) => {\r\n              e.preventDefault(); \r\n              handleLogout(); \r\n            }}\r\n          >\r\n            Logout\r\n          </Link>\r\n        ) : (\r\n          <Link to=\"/login\">Login</Link>\r\n        )}\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AACtD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,QAAQ,oBAAoB,CAAC,CAAC;AACrD,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAMe,QAAQ,GAAGb,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}