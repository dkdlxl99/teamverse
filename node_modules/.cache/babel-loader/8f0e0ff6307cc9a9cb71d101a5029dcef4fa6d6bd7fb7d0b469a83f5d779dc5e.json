{"ast":null,"code":"var _jsxFileName = \"C:\\\\project2\\\\teamverse-2\\\\src\\\\components\\\\GanttChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/GanttChart.css';\n\n// 파스텔 톤 색상 생성 함수\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst generatePastelColor = () => {\n  const r = Math.floor(Math.random() * 127 + 127); // 127~254\n  const g = Math.floor(Math.random() * 127 + 127); // 127~254\n  const b = Math.floor(Math.random() * 127 + 127); // 127~254\n  return `rgb(${r}, ${g}, ${b})`;\n};\nconst GanttChart = () => {\n  _s();\n  const initialTasks = [{\n    id: 1,\n    name: 'Design Phase',\n    start: new Date(2025, 0, 28),\n    end: new Date(2025, 0, 30),\n    progress: 100\n  }, {\n    id: 2,\n    name: 'Development Phase',\n    start: new Date(2025, 0, 28),\n    end: new Date(2025, 0, 31),\n    progress: 75\n  }, {\n    id: 3,\n    name: 'Testing Phase',\n    start: new Date(2025, 0, 28),\n    end: new Date(2025, 0, 31),\n    progress: 30\n  }];\n  const [tasks, setTasks] = useState([]);\n  const [viewMode, setViewMode] = useState('week'); // 현재 보기 모드 (week, month, year)\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const today = new Date();\n  useEffect(() => {\n    const savedColors = JSON.parse(localStorage.getItem('taskColors')) || {};\n    const tasksWithColors = initialTasks.map(task => ({\n      ...task,\n      color: savedColors[task.id] || generatePastelColor()\n    }));\n    const newColors = tasksWithColors.reduce((acc, task) => {\n      if (!savedColors[task.id]) {\n        acc[task.id] = task.color;\n      }\n      return acc;\n    }, {});\n    localStorage.setItem('taskColors', JSON.stringify({\n      ...savedColors,\n      ...newColors\n    }));\n    setTasks(tasksWithColors);\n  }, []);\n  const getWeekDates = () => {\n    const today = new Date();\n    const firstDayOfWeek = today.getDate() - today.getDay();\n    return Array.from({\n      length: 7\n    }, (_, i) => {\n      const date = new Date(today.getFullYear(), today.getMonth(), firstDayOfWeek + i);\n      return {\n        day: date.toLocaleDateString('en-US', {\n          weekday: 'short'\n        }),\n        date: new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0)\n      };\n    });\n  };\n  const getMonthDates = () => {\n    const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n    const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n    const dates = [];\n\n    // 첫 주 빈 칸\n    for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\n      dates.push(null);\n    }\n\n    // 해당 월의 모든 날짜\n    for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\n      const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\n      dates.push(date);\n    }\n    return dates;\n  };\n  const handlePreviousMonth = () => {\n    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\n  };\n  const handleNextMonth = () => {\n    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\n  };\n  const getYearMonths = () => {\n    return Array.from({\n      length: 12\n    }, (_, index) => {\n      const monthDate = new Date(currentYear, index, 1);\n      return {\n        name: monthDate.toLocaleDateString('en-US', {\n          month: 'short'\n        }).toUpperCase(),\n        date: monthDate\n      };\n    });\n  };\n  const isToday = date => {\n    // date가 유효한 경우에만 체크\n    return date && today.getFullYear() === date.getFullYear() && today.getMonth() === date.getMonth() && today.getDate() === date.getDate();\n  };\n  const weekDates = getWeekDates();\n  const monthDates = getMonthDates();\n  const yearMonths = getYearMonths();\n  const handlePreviousYear = () => {\n    setCurrentYear(prevYear => prevYear - 1);\n  };\n  const handleNextYear = () => {\n    setCurrentYear(prevYear => prevYear + 1);\n  };\n  const isTaskInMonth = (monthDate, task) => {\n    const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n    const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\n    return task.start <= monthEnd && task.end >= monthStart;\n  };\n  const isTodayInMonth = monthDate => {\n    return today.getFullYear() === monthDate.getFullYear() && today.getMonth() === monthDate.getMonth();\n  };\n  const isTaskOnDate = (date, task) => {\n    return date >= task.start && date <= task.end;\n  };\n  const calculateProgressBarStyle = task => {\n    const weekStart = weekDates[0].date.getTime();\n    const weekEnd = weekDates[6].date.getTime() + 24 * 60 * 60 * 1000 - 1;\n    const taskStart = Math.max(task.start.getTime(), weekStart);\n    const taskEnd = Math.min(task.end.getTime() + 24 * 60 * 60 * 1000 - 1, weekEnd);\n    if (taskEnd < weekStart || taskStart > weekEnd) {\n      return {\n        display: 'none'\n      };\n    }\n    const totalWeekMs = weekEnd - weekStart + 1;\n    const offset = (taskStart - weekStart) / totalWeekMs * 100;\n    const width = (taskEnd - taskStart) / totalWeekMs * 100;\n    return {\n      left: `${offset}%`,\n      width: `${width}%`\n    };\n  };\n  const ProgressBar = ({\n    task,\n    progressBarStyle\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar\",\n      style: progressBarStyle,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress\",\n        style: {\n          width: `${task.progress}%`,\n          backgroundColor: task.color\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"task-name\",\n          children: task.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gantt-chart\",\n    children: [viewMode === 'week' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar\",\n        children: weekDates.map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `calendar-day ${isToday(day.date) ? 'today' : ''}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"day-name\",\n            children: [day.day, /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"day-date\",\n              children: day.date.toLocaleDateString('en-US', {\n                day: 'numeric',\n                month: 'short'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-container\",\n        children: tasks.map(task => {\n          const progressBarStyle = calculateProgressBarStyle(task);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task\",\n            children: /*#__PURE__*/_jsxDEV(ProgressBar, {\n              task: task,\n              progressBarStyle: progressBarStyle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 19\n            }, this)\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), viewMode === 'month' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"month-calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"month-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"month-nav\",\n          onClick: handlePreviousMonth,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"month-title\",\n          children: currentMonth.toLocaleDateString('en-US', {\n            month: 'long',\n            year: 'numeric'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"month-nav\",\n          onClick: handleNextMonth,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-grid\",\n        children: [['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-day-name\",\n          children: day\n        }, day, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 15\n        }, this)), monthDates.map((date, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `calendar-day ${date && isToday(date) ? 'today' : ''}`,\n          children: date && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"day-date\",\n              children: date.getDate()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-indicator-container\",\n              children: tasks.map(task => isTaskOnDate(date, task) && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"task-indicator task-bar\" // 막대 모양\n                ,\n                style: {\n                  backgroundColor: task.color\n                }\n              }, task.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 29\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this), viewMode === 'year' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"year-calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"year-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"year-nav\",\n          onClick: handlePreviousYear,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"year-title\",\n          children: currentYear\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"year-nav\",\n          onClick: handleNextYear,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"year-grid\",\n        children: yearMonths.map((month, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"year-month\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `month-name ${isTodayInMonth(month.date) ? 'today' : ''}`,\n            children: month.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"month-tasks\",\n            children: tasks.map(task => isTaskInMonth(month.date, task) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-indicator task-circle\",\n              style: {\n                backgroundColor: task.color\n              }\n            }, task.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 31\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 23\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"view-mode-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'week' ? 'active' : ''}`,\n        onClick: () => setViewMode('week'),\n        children: \"Week\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'month' ? 'active' : ''}`,\n        onClick: () => setViewMode('month'),\n        children: \"Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'year' ? 'active' : ''}`,\n        onClick: () => setViewMode('year'),\n        children: \"Year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n_s(GanttChart, \"CwzBZxRD+sA6iZmroZrkJBBSej8=\");\n_c = GanttChart;\nexport default GanttChart;\nvar _c;\n$RefreshReg$(_c, \"GanttChart\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","generatePastelColor","r","Math","floor","random","g","b","GanttChart","_s","initialTasks","id","name","start","Date","end","progress","tasks","setTasks","viewMode","setViewMode","currentMonth","setCurrentMonth","currentYear","setCurrentYear","getFullYear","today","savedColors","JSON","parse","localStorage","getItem","tasksWithColors","map","task","color","newColors","reduce","acc","setItem","stringify","getWeekDates","firstDayOfWeek","getDate","getDay","Array","from","length","_","i","date","getMonth","day","toLocaleDateString","weekday","getMonthDates","firstDayOfMonth","lastDayOfMonth","dates","push","handlePreviousMonth","handleNextMonth","getYearMonths","index","monthDate","month","toUpperCase","isToday","weekDates","monthDates","yearMonths","handlePreviousYear","prevYear","handleNextYear","isTaskInMonth","monthStart","monthEnd","isTodayInMonth","isTaskOnDate","calculateProgressBarStyle","weekStart","getTime","weekEnd","taskStart","max","taskEnd","min","display","totalWeekMs","offset","width","left","ProgressBar","progressBarStyle","className","style","children","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","onClick","year","_c","$RefreshReg$"],"sources":["C:/project2/teamverse-2/src/components/GanttChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/GanttChart.css';\r\n\r\n// 파스텔 톤 색상 생성 함수\r\nconst generatePastelColor = () => {\r\n  const r = Math.floor((Math.random() * 127) + 127); // 127~254\r\n  const g = Math.floor((Math.random() * 127) + 127); // 127~254\r\n  const b = Math.floor((Math.random() * 127) + 127); // 127~254\r\n  return `rgb(${r}, ${g}, ${b})`;\r\n};\r\n\r\nconst GanttChart = () => {\r\n  const initialTasks = [\r\n    { id: 1, name: 'Design Phase', start: new Date(2025, 0, 28), end: new Date(2025, 0, 30), progress: 100 },\r\n    { id: 2, name: 'Development Phase', start: new Date(2025, 0, 28), end: new Date(2025, 0, 31), progress: 75 },\r\n    { id: 3, name: 'Testing Phase', start: new Date(2025, 0, 28), end: new Date(2025, 0, 31), progress: 30 },\r\n  ];\r\n\r\n  const [tasks, setTasks] = useState([]);\r\n  const [viewMode, setViewMode] = useState('week'); // 현재 보기 모드 (week, month, year)\r\n  const [currentMonth, setCurrentMonth] = useState(new Date());\r\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\r\n  const today = new Date();\r\n\r\n\r\n  useEffect(() => {\r\n    const savedColors = JSON.parse(localStorage.getItem('taskColors')) || {};\r\n    const tasksWithColors = initialTasks.map((task) => ({\r\n      ...task,\r\n      color: savedColors[task.id] || generatePastelColor(),\r\n    }));\r\n\r\n    const newColors = tasksWithColors.reduce((acc, task) => {\r\n      if (!savedColors[task.id]) {\r\n        acc[task.id] = task.color;\r\n      }\r\n      return acc;\r\n    }, {});\r\n    localStorage.setItem('taskColors', JSON.stringify({ ...savedColors, ...newColors }));\r\n\r\n    setTasks(tasksWithColors);\r\n  },[]);\r\n\r\n  const getWeekDates = () => {\r\n    const today = new Date();\r\n    const firstDayOfWeek = today.getDate() - today.getDay();\r\n    return Array.from({ length: 7 }, (_, i) => {\r\n      const date = new Date(today.getFullYear(), today.getMonth(), firstDayOfWeek + i);\r\n      return {\r\n        day: date.toLocaleDateString('en-US', { weekday: 'short' }),\r\n        date: new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0),\r\n      };\r\n    });\r\n  };\r\n\r\n  const getMonthDates = () => {\r\n    const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\r\n    const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\r\n    const dates = [];\r\n\r\n    // 첫 주 빈 칸\r\n    for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\r\n      dates.push(null);\r\n    }\r\n\r\n    // 해당 월의 모든 날짜\r\n    for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\r\n      const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\r\n      dates.push(date);\r\n    }\r\n\r\n    return dates;\r\n  };\r\n\r\n  const handlePreviousMonth = () => {\r\n    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\r\n  };\r\n\r\n  const handleNextMonth = () => {\r\n    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\r\n  };\r\n\r\n  const getYearMonths = () => {\r\n    return Array.from({ length: 12 }, (_, index) => {\r\n      const monthDate = new Date(currentYear, index, 1);\r\n      return {\r\n        name: monthDate.toLocaleDateString('en-US', { month: 'short' }).toUpperCase(),\r\n        date: monthDate,\r\n      };\r\n    });\r\n  };\r\n\r\n  const isToday = (date) => {\r\n    // date가 유효한 경우에만 체크\r\n    return date && today.getFullYear() === date.getFullYear() &&\r\n      today.getMonth() === date.getMonth() &&\r\n      today.getDate() === date.getDate();\r\n  };\r\n  \r\n  const weekDates = getWeekDates();\r\n  const monthDates = getMonthDates();\r\n  const yearMonths = getYearMonths();\r\n\r\n  const handlePreviousYear = () => {\r\n    setCurrentYear((prevYear) => prevYear - 1);\r\n  };\r\n\r\n  const handleNextYear = () => {\r\n    setCurrentYear((prevYear) => prevYear + 1);\r\n  };\r\n\r\n  const isTaskInMonth = (monthDate, task) => {\r\n    const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\r\n    const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\r\n    return task.start <= monthEnd && task.end >= monthStart;\r\n  };\r\n\r\n  const isTodayInMonth = (monthDate) => {\r\n    return (\r\n      today.getFullYear() === monthDate.getFullYear() &&\r\n      today.getMonth() === monthDate.getMonth()\r\n    );\r\n  };\r\n\r\n    const isTaskOnDate = (date, task) => {\r\n    return date >= task.start && date <= task.end;\r\n  };\r\n\r\n  const calculateProgressBarStyle = (task) => {\r\n    const weekStart = weekDates[0].date.getTime();\r\n    const weekEnd = weekDates[6].date.getTime() + 24 * 60 * 60 * 1000 - 1;\r\n\r\n    const taskStart = Math.max(task.start.getTime(), weekStart);\r\n    const taskEnd = Math.min(task.end.getTime() + 24 * 60 * 60 * 1000 - 1, weekEnd);\r\n\r\n    if (taskEnd < weekStart || taskStart > weekEnd) {\r\n      return { display: 'none' };\r\n    }\r\n\r\n    const totalWeekMs = weekEnd - weekStart + 1;\r\n    const offset = ((taskStart - weekStart) / totalWeekMs) * 100;\r\n    const width = ((taskEnd - taskStart) / totalWeekMs) * 100;\r\n\r\n    return {\r\n      left: `${offset}%`,\r\n      width: `${width}%`,\r\n    };\r\n  };\r\n\r\n  const ProgressBar = ({ task, progressBarStyle }) => {\r\n    return (\r\n      <div className=\"progress-bar\" style={progressBarStyle}>\r\n        <div\r\n          className=\"progress\"\r\n          style={{\r\n            width: `${task.progress}%`,\r\n            backgroundColor: task.color,\r\n          }}\r\n        >\r\n          <span className=\"task-name\">{task.name}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"gantt-chart\">\r\n      \r\n      {viewMode === 'week' && (\r\n        <>\r\n          <div className=\"calendar\">\r\n            {weekDates.map((day, index) => (\r\n            <div key={index} className={`calendar-day ${isToday(day.date) ? 'today' : ''}`}>\r\n                <div className=\"day-name\">{day.day}\r\n                <div className=\"day-date\">\r\n                  {day.date.toLocaleDateString('en-US', { day: 'numeric', month: 'short' })}\r\n                </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"task-container\">\r\n            {tasks.map((task) => {\r\n              const progressBarStyle = calculateProgressBarStyle(task);\r\n              return (\r\n                <div key={task.id} className=\"task\">\r\n                  <ProgressBar task={task} progressBarStyle={progressBarStyle} />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </>\r\n      )}\r\n      {viewMode === 'month' && (\r\n        <div className=\"month-calendar\">\r\n          <div className=\"month-header\">\r\n            <button className=\"month-nav\" onClick={handlePreviousMonth}>\r\n              &lt;\r\n            </button>\r\n            <div className=\"month-title\">\r\n              {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\r\n            </div>\r\n            <button className=\"month-nav\" onClick={handleNextMonth}>\r\n              &gt;\r\n            </button>\r\n          </div>\r\n          <div className=\"calendar-grid\">\r\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\r\n              <div key={day} className=\"calendar-day-name\">\r\n                {day}\r\n              </div>\r\n            ))}\r\n            {monthDates.map((date, index) => (\r\n              <div key={index} className={`calendar-day ${date && isToday(date) ? 'today' : ''}`}>\r\n                {date && (\r\n                  <>\r\n                    <div className=\"day-date\">{date.getDate()}</div>\r\n                    <div className=\"task-indicator-container\">\r\n                      {tasks.map(\r\n                        (task) =>\r\n                          isTaskOnDate(date, task) && (\r\n                            <div key={task.id} className=\"task-indicator task-bar\" // 막대 모양\r\n                            style={{ backgroundColor: task.color }}></div>\r\n                          )\r\n                      )}\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {viewMode === 'year' && (\r\n              <div className=\"year-calendar\">\r\n                <div className=\"year-header\">\r\n                  <button className=\"year-nav\" onClick={handlePreviousYear}>\r\n                    &lt;\r\n                  </button>\r\n                  <div className=\"year-title\">{currentYear}</div>\r\n                  <button className=\"year-nav\" onClick={handleNextYear}>\r\n                    &gt;\r\n                  </button>\r\n                </div>\r\n                <div className=\"year-grid\">\r\n                  {yearMonths.map((month, index) => (\r\n                    <div key={index} className=\"year-month\">\r\n                      <div className={`month-name ${isTodayInMonth(month.date) ? 'today' : ''}`}>\r\n                        {month.name}\r\n                      </div>\r\n                      <div className=\"month-tasks\">\r\n                        {tasks.map(\r\n                          (task) =>\r\n                            isTaskInMonth(month.date, task) && (\r\n                              <div\r\n                                key={task.id}\r\n                                className=\"task-indicator task-circle\"\r\n                                style={{ backgroundColor: task.color }}\r\n                              ></div>\r\n                            )\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n        <div className=\"view-mode-buttons\">\r\n        <button\r\n          className={`view-button ${viewMode === 'week' ? 'active' : ''}`}\r\n          onClick={() => setViewMode('week')}\r\n        >\r\n          Week\r\n        </button>\r\n        <button\r\n          className={`view-button ${viewMode === 'month' ? 'active' : ''}`}\r\n          onClick={() => setViewMode('month')}\r\n        >\r\n          Month\r\n        </button>\r\n        <button\r\n          className={`view-button ${viewMode === 'year' ? 'active' : ''}`}\r\n          onClick={() => setViewMode('year')}\r\n        >\r\n          Year\r\n        </button>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GanttChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}