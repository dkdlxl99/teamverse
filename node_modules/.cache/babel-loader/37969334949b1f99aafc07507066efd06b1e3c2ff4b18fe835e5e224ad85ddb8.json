{"ast":null,"code":"var _jsxFileName = \"C:\\\\project2\\\\teamverse-2-boot,react - \\uC791\\uC5C5\\\\src\\\\components\\\\GanttChart.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import '../styles/GanttChart.css';\n\n// // 파스텔 톤 색상 생성 함수\n// const generatePastelColor = () => {\n//   const r = Math.floor((Math.random() * 127) + 127); // 127~254\n//   const g = Math.floor((Math.random() * 127) + 127); // 127~254\n//   const b = Math.floor((Math.random() * 127) + 127); // 127~254\n//   return `rgb(${r}, ${g}, ${b})`;\n// };\n\n// const GanttChart = ({ project }) => {\n//   const initialTasks = [\n//     { id: 1, name: 'Design Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 8), progress: 100 },\n//     { id: 2, name: 'Development Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 9), progress: 75 },\n//     { id: 3, name: 'Testing Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 10), progress: 30 },\n//   ];\n\n//   const [tasks, setTasks] = useState([]);\n//   const [viewMode, setViewMode] = useState('week'); // 현재 보기 모드 (week, month, year)\n//   const [currentMonth, setCurrentMonth] = useState(new Date());\n//   const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n//   const today = new Date();\n\n//   useEffect(() => {\n\n//     if (!project) {\n//       setTasks([]); // ✅ 프로젝트 없을 경우 빈 상태 유지\n//       return;\n//     }\n\n//     console.log(\"📌 선택된 프로젝트:\", project.name); // ✅ 콘솔에서 프로젝트 이름 확인\n\n//     const savedColors = JSON.parse(localStorage.getItem('taskColors')) || {};\n//     const tasksWithColors = initialTasks.map((task) => ({\n//       ...task,\n//       color: savedColors[task.id] || generatePastelColor(),\n//     }));\n\n//     const newColors = tasksWithColors.reduce((acc, task) => {\n//       if (!savedColors[task.id]) {\n//         acc[task.id] = task.color;\n//       }\n//       return acc;\n//     }, {});\n//     localStorage.setItem('taskColors', JSON.stringify({ ...savedColors, ...newColors }));\n\n//     setTasks(tasksWithColors);\n//   },[project]);\n\n//   const getWeekDates = () => {\n//     const today = new Date();\n//     const firstDayOfWeek = today.getDate() - today.getDay();\n//     return Array.from({ length: 7 }, (_, i) => {\n//       const date = new Date(today.getFullYear(), today.getMonth(), firstDayOfWeek + i);\n//       return {\n//         day: date.toLocaleDateString('en-US', { weekday: 'short' }),\n//         date: new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0),\n//       };\n//     });\n//   };\n\n//   const getMonthDates = () => {\n//     const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n//     const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n//     const dates = [];\n\n//     // 첫 주 빈 칸\n//     for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\n//       dates.push(null);\n//     }\n\n//     // 해당 월의 모든 날짜\n//     for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\n//       const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\n//       dates.push(date);\n//     }\n\n//     return dates;\n//   };\n\n//   const handlePreviousMonth = () => {\n//     setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\n//   };\n\n//   const handleNextMonth = () => {\n//     setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\n//   };\n\n//   const getYearMonths = () => {\n//     return Array.from({ length: 12 }, (_, index) => {\n//       const monthDate = new Date(currentYear, index, 1);\n//       return {\n//         name: monthDate.toLocaleDateString('en-US', { month: 'short' }).toUpperCase(),\n//         date: monthDate,\n//       };\n//     });\n//   };\n\n//   const isToday = (date) => {\n//     // date가 유효한 경우에만 체크\n//     return date && today.getFullYear() === date.getFullYear() &&\n//       today.getMonth() === date.getMonth() &&\n//       today.getDate() === date.getDate();\n//   };\n\n//   const weekDates = getWeekDates();\n//   const monthDates = getMonthDates();\n//   const yearMonths = getYearMonths();\n\n//   const handlePreviousYear = () => {\n//     setCurrentYear((prevYear) => prevYear - 1);\n//   };\n\n//   const handleNextYear = () => {\n//     setCurrentYear((prevYear) => prevYear + 1);\n//   };\n\n//   const isTaskInMonth = (monthDate, task) => {\n//     const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n//     const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\n//     return task.start <= monthEnd && task.end >= monthStart;\n//   };\n\n//   const isTodayInMonth = (monthDate) => {\n//     return (\n//       today.getFullYear() === monthDate.getFullYear() &&\n//       today.getMonth() === monthDate.getMonth()\n//     );\n//   };\n\n//     const isTaskOnDate = (date, task) => {\n//     return date >= task.start && date <= task.end;\n//   };\n\n//   const calculateProgressBarStyle = (task) => {\n//     const weekStart = weekDates[0].date.getTime();\n//     const weekEnd = weekDates[6].date.getTime() + 24 * 60 * 60 * 1000 - 1;\n\n//     const taskStart = Math.max(task.start.getTime(), weekStart);\n//     const taskEnd = Math.min(task.end.getTime() + 24 * 60 * 60 * 1000 - 1, weekEnd);\n\n//     if (taskEnd < weekStart || taskStart > weekEnd) {\n//       return { display: 'none' };\n//     }\n\n//     const totalWeekMs = weekEnd - weekStart + 1;\n//     const offset = ((taskStart - weekStart) / totalWeekMs) * 100;\n//     const width = ((taskEnd - taskStart) / totalWeekMs) * 100;\n\n//     return {\n//       left: `${offset}%`,\n//       width: `${width}%`,\n//     };\n//   };\n\n//   const ProgressBar = ({ task, progressBarStyle }) => {\n//     return (\n//       <div className=\"progress-bar\" style={progressBarStyle}>\n//         <div\n//           className=\"progress\"\n//           style={{\n//             width: `${task.progress}%`,\n//             backgroundColor: task.color,\n//           }}\n//         >\n//           <span className=\"task-name\">{task.name}</span>\n//         </div>\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div className=\"gantt-chart\">\n//             {project ? (\n//                 <>\n//                     <h2 className=\"project-title\">📌 {project.name}</h2> \n//                     <p>프로젝트 시작일: {project.startDate}</p>\n//                 </>\n//             ) : (\n//                 <p>현재 선택된 프로젝트가 없습니다.</p>\n//             )}\n//       {viewMode === 'week' && (\n//         <>\n//           <div className=\"calendar\">\n//             {weekDates.map((day, index) => (\n//             <div key={index} className={`calendar-day ${isToday(day.date) ? 'today' : ''}`}>\n//                 <div className=\"day-name\">{day.day}\n//                 <div className=\"day-date\">\n//                   {day.date.toLocaleDateString('en-US', { day: 'numeric', month: 'short' })}\n//                 </div>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"task-container\">\n//             {tasks.map((task) => {\n//               const progressBarStyle = calculateProgressBarStyle(task);\n//               return (\n//                 <div key={task.id} className=\"task\">\n//                   <ProgressBar task={task} progressBarStyle={progressBarStyle} />\n//                 </div>\n//               );\n//             })}\n//           </div>\n//         </>\n//       )}\n//       {viewMode === 'month' && (\n//         <div className=\"month-calendar\">\n//           <div className=\"month-header\">\n//             <button className=\"month-nav\" onClick={handlePreviousMonth}>\n//               &lt;\n//             </button>\n//             <div className=\"month-title\">\n//               {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n//             </div>\n//             <button className=\"month-nav\" onClick={handleNextMonth}>\n//               &gt;\n//             </button>\n//           </div>\n//           <div className=\"calendar-grid\">\n//             {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\n//               <div key={day} className=\"calendar-day-name\">\n//                 {day}\n//               </div>\n//             ))}\n//             {monthDates.map((date, index) => (\n//               <div key={index} className={`calendar-day ${date && isToday(date) ? 'today' : ''}`}>\n//                 {date && (\n//                   <>\n//                     <div className=\"day-date\">{date.getDate()}</div>\n//                     <div className=\"task-indicator-container\">\n//                       {tasks.map(\n//                         (task) =>\n//                           isTaskOnDate(date, task) && (\n//                             <div key={task.id} className=\"task-indicator task-bar\" // 막대 모양\n//                             style={{ backgroundColor: task.color }}></div>\n//                           )\n//                       )}\n//                     </div>\n//                   </>\n//                 )}\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       )}\n\n//       {viewMode === 'year' && (\n//               <div className=\"year-calendar\">\n//                 <div className=\"year-header\">\n//                   <button className=\"year-nav\" onClick={handlePreviousYear}>\n//                     &lt;\n//                   </button>\n//                   <div className=\"year-title\">{currentYear}</div>\n//                   <button className=\"year-nav\" onClick={handleNextYear}>\n//                     &gt;\n//                   </button>\n//                 </div>\n//                 <div className=\"year-grid\">\n//                   {yearMonths.map((month, index) => (\n//                     <div key={index} className=\"year-month\">\n//                       <div className={`month-name ${isTodayInMonth(month.date) ? 'today' : ''}`}>\n//                         {month.name}\n//                       </div>\n//                       <div className=\"month-tasks\">\n//                         {tasks.map(\n//                           (task) =>\n//                             isTaskInMonth(month.date, task) && (\n//                               <div\n//                                 key={task.id}\n//                                 className=\"task-indicator task-circle\"\n//                                 style={{ backgroundColor: task.color }}\n//                               ></div>\n//                             )\n//                         )}\n//                       </div>\n//                     </div>\n//                   ))}\n//                 </div>\n//               </div>\n//             )}\n//         <div className=\"view-mode-buttons\">\n//         <button\n//           className={`view-button ${viewMode === 'week' ? 'active' : ''}`}\n//           onClick={() => setViewMode('week')}\n//         >\n//           Week\n//         </button>\n//         <button\n//           className={`view-button ${viewMode === 'month' ? 'active' : ''}`}\n//           onClick={() => setViewMode('month')}\n//         >\n//           Month\n//         </button>\n//         <button\n//           className={`view-button ${viewMode === 'year' ? 'active' : ''}`}\n//           onClick={() => setViewMode('year')}\n//         >\n//           Year\n//         </button>\n//         </div>\n//     </div>\n//   );\n// };\n\n// export default GanttChart;\n\nimport React, { useState, useEffect } from 'react';\nimport '../styles/GanttChart.css';\n\n// ✅ 수정: Task 데이터를 props로 받아서 사용하도록 변경\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GanttChart = ({\n  tasks\n}) => {\n  _s();\n  const [viewMode, setViewMode] = useState('week'); // ✅ 현재 보기 모드 (week, month, year)\n  const [currentWeekStart, setCurrentWeekStart] = useState(getStartOfWeek(new Date()));\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const today = new Date();\n  const isTaskOnDate = (date, task) => {\n    const taskStart = new Date(task.start).setHours(0, 0, 0, 0);\n    const taskEnd = new Date(task.end).setHours(23, 59, 59, 999);\n    const checkDate = new Date(date).setHours(12, 0, 0, 0); // ✅ 날짜 중앙으로 설정 (비교 오류 방지)\n\n    return checkDate >= taskStart && checkDate <= taskEnd;\n  };\n\n  // ✅ 현재 주의 시작 날짜 계산\n  function getStartOfWeek(date) {\n    const start = new Date(date);\n    const dayOfWeek = start.getDay(); // 0(일) ~ 6(토)\n    const diff = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // 월요일을 기준\n    start.setDate(start.getDate() + diff);\n    start.setHours(0, 0, 0, 0);\n    return start;\n  }\n\n  // Task 데이터를 받아서 Gantt 차트에 반영\n  const formattedTasks = tasks.map(task => ({\n    id: task.id,\n    name: task.name,\n    start: new Date(task.startDate),\n    end: new Date(new Date(task.dueDate).setHours(23, 59, 59, 999)),\n    // ✅ 마감일 23:59:59로 설정\n    color: task.color || \"#ff99a5\" // ✅ 색상이 없을 경우 기본값 지정\n    //progress: 50, // ✅ 진행률 기본값 (추후 백엔드에서 가져오도록 수정 가능)\n  }));\n\n  // ✅ 이전/다음 주 & 월 이동 기능\n  const handlePreviousWeek = () => {\n    const newWeekStart = getStartOfWeek(new Date(currentWeekStart));\n    newWeekStart.setDate(newWeekStart.getDate() - 7);\n    newWeekStart.setHours(0, 0, 0, 0);\n    setCurrentWeekStart(newWeekStart);\n  };\n  const handleNextWeek = () => {\n    const newWeekStart = getStartOfWeek(new Date(currentWeekStart));\n    newWeekStart.setDate(newWeekStart.getDate() + 7);\n    newWeekStart.setHours(0, 0, 0, 0);\n    setCurrentWeekStart(newWeekStart);\n  };\n\n  // 주간 날짜 목록 생성\n  const getWeekDates = () => {\n    return Array.from({\n      length: 7\n    }, (_, i) => {\n      const date = new Date(currentWeekStart); // ✅ 현재 주 시작(월요일)에서 시작\n      date.setDate(currentWeekStart.getDate() + i); // ✅ 하루씩 더하면서 한 주를 채움\n      date.setHours(0, 0, 0, 0); // ✅ 00:00:00으로 초기화\n      return {\n        day: date.toLocaleDateString('en-US', {\n          weekday: 'short'\n        }),\n        // 'Mon', 'Tue' 형태\n        date: new Date(date) // ✅ Date 객체로 변환\n      };\n    });\n  };\n\n  // ✅ 월간 날짜 목록 생성\n  const getMonthDates = () => {\n    const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n    const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n    const dates = [];\n    for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\n      dates.push(null);\n    }\n    for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\n      const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\n      dates.push(date);\n    }\n    return dates;\n  };\n  const handlePreviousMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\n  const handleNextMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\n  const handlePreviousYear = () => setCurrentYear(currentYear - 1);\n  const handleNextYear = () => setCurrentYear(currentYear + 1);\n\n  // Year 뷰 - 12개월 목록 생성\n  const getYearMonths = () => {\n    return Array.from({\n      length: 12\n    }, (_, index) => {\n      const monthDate = new Date(currentYear, index, 1);\n      return {\n        name: monthDate.toLocaleDateString('en-US', {\n          month: 'short'\n        }).toUpperCase(),\n        date: monthDate\n      };\n    });\n  };\n\n  // Task가 특정 월에 포함되는지 확인하는 함수\n  const isTaskInMonth = (monthDate, task) => {\n    const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n    const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\n    return task.start <= monthEnd && task.end >= monthStart;\n  };\n  const calculateProgressBarStyle = task => {\n    const weekStart = getStartOfWeek(currentWeekStart);\n    const weekEnd = new Date(weekStart);\n    weekEnd.setDate(weekStart.getDate() + 6);\n    weekEnd.setHours(23, 59, 59, 999);\n    if (task.end < weekStart || task.start > weekEnd) {\n      return {\n        display: 'none'\n      };\n    }\n    const clampedStart = Math.max(task.start.getTime(), weekStart.getTime());\n    const clampedEnd = Math.min(task.end.getTime(), weekEnd.getTime());\n    const totalWeekMs = weekEnd.getTime() - weekStart.getTime();\n    const offset = (clampedStart - weekStart.getTime()) / totalWeekMs * 100;\n    const width = (clampedEnd - clampedStart) / totalWeekMs * 100;\n    return {\n      left: `${offset}%`,\n      width: `${width}%`,\n      backgroundColor: task.color || \"#4caf50\"\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gantt-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"view-mode-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'week' ? 'active' : ''}`,\n        onClick: () => setViewMode('week'),\n        children: \"Week\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'month' ? 'active' : ''}`,\n        onClick: () => setViewMode('month'),\n        children: \"Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'year' ? 'active' : ''}`,\n        onClick: () => setViewMode('year'),\n        children: \"Year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 7\n    }, this), viewMode === 'week' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"week-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePreviousWeek,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [currentWeekStart.toLocaleDateString(), \" ~ \", new Date(currentWeekStart.getTime() + 6 * 24 * 60 * 60 * 1000).toLocaleDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextWeek,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-container\",\n        children: formattedTasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar\",\n            style: calculateProgressBarStyle(task),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"task-name\",\n                children: task.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 473,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 17\n          }, this)\n        }, task.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), viewMode === 'month' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"month-calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"month-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"month-nav\",\n          onClick: handlePreviousMonth,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"month-title\",\n          children: currentMonth.toLocaleDateString('en-US', {\n            month: 'long',\n            year: 'numeric'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"month-nav\",\n          onClick: handleNextMonth,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-grid\",\n        children: getMonthDates().map((date, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-day\",\n          children: date && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"day-date\",\n              children: date.getDate()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-indicator-container\",\n              children: formattedTasks.map(task => {\n                return isTaskOnDate(date, task) ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"task-indicator task-bar\",\n                  style: {\n                    backgroundColor: task.color\n                  }\n                }, task.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 499,\n                  columnNumber: 27\n                }, this) : null;\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 9\n    }, this), viewMode === 'year' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"year-calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"year-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"year-nav\",\n          onClick: handlePreviousYear,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"year-title\",\n          children: currentYear\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"year-nav\",\n          onClick: handleNextYear,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"year-grid\",\n        children: getYearMonths().map((month, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"year-month\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"month-name\",\n            children: month.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"month-tasks\",\n            children: formattedTasks.map(task => {\n              return isTaskInMonth(month.date, task) ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"task-indicator task-circle\",\n                style: {\n                  backgroundColor: task.color\n                }\n              }, task.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 526,\n                columnNumber: 23\n              }, this) : null;\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 453,\n    columnNumber: 5\n  }, this);\n};\n_s(GanttChart, \"LyfnJf+H3U6upcVxeLT+KmgL2fo=\");\n_c = GanttChart;\nexport default GanttChart;\nvar _c;\n$RefreshReg$(_c, \"GanttChart\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","GanttChart","tasks","_s","viewMode","setViewMode","currentWeekStart","setCurrentWeekStart","getStartOfWeek","Date","currentMonth","setCurrentMonth","currentYear","setCurrentYear","getFullYear","today","isTaskOnDate","date","task","taskStart","start","setHours","taskEnd","end","checkDate","dayOfWeek","getDay","diff","setDate","getDate","formattedTasks","map","id","name","startDate","dueDate","color","handlePreviousWeek","newWeekStart","handleNextWeek","getWeekDates","Array","from","length","_","i","day","toLocaleDateString","weekday","getMonthDates","firstDayOfMonth","getMonth","lastDayOfMonth","dates","push","handlePreviousMonth","handleNextMonth","handlePreviousYear","handleNextYear","getYearMonths","index","monthDate","month","toUpperCase","isTaskInMonth","monthStart","monthEnd","calculateProgressBarStyle","weekStart","weekEnd","display","clampedStart","Math","max","getTime","clampedEnd","min","totalWeekMs","offset","width","left","backgroundColor","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","year","_c","$RefreshReg$"],"sources":["C:/project2/teamverse-2-boot,react - 작업/src/components/GanttChart.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import '../styles/GanttChart.css';\r\n\r\n// // 파스텔 톤 색상 생성 함수\r\n// const generatePastelColor = () => {\r\n//   const r = Math.floor((Math.random() * 127) + 127); // 127~254\r\n//   const g = Math.floor((Math.random() * 127) + 127); // 127~254\r\n//   const b = Math.floor((Math.random() * 127) + 127); // 127~254\r\n//   return `rgb(${r}, ${g}, ${b})`;\r\n// };\r\n\r\n// const GanttChart = ({ project }) => {\r\n//   const initialTasks = [\r\n//     { id: 1, name: 'Design Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 8), progress: 100 },\r\n//     { id: 2, name: 'Development Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 9), progress: 75 },\r\n//     { id: 3, name: 'Testing Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 10), progress: 30 },\r\n//   ];\r\n\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [viewMode, setViewMode] = useState('week'); // 현재 보기 모드 (week, month, year)\r\n//   const [currentMonth, setCurrentMonth] = useState(new Date());\r\n//   const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\r\n//   const today = new Date();\r\n\r\n\r\n//   useEffect(() => {\r\n\r\n//     if (!project) {\r\n//       setTasks([]); // ✅ 프로젝트 없을 경우 빈 상태 유지\r\n//       return;\r\n//     }\r\n\r\n//     console.log(\"📌 선택된 프로젝트:\", project.name); // ✅ 콘솔에서 프로젝트 이름 확인\r\n\r\n//     const savedColors = JSON.parse(localStorage.getItem('taskColors')) || {};\r\n//     const tasksWithColors = initialTasks.map((task) => ({\r\n//       ...task,\r\n//       color: savedColors[task.id] || generatePastelColor(),\r\n//     }));\r\n\r\n//     const newColors = tasksWithColors.reduce((acc, task) => {\r\n//       if (!savedColors[task.id]) {\r\n//         acc[task.id] = task.color;\r\n//       }\r\n//       return acc;\r\n//     }, {});\r\n//     localStorage.setItem('taskColors', JSON.stringify({ ...savedColors, ...newColors }));\r\n\r\n//     setTasks(tasksWithColors);\r\n//   },[project]);\r\n\r\n\r\n\r\n//   const getWeekDates = () => {\r\n//     const today = new Date();\r\n//     const firstDayOfWeek = today.getDate() - today.getDay();\r\n//     return Array.from({ length: 7 }, (_, i) => {\r\n//       const date = new Date(today.getFullYear(), today.getMonth(), firstDayOfWeek + i);\r\n//       return {\r\n//         day: date.toLocaleDateString('en-US', { weekday: 'short' }),\r\n//         date: new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0),\r\n//       };\r\n//     });\r\n//   };\r\n\r\n//   const getMonthDates = () => {\r\n//     const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\r\n//     const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\r\n//     const dates = [];\r\n\r\n//     // 첫 주 빈 칸\r\n//     for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\r\n//       dates.push(null);\r\n//     }\r\n\r\n//     // 해당 월의 모든 날짜\r\n//     for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\r\n//       const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\r\n//       dates.push(date);\r\n//     }\r\n\r\n//     return dates;\r\n//   };\r\n\r\n//   const handlePreviousMonth = () => {\r\n//     setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\r\n//   };\r\n\r\n//   const handleNextMonth = () => {\r\n//     setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\r\n//   };\r\n\r\n//   const getYearMonths = () => {\r\n//     return Array.from({ length: 12 }, (_, index) => {\r\n//       const monthDate = new Date(currentYear, index, 1);\r\n//       return {\r\n//         name: monthDate.toLocaleDateString('en-US', { month: 'short' }).toUpperCase(),\r\n//         date: monthDate,\r\n//       };\r\n//     });\r\n//   };\r\n\r\n//   const isToday = (date) => {\r\n//     // date가 유효한 경우에만 체크\r\n//     return date && today.getFullYear() === date.getFullYear() &&\r\n//       today.getMonth() === date.getMonth() &&\r\n//       today.getDate() === date.getDate();\r\n//   };\r\n\r\n//   const weekDates = getWeekDates();\r\n//   const monthDates = getMonthDates();\r\n//   const yearMonths = getYearMonths();\r\n\r\n//   const handlePreviousYear = () => {\r\n//     setCurrentYear((prevYear) => prevYear - 1);\r\n//   };\r\n\r\n//   const handleNextYear = () => {\r\n//     setCurrentYear((prevYear) => prevYear + 1);\r\n//   };\r\n\r\n//   const isTaskInMonth = (monthDate, task) => {\r\n//     const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\r\n//     const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\r\n//     return task.start <= monthEnd && task.end >= monthStart;\r\n//   };\r\n\r\n//   const isTodayInMonth = (monthDate) => {\r\n//     return (\r\n//       today.getFullYear() === monthDate.getFullYear() &&\r\n//       today.getMonth() === monthDate.getMonth()\r\n//     );\r\n//   };\r\n\r\n//     const isTaskOnDate = (date, task) => {\r\n//     return date >= task.start && date <= task.end;\r\n//   };\r\n\r\n//   const calculateProgressBarStyle = (task) => {\r\n//     const weekStart = weekDates[0].date.getTime();\r\n//     const weekEnd = weekDates[6].date.getTime() + 24 * 60 * 60 * 1000 - 1;\r\n\r\n//     const taskStart = Math.max(task.start.getTime(), weekStart);\r\n//     const taskEnd = Math.min(task.end.getTime() + 24 * 60 * 60 * 1000 - 1, weekEnd);\r\n\r\n//     if (taskEnd < weekStart || taskStart > weekEnd) {\r\n//       return { display: 'none' };\r\n//     }\r\n\r\n//     const totalWeekMs = weekEnd - weekStart + 1;\r\n//     const offset = ((taskStart - weekStart) / totalWeekMs) * 100;\r\n//     const width = ((taskEnd - taskStart) / totalWeekMs) * 100;\r\n\r\n//     return {\r\n//       left: `${offset}%`,\r\n//       width: `${width}%`,\r\n//     };\r\n//   };\r\n\r\n//   const ProgressBar = ({ task, progressBarStyle }) => {\r\n//     return (\r\n//       <div className=\"progress-bar\" style={progressBarStyle}>\r\n//         <div\r\n//           className=\"progress\"\r\n//           style={{\r\n//             width: `${task.progress}%`,\r\n//             backgroundColor: task.color,\r\n//           }}\r\n//         >\r\n//           <span className=\"task-name\">{task.name}</span>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"gantt-chart\">\r\n//             {project ? (\r\n//                 <>\r\n//                     <h2 className=\"project-title\">📌 {project.name}</h2> \r\n//                     <p>프로젝트 시작일: {project.startDate}</p>\r\n//                 </>\r\n//             ) : (\r\n//                 <p>현재 선택된 프로젝트가 없습니다.</p>\r\n//             )}\r\n//       {viewMode === 'week' && (\r\n//         <>\r\n//           <div className=\"calendar\">\r\n//             {weekDates.map((day, index) => (\r\n//             <div key={index} className={`calendar-day ${isToday(day.date) ? 'today' : ''}`}>\r\n//                 <div className=\"day-name\">{day.day}\r\n//                 <div className=\"day-date\">\r\n//                   {day.date.toLocaleDateString('en-US', { day: 'numeric', month: 'short' })}\r\n//                 </div>\r\n//                 </div>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//           <div className=\"task-container\">\r\n//             {tasks.map((task) => {\r\n//               const progressBarStyle = calculateProgressBarStyle(task);\r\n//               return (\r\n//                 <div key={task.id} className=\"task\">\r\n//                   <ProgressBar task={task} progressBarStyle={progressBarStyle} />\r\n//                 </div>\r\n//               );\r\n//             })}\r\n//           </div>\r\n//         </>\r\n//       )}\r\n//       {viewMode === 'month' && (\r\n//         <div className=\"month-calendar\">\r\n//           <div className=\"month-header\">\r\n//             <button className=\"month-nav\" onClick={handlePreviousMonth}>\r\n//               &lt;\r\n//             </button>\r\n//             <div className=\"month-title\">\r\n//               {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\r\n//             </div>\r\n//             <button className=\"month-nav\" onClick={handleNextMonth}>\r\n//               &gt;\r\n//             </button>\r\n//           </div>\r\n//           <div className=\"calendar-grid\">\r\n//             {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\r\n//               <div key={day} className=\"calendar-day-name\">\r\n//                 {day}\r\n//               </div>\r\n//             ))}\r\n//             {monthDates.map((date, index) => (\r\n//               <div key={index} className={`calendar-day ${date && isToday(date) ? 'today' : ''}`}>\r\n//                 {date && (\r\n//                   <>\r\n//                     <div className=\"day-date\">{date.getDate()}</div>\r\n//                     <div className=\"task-indicator-container\">\r\n//                       {tasks.map(\r\n//                         (task) =>\r\n//                           isTaskOnDate(date, task) && (\r\n//                             <div key={task.id} className=\"task-indicator task-bar\" // 막대 모양\r\n//                             style={{ backgroundColor: task.color }}></div>\r\n//                           )\r\n//                       )}\r\n//                     </div>\r\n//                   </>\r\n//                 )}\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {viewMode === 'year' && (\r\n//               <div className=\"year-calendar\">\r\n//                 <div className=\"year-header\">\r\n//                   <button className=\"year-nav\" onClick={handlePreviousYear}>\r\n//                     &lt;\r\n//                   </button>\r\n//                   <div className=\"year-title\">{currentYear}</div>\r\n//                   <button className=\"year-nav\" onClick={handleNextYear}>\r\n//                     &gt;\r\n//                   </button>\r\n//                 </div>\r\n//                 <div className=\"year-grid\">\r\n//                   {yearMonths.map((month, index) => (\r\n//                     <div key={index} className=\"year-month\">\r\n//                       <div className={`month-name ${isTodayInMonth(month.date) ? 'today' : ''}`}>\r\n//                         {month.name}\r\n//                       </div>\r\n//                       <div className=\"month-tasks\">\r\n//                         {tasks.map(\r\n//                           (task) =>\r\n//                             isTaskInMonth(month.date, task) && (\r\n//                               <div\r\n//                                 key={task.id}\r\n//                                 className=\"task-indicator task-circle\"\r\n//                                 style={{ backgroundColor: task.color }}\r\n//                               ></div>\r\n//                             )\r\n//                         )}\r\n//                       </div>\r\n//                     </div>\r\n//                   ))}\r\n//                 </div>\r\n//               </div>\r\n//             )}\r\n//         <div className=\"view-mode-buttons\">\r\n//         <button\r\n//           className={`view-button ${viewMode === 'week' ? 'active' : ''}`}\r\n//           onClick={() => setViewMode('week')}\r\n//         >\r\n//           Week\r\n//         </button>\r\n//         <button\r\n//           className={`view-button ${viewMode === 'month' ? 'active' : ''}`}\r\n//           onClick={() => setViewMode('month')}\r\n//         >\r\n//           Month\r\n//         </button>\r\n//         <button\r\n//           className={`view-button ${viewMode === 'year' ? 'active' : ''}`}\r\n//           onClick={() => setViewMode('year')}\r\n//         >\r\n//           Year\r\n//         </button>\r\n//         </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default GanttChart;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport '../styles/GanttChart.css';\r\n\r\n\r\n// ✅ 수정: Task 데이터를 props로 받아서 사용하도록 변경\r\nconst GanttChart = ({ tasks }) => {\r\n  const [viewMode, setViewMode] = useState('week'); // ✅ 현재 보기 모드 (week, month, year)\r\n  const [currentWeekStart, setCurrentWeekStart] = useState(getStartOfWeek(new Date()));\r\n  const [currentMonth, setCurrentMonth] = useState(new Date());\r\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\r\n  const today = new Date();\r\n\r\n  const isTaskOnDate = (date, task) => {\r\n    const taskStart = new Date(task.start).setHours(0, 0, 0, 0);\r\n    const taskEnd = new Date(task.end).setHours(23, 59, 59, 999);\r\n    const checkDate = new Date(date).setHours(12, 0, 0, 0); // ✅ 날짜 중앙으로 설정 (비교 오류 방지)\r\n\r\n    return checkDate >= taskStart && checkDate <= taskEnd;\r\n  };\r\n\r\n \r\n\r\n  // ✅ 현재 주의 시작 날짜 계산\r\n  function getStartOfWeek(date) {\r\n    const start = new Date(date);\r\n    const dayOfWeek = start.getDay(); // 0(일) ~ 6(토)\r\n    const diff = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // 월요일을 기준\r\n    start.setDate(start.getDate() + diff);\r\n    start.setHours(0, 0, 0, 0);\r\n    return start;\r\n  }\r\n  \r\n // Task 데이터를 받아서 Gantt 차트에 반영\r\n const formattedTasks = tasks.map((task) => ({\r\n  id: task.id,\r\n  name: task.name,\r\n  start: new Date(task.startDate),\r\n  end: new Date(new Date(task.dueDate).setHours(23, 59, 59, 999)), // ✅ 마감일 23:59:59로 설정\r\n  color: task.color || \"#ff99a5\", // ✅ 색상이 없을 경우 기본값 지정\r\n  //progress: 50, // ✅ 진행률 기본값 (추후 백엔드에서 가져오도록 수정 가능)\r\n}));\r\n\r\n // ✅ 이전/다음 주 & 월 이동 기능\r\n const handlePreviousWeek = () => {\r\n  const newWeekStart = getStartOfWeek(new Date(currentWeekStart));\r\n  newWeekStart.setDate(newWeekStart.getDate() - 7);\r\n  newWeekStart.setHours(0, 0, 0, 0);\r\n  setCurrentWeekStart(newWeekStart);\r\n};\r\n\r\nconst handleNextWeek = () => {\r\n  const newWeekStart = getStartOfWeek(new Date(currentWeekStart));\r\n  newWeekStart.setDate(newWeekStart.getDate() + 7);\r\n  newWeekStart.setHours(0, 0, 0, 0);\r\n  setCurrentWeekStart(newWeekStart);\r\n};\r\n\r\n  // 주간 날짜 목록 생성\r\n  const getWeekDates = () => {\r\n    return Array.from({ length: 7 }, (_, i) => {\r\n      const date = new Date(currentWeekStart); // ✅ 현재 주 시작(월요일)에서 시작\r\n      date.setDate(currentWeekStart.getDate() + i); // ✅ 하루씩 더하면서 한 주를 채움\r\n      date.setHours(0, 0, 0, 0); // ✅ 00:00:00으로 초기화\r\n      return {\r\n        day: date.toLocaleDateString('en-US', { weekday: 'short' }), // 'Mon', 'Tue' 형태\r\n        date: new Date(date), // ✅ Date 객체로 변환\r\n      };\r\n    });\r\n  };\r\n\r\n  // ✅ 월간 날짜 목록 생성\r\n  const getMonthDates = () => {\r\n    const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\r\n    const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\r\n    const dates = [];\r\n\r\n    for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\r\n      dates.push(null);\r\n    }\r\n\r\n    for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\r\n      const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\r\n      dates.push(date);\r\n    }\r\n\r\n    return dates;\r\n  };\r\n \r\n  \r\n  const handlePreviousMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\r\n  const handleNextMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\r\n  const handlePreviousYear = () => setCurrentYear(currentYear - 1);\r\n  const handleNextYear = () => setCurrentYear(currentYear + 1);\r\n\r\n\r\n  // Year 뷰 - 12개월 목록 생성\r\n  const getYearMonths = () => {\r\n    return Array.from({ length: 12 }, (_, index) => {\r\n      const monthDate = new Date(currentYear, index, 1);\r\n      return {\r\n        name: monthDate.toLocaleDateString('en-US', { month: 'short' }).toUpperCase(),\r\n        date: monthDate,\r\n      };\r\n    });\r\n  };\r\n\r\n  // Task가 특정 월에 포함되는지 확인하는 함수\r\n  const isTaskInMonth = (monthDate, task) => {\r\n    const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\r\n    const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\r\n    return task.start <= monthEnd && task.end >= monthStart;\r\n  };\r\n\r\n  const calculateProgressBarStyle = (task) => {\r\n    const weekStart = getStartOfWeek(currentWeekStart);\r\n    const weekEnd = new Date(weekStart);\r\n    weekEnd.setDate(weekStart.getDate() + 6);\r\n    weekEnd.setHours(23, 59, 59, 999);\r\n\r\n    if (task.end < weekStart || task.start > weekEnd) {\r\n      return { display: 'none' };\r\n    }\r\n\r\n    const clampedStart = Math.max(task.start.getTime(), weekStart.getTime());\r\n    const clampedEnd = Math.min(task.end.getTime(), weekEnd.getTime());\r\n\r\n    const totalWeekMs = weekEnd.getTime() - weekStart.getTime();\r\n    const offset = ((clampedStart - weekStart.getTime()) / totalWeekMs) * 100;\r\n    const width = ((clampedEnd - clampedStart) / totalWeekMs) * 100;\r\n\r\n    return {\r\n      left: `${offset}%`,\r\n      width: `${width}%`,\r\n      backgroundColor: task.color || \"#4caf50\",\r\n    };\r\n  };\r\n\r\n  \r\n\r\n\r\n  return (\r\n    <div className=\"gantt-chart\">\r\n      <div className=\"view-mode-buttons\">\r\n        <button className={`view-button ${viewMode === 'week' ? 'active' : ''}`} onClick={() => setViewMode('week')}>Week</button>\r\n        <button className={`view-button ${viewMode === 'month' ? 'active' : ''}`} onClick={() => setViewMode('month')}>Month</button>\r\n        <button className={`view-button ${viewMode === 'year' ? 'active' : ''}`} onClick={() => setViewMode('year')}>Year</button>\r\n      </div>\r\n\r\n      {viewMode === 'week' && (\r\n        <>\r\n          <div className=\"week-navigation\">\r\n            <button onClick={handlePreviousWeek}>&lt;</button>\r\n            <span>{currentWeekStart.toLocaleDateString()} ~ {new Date(currentWeekStart.getTime() + 6 * 24 * 60 * 60 * 1000).toLocaleDateString()}</span>\r\n            <button onClick={handleNextWeek}>&gt;</button>\r\n          </div>\r\n\r\n          <div className=\"task-container\">\r\n            {formattedTasks.map((task) => (\r\n              <div key={task.id} className=\"task\">\r\n                <div className=\"progress-bar\" style={calculateProgressBarStyle(task)}>\r\n                  <div className=\"progress\">\r\n                    <span className=\"task-name\">{task.name}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {viewMode === 'month' && (\r\n        <div className=\"month-calendar\">\r\n          <div className=\"month-header\">\r\n            <button className=\"month-nav\" onClick={handlePreviousMonth}>&lt;</button>\r\n            <div className=\"month-title\">{currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}</div>\r\n            <button className=\"month-nav\" onClick={handleNextMonth}>&gt;</button>\r\n          </div>\r\n\r\n          <div className=\"calendar-grid\">\r\n            {getMonthDates().map((date, index) => (\r\n              <div key={index} className=\"calendar-day\">\r\n                {date && (\r\n                  <>\r\n                    <div className=\"day-date\">{date.getDate()}</div>\r\n                    <div className=\"task-indicator-container\">\r\n                      {formattedTasks.map((task) => {\r\n                        return isTaskOnDate(date, task) ? (\r\n                          <div key={task.id} className=\"task-indicator task-bar\" style={{ backgroundColor: task.color }}></div>\r\n                        ) : null;\r\n                      })}\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {viewMode === 'year' && (\r\n        <div className=\"year-calendar\">\r\n          <div className=\"year-header\">\r\n            <button className=\"year-nav\" onClick={handlePreviousYear}>&lt;</button>\r\n            <div className=\"year-title\">{currentYear}</div>\r\n            <button className=\"year-nav\" onClick={handleNextYear}>&gt;</button>\r\n          </div>\r\n\r\n          <div className=\"year-grid\">\r\n            {getYearMonths().map((month, index) => (\r\n              <div key={index} className=\"year-month\">\r\n                <div className=\"month-name\">{month.name}</div>\r\n                <div className=\"month-tasks\">\r\n                  {formattedTasks.map((task) => {\r\n                    return isTaskInMonth(month.date, task) ? (\r\n                      <div key={task.id} className=\"task-indicator task-circle\" style={{ backgroundColor: task.color }}></div>\r\n                    ) : null;\r\n                  })}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GanttChart;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}