{"ast":null,"code":"var _jsxFileName = \"C:\\\\project2\\\\teamverse-2-boot,react - \\uC791\\uC5C5\\\\src\\\\pages\\\\TeamStatusPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import Navbar from \"../components/Navbar\";\n// import \"../styles/TeamStatusPage.css\";\n// import axios from \"axios\";\n\n// const TeamStatusPage = () => {\n//   const [showInviteModal, setShowInviteModal] = useState(false);\n//   const [inviteEmail, setInviteEmail] = useState(\"\");\n\n//   const handleInvite = async () => {\n//       if (!inviteEmail.trim()) {\n//           alert(\"초대할 사용자의 이메일을 입력하세요.\");\n//           return;\n//       }\n\n//       try {\n//           const token = localStorage.getItem(\"accessToken\"); // 🔹 JWT 토큰 가져오기\n//           if (!token) {\n//               alert(\"로그인이 필요합니다.\");\n//               return;\n//           }\n\n//             // ✅ 현재 선택된 프로젝트 ID 가져오기\n//         const projectId = localStorage.getItem(\"selectedProjectId\");\n//         if (!projectId) {\n//             alert(\"프로젝트를 먼저 선택해주세요.\");\n//             return;\n//         }\n\n//           const response = await axios.post(\n//               \"http://localhost:8082/api/team/invite\",\n//               { email: inviteEmail, projectId },\n//               {\n//                   headers: {\n//                       \"Authorization\": `Bearer ${token}`,\n//                       \"Content-Type\": \"application/json\"\n//                   }\n//               }\n//           );\n\n//           if (response.status === 200) {\n//               alert(\"초대 요청이 성공적으로 전송되었습니다!\");\n//               setShowInviteModal(false);\n//               setInviteEmail(\"\"); // 입력 필드 초기화\n//           } else {\n//               alert(\"초대할 수 없는 사용자입니다.\");\n//           }\n//       } catch (error) {\n//           console.error(\"초대 요청 실패:\", error);\n//           alert(\"초대 요청을 보낼 수 없습니다.\");\n//       }\n//   };\n\n//   return (\n//     <div className=\"team-status\">\n//         <h2>팀 상태</h2>\n//         <button className=\"invite-button\" onClick={() => setShowInviteModal(true)}>\n//             팀원 초대\n//         </button>\n\n//         {showInviteModal && (\n//             <div className=\"modal\">\n//                 <div className=\"modal-content\">\n//                     <h3>초대할 사용자 이메일 입력</h3>\n//                     <input\n//                         type=\"email\"\n//                         placeholder=\"사용자 이메일\"\n//                         value={inviteEmail}\n//                         onChange={(e) => setInviteEmail(e.target.value)}\n//                     />\n//                     <button onClick={handleInvite}>초대하기</button>\n//                     <button onClick={() => setShowInviteModal(false)}>취소</button>\n//                 </div>\n//             </div>\n//         )}\n//     </div>\n// );\n// };\n\n// export default TeamStatusPage;\n\nimport React, { useState } from \"react\";\nimport Navbar from \"../components/Navbar\";\nimport \"../styles/TeamStatusPage.css\";\nimport axios from \"axios\";\nimport { getAccessToken } from \"../utils/authUtils\"; // ✅ 토큰 가져오는 유틸 함수 추가\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TeamStatusPage = () => {\n  _s();\n  const [showInviteModal, setShowInviteModal] = useState(false);\n  const [inviteEmail, setInviteEmail] = useState(\"\");\n  const handleInvite = async () => {\n    if (!inviteEmail.trim()) {\n      alert(\"초대할 사용자의 이메일을 입력하세요.\");\n      return;\n    }\n    const token = getAccessToken(); // ✅ 토큰 가져오기\n    if (!token) {\n      alert(\"로그인이 필요합니다.\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://localhost:8082/api/team/invite\", {\n        email: inviteEmail\n      }, {\n        headers: {\n          \"Authorization\": `Bearer ${token}`,\n          // ✅ 헤더 추가\n          \"Content-Type\": \"application/json\"\n        },\n        withCredentials: true // ✅ 쿠키 인증 포함\n      });\n      if (response.status === 200) {\n        alert(\"초대 요청이 성공적으로 전송되었습니다!\");\n        setShowInviteModal(false);\n        setInviteEmail(\"\");\n      } else {\n        alert(\"초대할 수 없는 사용자입니다.\");\n      }\n    } catch (error) {\n      console.error(\"초대 요청 실패:\", error);\n      alert(\"초대 요청을 보낼 수 없습니다.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"team-status\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD300 \\uC0C1\\uD0DC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"invite-button\",\n      onClick: () => setShowInviteModal(true),\n      children: \"\\uD300\\uC6D0 \\uCD08\\uB300\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), showInviteModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uCD08\\uB300\\uD560 \\uC0AC\\uC6A9\\uC790 \\uC774\\uBA54\\uC77C \\uC785\\uB825\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"\\uC0AC\\uC6A9\\uC790 \\uC774\\uBA54\\uC77C\",\n          value: inviteEmail,\n          onChange: e => setInviteEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleInvite,\n          children: \"\\uCD08\\uB300\\uD558\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowInviteModal(false),\n          children: \"\\uCDE8\\uC18C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n};\n_s(TeamStatusPage, \"nDCy6TYkK2XmcX4Sb/2BOoXb25A=\");\n_c = TeamStatusPage;\nexport default TeamStatusPage;\nvar _c;\n$RefreshReg$(_c, \"TeamStatusPage\");","map":{"version":3,"names":["React","useState","Navbar","axios","getAccessToken","jsxDEV","_jsxDEV","TeamStatusPage","_s","showInviteModal","setShowInviteModal","inviteEmail","setInviteEmail","handleInvite","trim","alert","token","response","post","email","headers","withCredentials","status","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/project2/teamverse-2-boot,react - 작업/src/pages/TeamStatusPage.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import Navbar from \"../components/Navbar\";\r\n// import \"../styles/TeamStatusPage.css\";\r\n// import axios from \"axios\";\r\n\r\n// const TeamStatusPage = () => {\r\n//   const [showInviteModal, setShowInviteModal] = useState(false);\r\n//   const [inviteEmail, setInviteEmail] = useState(\"\");\r\n\r\n//   const handleInvite = async () => {\r\n//       if (!inviteEmail.trim()) {\r\n//           alert(\"초대할 사용자의 이메일을 입력하세요.\");\r\n//           return;\r\n//       }\r\n\r\n//       try {\r\n//           const token = localStorage.getItem(\"accessToken\"); // 🔹 JWT 토큰 가져오기\r\n//           if (!token) {\r\n//               alert(\"로그인이 필요합니다.\");\r\n//               return;\r\n//           }\r\n\r\n//             // ✅ 현재 선택된 프로젝트 ID 가져오기\r\n//         const projectId = localStorage.getItem(\"selectedProjectId\");\r\n//         if (!projectId) {\r\n//             alert(\"프로젝트를 먼저 선택해주세요.\");\r\n//             return;\r\n//         }\r\n\r\n//           const response = await axios.post(\r\n//               \"http://localhost:8082/api/team/invite\",\r\n//               { email: inviteEmail, projectId },\r\n//               {\r\n//                   headers: {\r\n//                       \"Authorization\": `Bearer ${token}`,\r\n//                       \"Content-Type\": \"application/json\"\r\n//                   }\r\n//               }\r\n//           );\r\n\r\n//           if (response.status === 200) {\r\n//               alert(\"초대 요청이 성공적으로 전송되었습니다!\");\r\n//               setShowInviteModal(false);\r\n//               setInviteEmail(\"\"); // 입력 필드 초기화\r\n//           } else {\r\n//               alert(\"초대할 수 없는 사용자입니다.\");\r\n//           }\r\n//       } catch (error) {\r\n//           console.error(\"초대 요청 실패:\", error);\r\n//           alert(\"초대 요청을 보낼 수 없습니다.\");\r\n//       }\r\n//   };\r\n\r\n\r\n//   return (\r\n//     <div className=\"team-status\">\r\n//         <h2>팀 상태</h2>\r\n//         <button className=\"invite-button\" onClick={() => setShowInviteModal(true)}>\r\n//             팀원 초대\r\n//         </button>\r\n\r\n//         {showInviteModal && (\r\n//             <div className=\"modal\">\r\n//                 <div className=\"modal-content\">\r\n//                     <h3>초대할 사용자 이메일 입력</h3>\r\n//                     <input\r\n//                         type=\"email\"\r\n//                         placeholder=\"사용자 이메일\"\r\n//                         value={inviteEmail}\r\n//                         onChange={(e) => setInviteEmail(e.target.value)}\r\n//                     />\r\n//                     <button onClick={handleInvite}>초대하기</button>\r\n//                     <button onClick={() => setShowInviteModal(false)}>취소</button>\r\n//                 </div>\r\n//             </div>\r\n//         )}\r\n//     </div>\r\n// );\r\n// };\r\n\r\n// export default TeamStatusPage;\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport \"../styles/TeamStatusPage.css\";\r\nimport axios from \"axios\";\r\nimport { getAccessToken } from \"../utils/authUtils\"; // ✅ 토큰 가져오는 유틸 함수 추가\r\n\r\nconst TeamStatusPage = () => {\r\n    const [showInviteModal, setShowInviteModal] = useState(false);\r\n    const [inviteEmail, setInviteEmail] = useState(\"\");\r\n\r\n    const handleInvite = async () => {\r\n        if (!inviteEmail.trim()) {\r\n            alert(\"초대할 사용자의 이메일을 입력하세요.\");\r\n            return;\r\n        }\r\n\r\n        const token = getAccessToken(); // ✅ 토큰 가져오기\r\n        if (!token) {\r\n            alert(\"로그인이 필요합니다.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.post(\r\n                \"http://localhost:8082/api/team/invite\",\r\n                { email: inviteEmail },\r\n                {\r\n                    headers: {\r\n                        \"Authorization\": `Bearer ${token}`, // ✅ 헤더 추가\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    withCredentials: true // ✅ 쿠키 인증 포함\r\n                }\r\n            );\r\n\r\n            if (response.status === 200) {\r\n                alert(\"초대 요청이 성공적으로 전송되었습니다!\");\r\n                setShowInviteModal(false);\r\n                setInviteEmail(\"\");\r\n            } else {\r\n                alert(\"초대할 수 없는 사용자입니다.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"초대 요청 실패:\", error);\r\n            alert(\"초대 요청을 보낼 수 없습니다.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"team-status\">\r\n            <h2>팀 상태</h2>\r\n            <button className=\"invite-button\" onClick={() => setShowInviteModal(true)}>\r\n                팀원 초대\r\n            </button>\r\n\r\n            {showInviteModal && (\r\n                <div className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <h3>초대할 사용자 이메일 입력</h3>\r\n                        <input\r\n                            type=\"email\"\r\n                            placeholder=\"사용자 이메일\"\r\n                            value={inviteEmail}\r\n                            onChange={(e) => setInviteEmail(e.target.value)}\r\n                        />\r\n                        <button onClick={handleInvite}>초대하기</button>\r\n                        <button onClick={() => setShowInviteModal(false)}>취소</button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TeamStatusPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}