{"ast":null,"code":"var _jsxFileName = \"C:\\\\project2\\\\teamverse-2-boot,react - \\uC791\\uC5C5\\\\src\\\\components\\\\GanttChart.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import '../styles/GanttChart.css';\n\n// // 파스텔 톤 색상 생성 함수\n// const generatePastelColor = () => {\n//   const r = Math.floor((Math.random() * 127) + 127); // 127~254\n//   const g = Math.floor((Math.random() * 127) + 127); // 127~254\n//   const b = Math.floor((Math.random() * 127) + 127); // 127~254\n//   return `rgb(${r}, ${g}, ${b})`;\n// };\n\n// const GanttChart = ({ project }) => {\n//   const initialTasks = [\n//     { id: 1, name: 'Design Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 8), progress: 100 },\n//     { id: 2, name: 'Development Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 9), progress: 75 },\n//     { id: 3, name: 'Testing Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 10), progress: 30 },\n//   ];\n\n//   const [tasks, setTasks] = useState([]);\n//   const [viewMode, setViewMode] = useState('week'); // 현재 보기 모드 (week, month, year)\n//   const [currentMonth, setCurrentMonth] = useState(new Date());\n//   const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n//   const today = new Date();\n\n//   useEffect(() => {\n\n//     if (!project) {\n//       setTasks([]); // ✅ 프로젝트 없을 경우 빈 상태 유지\n//       return;\n//     }\n\n//     console.log(\"📌 선택된 프로젝트:\", project.name); // ✅ 콘솔에서 프로젝트 이름 확인\n\n//     const savedColors = JSON.parse(localStorage.getItem('taskColors')) || {};\n//     const tasksWithColors = initialTasks.map((task) => ({\n//       ...task,\n//       color: savedColors[task.id] || generatePastelColor(),\n//     }));\n\n//     const newColors = tasksWithColors.reduce((acc, task) => {\n//       if (!savedColors[task.id]) {\n//         acc[task.id] = task.color;\n//       }\n//       return acc;\n//     }, {});\n//     localStorage.setItem('taskColors', JSON.stringify({ ...savedColors, ...newColors }));\n\n//     setTasks(tasksWithColors);\n//   },[project]);\n\n//   const getWeekDates = () => {\n//     const today = new Date();\n//     const firstDayOfWeek = today.getDate() - today.getDay();\n//     return Array.from({ length: 7 }, (_, i) => {\n//       const date = new Date(today.getFullYear(), today.getMonth(), firstDayOfWeek + i);\n//       return {\n//         day: date.toLocaleDateString('en-US', { weekday: 'short' }),\n//         date: new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0),\n//       };\n//     });\n//   };\n\n//   const getMonthDates = () => {\n//     const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n//     const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n//     const dates = [];\n\n//     // 첫 주 빈 칸\n//     for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\n//       dates.push(null);\n//     }\n\n//     // 해당 월의 모든 날짜\n//     for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\n//       const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\n//       dates.push(date);\n//     }\n\n//     return dates;\n//   };\n\n//   const handlePreviousMonth = () => {\n//     setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\n//   };\n\n//   const handleNextMonth = () => {\n//     setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\n//   };\n\n//   const getYearMonths = () => {\n//     return Array.from({ length: 12 }, (_, index) => {\n//       const monthDate = new Date(currentYear, index, 1);\n//       return {\n//         name: monthDate.toLocaleDateString('en-US', { month: 'short' }).toUpperCase(),\n//         date: monthDate,\n//       };\n//     });\n//   };\n\n//   const isToday = (date) => {\n//     // date가 유효한 경우에만 체크\n//     return date && today.getFullYear() === date.getFullYear() &&\n//       today.getMonth() === date.getMonth() &&\n//       today.getDate() === date.getDate();\n//   };\n\n//   const weekDates = getWeekDates();\n//   const monthDates = getMonthDates();\n//   const yearMonths = getYearMonths();\n\n//   const handlePreviousYear = () => {\n//     setCurrentYear((prevYear) => prevYear - 1);\n//   };\n\n//   const handleNextYear = () => {\n//     setCurrentYear((prevYear) => prevYear + 1);\n//   };\n\n//   const isTaskInMonth = (monthDate, task) => {\n//     const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n//     const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\n//     return task.start <= monthEnd && task.end >= monthStart;\n//   };\n\n//   const isTodayInMonth = (monthDate) => {\n//     return (\n//       today.getFullYear() === monthDate.getFullYear() &&\n//       today.getMonth() === monthDate.getMonth()\n//     );\n//   };\n\n//     const isTaskOnDate = (date, task) => {\n//     return date >= task.start && date <= task.end;\n//   };\n\n//   const calculateProgressBarStyle = (task) => {\n//     const weekStart = weekDates[0].date.getTime();\n//     const weekEnd = weekDates[6].date.getTime() + 24 * 60 * 60 * 1000 - 1;\n\n//     const taskStart = Math.max(task.start.getTime(), weekStart);\n//     const taskEnd = Math.min(task.end.getTime() + 24 * 60 * 60 * 1000 - 1, weekEnd);\n\n//     if (taskEnd < weekStart || taskStart > weekEnd) {\n//       return { display: 'none' };\n//     }\n\n//     const totalWeekMs = weekEnd - weekStart + 1;\n//     const offset = ((taskStart - weekStart) / totalWeekMs) * 100;\n//     const width = ((taskEnd - taskStart) / totalWeekMs) * 100;\n\n//     return {\n//       left: `${offset}%`,\n//       width: `${width}%`,\n//     };\n//   };\n\n//   const ProgressBar = ({ task, progressBarStyle }) => {\n//     return (\n//       <div className=\"progress-bar\" style={progressBarStyle}>\n//         <div\n//           className=\"progress\"\n//           style={{\n//             width: `${task.progress}%`,\n//             backgroundColor: task.color,\n//           }}\n//         >\n//           <span className=\"task-name\">{task.name}</span>\n//         </div>\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div className=\"gantt-chart\">\n//             {project ? (\n//                 <>\n//                     <h2 className=\"project-title\">📌 {project.name}</h2> \n//                     <p>프로젝트 시작일: {project.startDate}</p>\n//                 </>\n//             ) : (\n//                 <p>현재 선택된 프로젝트가 없습니다.</p>\n//             )}\n//       {viewMode === 'week' && (\n//         <>\n//           <div className=\"calendar\">\n//             {weekDates.map((day, index) => (\n//             <div key={index} className={`calendar-day ${isToday(day.date) ? 'today' : ''}`}>\n//                 <div className=\"day-name\">{day.day}\n//                 <div className=\"day-date\">\n//                   {day.date.toLocaleDateString('en-US', { day: 'numeric', month: 'short' })}\n//                 </div>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"task-container\">\n//             {tasks.map((task) => {\n//               const progressBarStyle = calculateProgressBarStyle(task);\n//               return (\n//                 <div key={task.id} className=\"task\">\n//                   <ProgressBar task={task} progressBarStyle={progressBarStyle} />\n//                 </div>\n//               );\n//             })}\n//           </div>\n//         </>\n//       )}\n//       {viewMode === 'month' && (\n//         <div className=\"month-calendar\">\n//           <div className=\"month-header\">\n//             <button className=\"month-nav\" onClick={handlePreviousMonth}>\n//               &lt;\n//             </button>\n//             <div className=\"month-title\">\n//               {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n//             </div>\n//             <button className=\"month-nav\" onClick={handleNextMonth}>\n//               &gt;\n//             </button>\n//           </div>\n//           <div className=\"calendar-grid\">\n//             {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\n//               <div key={day} className=\"calendar-day-name\">\n//                 {day}\n//               </div>\n//             ))}\n//             {monthDates.map((date, index) => (\n//               <div key={index} className={`calendar-day ${date && isToday(date) ? 'today' : ''}`}>\n//                 {date && (\n//                   <>\n//                     <div className=\"day-date\">{date.getDate()}</div>\n//                     <div className=\"task-indicator-container\">\n//                       {tasks.map(\n//                         (task) =>\n//                           isTaskOnDate(date, task) && (\n//                             <div key={task.id} className=\"task-indicator task-bar\" // 막대 모양\n//                             style={{ backgroundColor: task.color }}></div>\n//                           )\n//                       )}\n//                     </div>\n//                   </>\n//                 )}\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       )}\n\n//       {viewMode === 'year' && (\n//               <div className=\"year-calendar\">\n//                 <div className=\"year-header\">\n//                   <button className=\"year-nav\" onClick={handlePreviousYear}>\n//                     &lt;\n//                   </button>\n//                   <div className=\"year-title\">{currentYear}</div>\n//                   <button className=\"year-nav\" onClick={handleNextYear}>\n//                     &gt;\n//                   </button>\n//                 </div>\n//                 <div className=\"year-grid\">\n//                   {yearMonths.map((month, index) => (\n//                     <div key={index} className=\"year-month\">\n//                       <div className={`month-name ${isTodayInMonth(month.date) ? 'today' : ''}`}>\n//                         {month.name}\n//                       </div>\n//                       <div className=\"month-tasks\">\n//                         {tasks.map(\n//                           (task) =>\n//                             isTaskInMonth(month.date, task) && (\n//                               <div\n//                                 key={task.id}\n//                                 className=\"task-indicator task-circle\"\n//                                 style={{ backgroundColor: task.color }}\n//                               ></div>\n//                             )\n//                         )}\n//                       </div>\n//                     </div>\n//                   ))}\n//                 </div>\n//               </div>\n//             )}\n//         <div className=\"view-mode-buttons\">\n//         <button\n//           className={`view-button ${viewMode === 'week' ? 'active' : ''}`}\n//           onClick={() => setViewMode('week')}\n//         >\n//           Week\n//         </button>\n//         <button\n//           className={`view-button ${viewMode === 'month' ? 'active' : ''}`}\n//           onClick={() => setViewMode('month')}\n//         >\n//           Month\n//         </button>\n//         <button\n//           className={`view-button ${viewMode === 'year' ? 'active' : ''}`}\n//           onClick={() => setViewMode('year')}\n//         >\n//           Year\n//         </button>\n//         </div>\n//     </div>\n//   );\n// };\n\n// export default GanttChart;\n\nimport React, { useState, useEffect } from 'react';\nimport '../styles/GanttChart.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction assignLayers(tasks, weekStart, weekEnd) {\n  // 1) 범위 클램핑\n  const clampedTasks = tasks.map(t => {\n    const startMs = Math.max(t.start.getTime(), weekStart);\n    const endMs = Math.min(t.end.getTime(), weekEnd);\n    if (endMs < startMs) return null;\n    return {\n      ...t,\n      startMs,\n      endMs\n    };\n  }).filter(Boolean);\n\n  // 2) 시작 시간으로 정렬\n  clampedTasks.sort((a, b) => a.startMs - b.startMs);\n\n  // 3) 레이어 계산\n  const layers = [];\n  clampedTasks.forEach(task => {\n    let placed = false;\n    for (let i = 0; i < layers.length; i++) {\n      // 레이어 i에 있는 task들과 겹치는지 확인\n      const conflict = layers[i].some(t => !(task.endMs <= t.startMs || task.startMs >= t.endMs));\n      if (!conflict) {\n        task.layer = i;\n        layers[i].push(task);\n        placed = true;\n        break;\n      }\n    }\n    if (!placed) {\n      // 새로운 레이어 추가\n      task.layer = layers.length;\n      layers.push([task]);\n    }\n  });\n\n  // 4) left/width 계산(%)\n  const totalWeekMs = weekEnd - weekStart;\n  clampedTasks.forEach(task => {\n    task.left = (task.startMs - weekStart) / totalWeekMs * 100;\n    task.width = (task.endMs - task.startMs) / totalWeekMs * 100;\n  });\n  return clampedTasks;\n}\n\n// ✅ 수정: Task 데이터를 props로 받아서 사용하도록 변경\nconst GanttChart = ({\n  tasks\n}) => {\n  _s();\n  const [viewMode, setViewMode] = useState('week'); // ✅ 현재 보기 모드 (week, month, year)\n  const [currentWeekStart, setCurrentWeekStart] = useState(getStartOfWeek(new Date()));\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const today = new Date();\n  const isTaskOnDate = (date, task) => {\n    const taskStart = new Date(task.start).setHours(0, 0, 0, 0);\n    const taskEnd = new Date(task.end).setHours(23, 59, 59, 999);\n    const checkDate = new Date(date).setHours(12, 0, 0, 0); // ✅ 날짜 중앙으로 설정 (비교 오류 방지)\n\n    return checkDate >= taskStart && checkDate <= taskEnd;\n  };\n\n  // 예시: 간단히 주간 범위 구하기\n  const weekStart = currentWeekStart.getTime();\n  const weekEnd = (() => {\n    const wEnd = new Date(currentWeekStart);\n    wEnd.setDate(wEnd.getDate() + 6); // 일요일\n    wEnd.setHours(23, 59, 59, 999);\n    return wEnd.getTime();\n  })();\n\n  // Task 데이터를 받아서 Gantt 차트에 반영\n  // const formattedTasks = tasks.map((task) => ({\n  //   id: task.id,\n  //   name: task.name,\n  //   start: new Date(task.startDate),\n  //   end: new Date(new Date(task.dueDate).setHours(23, 59, 59, 999)), // ✅ 마감일 23:59:59로 설정\n  //    color: task.color || \"#ff99a5\", // ✅ 색상이 없을 경우 기본값 지정\n  //   //progress: 50, // ✅ 진행률 기본값 (추후 백엔드에서 가져오도록 수정 가능)\n  // }));\n  const formattedTasks = tasks.map(task => ({\n    ...task,\n    start: new Date(task.startDate),\n    end: new Date(task.dueDate)\n  }));\n\n  // 주간 화면 렌더링\n  if (viewMode === 'week') {\n    // (1) 전체 레이어 수만큼 높이를 잡아야 함\n    const maxLayerIndex = Math.max(...layeredTasks.map(t => t.layer), 0);\n    const rowHeight = 40; // 한 줄 높이\n    const gap = 10; // 줄 사이 간격\n    const containerHeight = (maxLayerIndex + 1) * (rowHeight + gap);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gantt-chart\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode('month'),\n        children: \"Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-container\",\n        style: {\n          position: 'relative',\n          height: containerHeight\n        },\n        children: layeredTasks.map(task => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar\",\n            style: {\n              position: 'absolute',\n              top: `${task.layer * (rowHeight + gap)}px`,\n              left: `${task.left}%`,\n              width: `${task.width}%`,\n              height: `${rowHeight}px`,\n              backgroundColor: task.color || '#4caf50'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"task-name\",\n                children: task.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 435,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 17\n            }, this)\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }, this);\n  }\n\n  // ✅ 현재 주의 시작 날짜 계산\n  function getStartOfWeek(date) {\n    const start = new Date(date);\n    const dayOfWeek = start.getDay(); // 현재 요일 (0: 일요일, 1: 월요일, ..., 6: 토요일)\n    const diff = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // 월요일을 기준\n    start.setDate(start.getDate() + diff);\n    start.setHours(0, 0, 0, 0);\n    return start;\n  }\n\n  // 주간 날짜 목록 생성\n  const getWeekDates = () => {\n    return Array.from({\n      length: 7\n    }, (_, i) => {\n      const date = new Date(currentWeekStart); // ✅ 현재 주 시작(월요일)에서 시작\n      date.setDate(currentWeekStart.getDate() + i); // ✅ 하루씩 더하면서 한 주를 채움\n\n      return {\n        day: date.toLocaleDateString('en-US', {\n          weekday: 'short'\n        }),\n        // 'Mon', 'Tue' 형태\n        date: new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0) // 00:00:00 초기화\n      };\n    });\n  };\n\n  // ✅ 월간 날짜 목록 생성\n  const getMonthDates = () => {\n    const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n    const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n    const dates = [];\n    for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\n      dates.push(null);\n    }\n    for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\n      const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\n      dates.push(date);\n    }\n    return dates;\n  };\n  // ✅ 이전/다음 주 & 월 이동 기능\n  const handlePreviousWeek = () => setCurrentWeekStart(new Date(currentWeekStart.setDate(currentWeekStart.getDate() - 7)));\n  const handleNextWeek = () => setCurrentWeekStart(new Date(currentWeekStart.setDate(currentWeekStart.getDate() + 7)));\n  const handlePreviousMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\n  const handleNextMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\n  const handlePreviousYear = () => setCurrentYear(currentYear - 1);\n  const handleNextYear = () => setCurrentYear(currentYear + 1);\n\n  // Year 뷰 - 12개월 목록 생성\n  const getYearMonths = () => {\n    return Array.from({\n      length: 12\n    }, (_, index) => {\n      const monthDate = new Date(currentYear, index, 1);\n      return {\n        name: monthDate.toLocaleDateString('en-US', {\n          month: 'short'\n        }).toUpperCase(),\n        date: monthDate\n      };\n    });\n  };\n\n  // Task가 특정 월에 포함되는지 확인하는 함수\n  const isTaskInMonth = (monthDate, task) => {\n    const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n    const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\n    return task.start <= monthEnd && task.end >= monthStart;\n  };\n  const calculateProgressBarStyle = task => {\n    // 1) 이번 주 월요일(0시) ~ 일요일(23:59:59) 범위를 구함\n    const weekStart = currentWeekStart.getTime(); // 월요일 00:00:00\n    const weekEnd = new Date(weekStart);\n    weekEnd.setDate(weekEnd.getDate() + 6); // 일요일\n    weekEnd.setHours(23, 59, 59, 999); // 일요일 23:59:59.999\n\n    // 2) Task의 시작·종료 시점을 밀리초로 변환\n    const taskStart = new Date(task.start).getTime();\n    const taskEnd = new Date(task.end).getTime();\n\n    // 3) 주 범위를 벗어나는 부분은 \"잘라\"서 계산 (Clamping)\n    const clampedStart = Math.max(taskStart, weekStart);\n    const clampedEnd = Math.min(taskEnd, weekEnd.getTime());\n\n    // 4) 완전히 벗어나면 표시 X\n    if (clampedEnd < weekStart || clampedStart > weekEnd.getTime()) {\n      return {\n        display: 'none'\n      };\n    }\n\n    // 5) 실제 표시할 범위(%) 계산\n    const totalWeekMs = weekEnd.getTime() - weekStart;\n    const offset = (clampedStart - weekStart) / totalWeekMs * 100;\n    const width = (clampedEnd - clampedStart) / totalWeekMs * 100;\n    return {\n      left: `${offset}%`,\n      width: `${width}%`,\n      backgroundColor: task.color || \"#4caf50\"\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gantt-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"view-mode-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'week' ? 'active' : ''}`,\n        onClick: () => setViewMode('week'),\n        children: \"Week\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'month' ? 'active' : ''}`,\n        onClick: () => setViewMode('month'),\n        children: \"Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'year' ? 'active' : ''}`,\n        onClick: () => setViewMode('year'),\n        children: \"Year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 7\n    }, this), viewMode === 'week' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"week-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePreviousWeek,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [currentWeekStart.toLocaleDateString('en-US', {\n            month: 'long',\n            day: 'numeric'\n          }), \" ~\", \" \", new Date(currentWeekStart.getTime() + 6 * 24 * 60 * 60 * 1000).toLocaleDateString('en-US', {\n            month: 'long',\n            day: 'numeric'\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextWeek,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar\",\n        children: getWeekDates().map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-day\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"day-name\",\n            children: day.day\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"day-date\",\n            children: day.date.toLocaleDateString('en-US', {\n              day: 'numeric',\n              month: 'short'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-container\",\n        children: formattedTasks.map(task => {\n          const progressBarStyle = calculateProgressBarStyle(task);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-bar\",\n              style: progressBarStyle,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progress\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"task-name\",\n                  children: task.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 579,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 578,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 577,\n              columnNumber: 19\n            }, this)\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), viewMode === 'month' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"month-calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"month-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"month-nav\",\n          onClick: handlePreviousMonth,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"month-title\",\n          children: currentMonth.toLocaleDateString('en-US', {\n            month: 'long',\n            year: 'numeric'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"month-nav\",\n          onClick: handleNextMonth,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-grid\",\n        children: getMonthDates().map((date, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-day\",\n          children: date && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"day-date\",\n              children: date.getDate()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-indicator-container\",\n              children: formattedTasks.map(task => {\n                return isTaskOnDate(date, task) ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"task-indicator task-bar\",\n                  style: {\n                    backgroundColor: task.color\n                  }\n                }, task.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 606,\n                  columnNumber: 27\n                }, this) : null;\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 603,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 9\n    }, this), viewMode === 'year' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"year-calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"year-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"year-nav\",\n          onClick: handlePreviousYear,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"year-title\",\n          children: currentYear\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"year-nav\",\n          onClick: handleNextYear,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"year-grid\",\n        children: getYearMonths().map((month, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"year-month\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"month-name\",\n            children: month.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"month-tasks\",\n            children: formattedTasks.map(task => {\n              return isTaskInMonth(month.date, task) ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"task-indicator task-circle\",\n                style: {\n                  backgroundColor: task.color\n                }\n              }, task.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 633,\n                columnNumber: 29\n              }, this) : null;\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 630,\n            columnNumber: 23\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 545,\n    columnNumber: 5\n  }, this);\n};\n_s(GanttChart, \"LyfnJf+H3U6upcVxeLT+KmgL2fo=\");\n_c = GanttChart;\nexport default GanttChart;\nvar _c;\n$RefreshReg$(_c, \"GanttChart\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","assignLayers","tasks","weekStart","weekEnd","clampedTasks","map","t","startMs","Math","max","start","getTime","endMs","min","end","filter","Boolean","sort","a","b","layers","forEach","task","placed","i","length","conflict","some","layer","push","totalWeekMs","left","width","GanttChart","_s","viewMode","setViewMode","currentWeekStart","setCurrentWeekStart","getStartOfWeek","Date","currentMonth","setCurrentMonth","currentYear","setCurrentYear","getFullYear","today","isTaskOnDate","date","taskStart","setHours","taskEnd","checkDate","wEnd","setDate","getDate","formattedTasks","startDate","dueDate","maxLayerIndex","layeredTasks","rowHeight","gap","containerHeight","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","position","height","top","backgroundColor","color","name","id","dayOfWeek","getDay","diff","getWeekDates","Array","from","_","day","toLocaleDateString","weekday","getMonth","getMonthDates","firstDayOfMonth","lastDayOfMonth","dates","handlePreviousWeek","handleNextWeek","handlePreviousMonth","handleNextMonth","handlePreviousYear","handleNextYear","getYearMonths","index","monthDate","month","toUpperCase","isTaskInMonth","monthStart","monthEnd","calculateProgressBarStyle","clampedStart","clampedEnd","display","offset","progressBarStyle","year","_c","$RefreshReg$"],"sources":["C:/project2/teamverse-2-boot,react - 작업/src/components/GanttChart.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import '../styles/GanttChart.css';\r\n\r\n// // 파스텔 톤 색상 생성 함수\r\n// const generatePastelColor = () => {\r\n//   const r = Math.floor((Math.random() * 127) + 127); // 127~254\r\n//   const g = Math.floor((Math.random() * 127) + 127); // 127~254\r\n//   const b = Math.floor((Math.random() * 127) + 127); // 127~254\r\n//   return `rgb(${r}, ${g}, ${b})`;\r\n// };\r\n\r\n// const GanttChart = ({ project }) => {\r\n//   const initialTasks = [\r\n//     { id: 1, name: 'Design Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 8), progress: 100 },\r\n//     { id: 2, name: 'Development Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 9), progress: 75 },\r\n//     { id: 3, name: 'Testing Phase', start: new Date(2025, 1, 5), end: new Date(2025, 1, 10), progress: 30 },\r\n//   ];\r\n\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [viewMode, setViewMode] = useState('week'); // 현재 보기 모드 (week, month, year)\r\n//   const [currentMonth, setCurrentMonth] = useState(new Date());\r\n//   const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\r\n//   const today = new Date();\r\n\r\n\r\n//   useEffect(() => {\r\n\r\n//     if (!project) {\r\n//       setTasks([]); // ✅ 프로젝트 없을 경우 빈 상태 유지\r\n//       return;\r\n//     }\r\n\r\n//     console.log(\"📌 선택된 프로젝트:\", project.name); // ✅ 콘솔에서 프로젝트 이름 확인\r\n\r\n//     const savedColors = JSON.parse(localStorage.getItem('taskColors')) || {};\r\n//     const tasksWithColors = initialTasks.map((task) => ({\r\n//       ...task,\r\n//       color: savedColors[task.id] || generatePastelColor(),\r\n//     }));\r\n\r\n//     const newColors = tasksWithColors.reduce((acc, task) => {\r\n//       if (!savedColors[task.id]) {\r\n//         acc[task.id] = task.color;\r\n//       }\r\n//       return acc;\r\n//     }, {});\r\n//     localStorage.setItem('taskColors', JSON.stringify({ ...savedColors, ...newColors }));\r\n\r\n//     setTasks(tasksWithColors);\r\n//   },[project]);\r\n\r\n\r\n\r\n//   const getWeekDates = () => {\r\n//     const today = new Date();\r\n//     const firstDayOfWeek = today.getDate() - today.getDay();\r\n//     return Array.from({ length: 7 }, (_, i) => {\r\n//       const date = new Date(today.getFullYear(), today.getMonth(), firstDayOfWeek + i);\r\n//       return {\r\n//         day: date.toLocaleDateString('en-US', { weekday: 'short' }),\r\n//         date: new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0),\r\n//       };\r\n//     });\r\n//   };\r\n\r\n//   const getMonthDates = () => {\r\n//     const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\r\n//     const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\r\n//     const dates = [];\r\n\r\n//     // 첫 주 빈 칸\r\n//     for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\r\n//       dates.push(null);\r\n//     }\r\n\r\n//     // 해당 월의 모든 날짜\r\n//     for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\r\n//       const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\r\n//       dates.push(date);\r\n//     }\r\n\r\n//     return dates;\r\n//   };\r\n\r\n//   const handlePreviousMonth = () => {\r\n//     setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\r\n//   };\r\n\r\n//   const handleNextMonth = () => {\r\n//     setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\r\n//   };\r\n\r\n//   const getYearMonths = () => {\r\n//     return Array.from({ length: 12 }, (_, index) => {\r\n//       const monthDate = new Date(currentYear, index, 1);\r\n//       return {\r\n//         name: monthDate.toLocaleDateString('en-US', { month: 'short' }).toUpperCase(),\r\n//         date: monthDate,\r\n//       };\r\n//     });\r\n//   };\r\n\r\n//   const isToday = (date) => {\r\n//     // date가 유효한 경우에만 체크\r\n//     return date && today.getFullYear() === date.getFullYear() &&\r\n//       today.getMonth() === date.getMonth() &&\r\n//       today.getDate() === date.getDate();\r\n//   };\r\n\r\n//   const weekDates = getWeekDates();\r\n//   const monthDates = getMonthDates();\r\n//   const yearMonths = getYearMonths();\r\n\r\n//   const handlePreviousYear = () => {\r\n//     setCurrentYear((prevYear) => prevYear - 1);\r\n//   };\r\n\r\n//   const handleNextYear = () => {\r\n//     setCurrentYear((prevYear) => prevYear + 1);\r\n//   };\r\n\r\n//   const isTaskInMonth = (monthDate, task) => {\r\n//     const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\r\n//     const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\r\n//     return task.start <= monthEnd && task.end >= monthStart;\r\n//   };\r\n\r\n//   const isTodayInMonth = (monthDate) => {\r\n//     return (\r\n//       today.getFullYear() === monthDate.getFullYear() &&\r\n//       today.getMonth() === monthDate.getMonth()\r\n//     );\r\n//   };\r\n\r\n//     const isTaskOnDate = (date, task) => {\r\n//     return date >= task.start && date <= task.end;\r\n//   };\r\n\r\n//   const calculateProgressBarStyle = (task) => {\r\n//     const weekStart = weekDates[0].date.getTime();\r\n//     const weekEnd = weekDates[6].date.getTime() + 24 * 60 * 60 * 1000 - 1;\r\n\r\n//     const taskStart = Math.max(task.start.getTime(), weekStart);\r\n//     const taskEnd = Math.min(task.end.getTime() + 24 * 60 * 60 * 1000 - 1, weekEnd);\r\n\r\n//     if (taskEnd < weekStart || taskStart > weekEnd) {\r\n//       return { display: 'none' };\r\n//     }\r\n\r\n//     const totalWeekMs = weekEnd - weekStart + 1;\r\n//     const offset = ((taskStart - weekStart) / totalWeekMs) * 100;\r\n//     const width = ((taskEnd - taskStart) / totalWeekMs) * 100;\r\n\r\n//     return {\r\n//       left: `${offset}%`,\r\n//       width: `${width}%`,\r\n//     };\r\n//   };\r\n\r\n//   const ProgressBar = ({ task, progressBarStyle }) => {\r\n//     return (\r\n//       <div className=\"progress-bar\" style={progressBarStyle}>\r\n//         <div\r\n//           className=\"progress\"\r\n//           style={{\r\n//             width: `${task.progress}%`,\r\n//             backgroundColor: task.color,\r\n//           }}\r\n//         >\r\n//           <span className=\"task-name\">{task.name}</span>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"gantt-chart\">\r\n//             {project ? (\r\n//                 <>\r\n//                     <h2 className=\"project-title\">📌 {project.name}</h2> \r\n//                     <p>프로젝트 시작일: {project.startDate}</p>\r\n//                 </>\r\n//             ) : (\r\n//                 <p>현재 선택된 프로젝트가 없습니다.</p>\r\n//             )}\r\n//       {viewMode === 'week' && (\r\n//         <>\r\n//           <div className=\"calendar\">\r\n//             {weekDates.map((day, index) => (\r\n//             <div key={index} className={`calendar-day ${isToday(day.date) ? 'today' : ''}`}>\r\n//                 <div className=\"day-name\">{day.day}\r\n//                 <div className=\"day-date\">\r\n//                   {day.date.toLocaleDateString('en-US', { day: 'numeric', month: 'short' })}\r\n//                 </div>\r\n//                 </div>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//           <div className=\"task-container\">\r\n//             {tasks.map((task) => {\r\n//               const progressBarStyle = calculateProgressBarStyle(task);\r\n//               return (\r\n//                 <div key={task.id} className=\"task\">\r\n//                   <ProgressBar task={task} progressBarStyle={progressBarStyle} />\r\n//                 </div>\r\n//               );\r\n//             })}\r\n//           </div>\r\n//         </>\r\n//       )}\r\n//       {viewMode === 'month' && (\r\n//         <div className=\"month-calendar\">\r\n//           <div className=\"month-header\">\r\n//             <button className=\"month-nav\" onClick={handlePreviousMonth}>\r\n//               &lt;\r\n//             </button>\r\n//             <div className=\"month-title\">\r\n//               {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\r\n//             </div>\r\n//             <button className=\"month-nav\" onClick={handleNextMonth}>\r\n//               &gt;\r\n//             </button>\r\n//           </div>\r\n//           <div className=\"calendar-grid\">\r\n//             {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\r\n//               <div key={day} className=\"calendar-day-name\">\r\n//                 {day}\r\n//               </div>\r\n//             ))}\r\n//             {monthDates.map((date, index) => (\r\n//               <div key={index} className={`calendar-day ${date && isToday(date) ? 'today' : ''}`}>\r\n//                 {date && (\r\n//                   <>\r\n//                     <div className=\"day-date\">{date.getDate()}</div>\r\n//                     <div className=\"task-indicator-container\">\r\n//                       {tasks.map(\r\n//                         (task) =>\r\n//                           isTaskOnDate(date, task) && (\r\n//                             <div key={task.id} className=\"task-indicator task-bar\" // 막대 모양\r\n//                             style={{ backgroundColor: task.color }}></div>\r\n//                           )\r\n//                       )}\r\n//                     </div>\r\n//                   </>\r\n//                 )}\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {viewMode === 'year' && (\r\n//               <div className=\"year-calendar\">\r\n//                 <div className=\"year-header\">\r\n//                   <button className=\"year-nav\" onClick={handlePreviousYear}>\r\n//                     &lt;\r\n//                   </button>\r\n//                   <div className=\"year-title\">{currentYear}</div>\r\n//                   <button className=\"year-nav\" onClick={handleNextYear}>\r\n//                     &gt;\r\n//                   </button>\r\n//                 </div>\r\n//                 <div className=\"year-grid\">\r\n//                   {yearMonths.map((month, index) => (\r\n//                     <div key={index} className=\"year-month\">\r\n//                       <div className={`month-name ${isTodayInMonth(month.date) ? 'today' : ''}`}>\r\n//                         {month.name}\r\n//                       </div>\r\n//                       <div className=\"month-tasks\">\r\n//                         {tasks.map(\r\n//                           (task) =>\r\n//                             isTaskInMonth(month.date, task) && (\r\n//                               <div\r\n//                                 key={task.id}\r\n//                                 className=\"task-indicator task-circle\"\r\n//                                 style={{ backgroundColor: task.color }}\r\n//                               ></div>\r\n//                             )\r\n//                         )}\r\n//                       </div>\r\n//                     </div>\r\n//                   ))}\r\n//                 </div>\r\n//               </div>\r\n//             )}\r\n//         <div className=\"view-mode-buttons\">\r\n//         <button\r\n//           className={`view-button ${viewMode === 'week' ? 'active' : ''}`}\r\n//           onClick={() => setViewMode('week')}\r\n//         >\r\n//           Week\r\n//         </button>\r\n//         <button\r\n//           className={`view-button ${viewMode === 'month' ? 'active' : ''}`}\r\n//           onClick={() => setViewMode('month')}\r\n//         >\r\n//           Month\r\n//         </button>\r\n//         <button\r\n//           className={`view-button ${viewMode === 'year' ? 'active' : ''}`}\r\n//           onClick={() => setViewMode('year')}\r\n//         >\r\n//           Year\r\n//         </button>\r\n//         </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default GanttChart;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport '../styles/GanttChart.css';\r\n\r\nfunction assignLayers(tasks, weekStart, weekEnd) {\r\n  // 1) 범위 클램핑\r\n  const clampedTasks = tasks\r\n    .map((t) => {\r\n      const startMs = Math.max(t.start.getTime(), weekStart);\r\n      const endMs   = Math.min(t.end.getTime(), weekEnd);\r\n      if (endMs < startMs) return null;\r\n      return { ...t, startMs, endMs };\r\n    })\r\n    .filter(Boolean);\r\n\r\n  // 2) 시작 시간으로 정렬\r\n  clampedTasks.sort((a, b) => a.startMs - b.startMs);\r\n\r\n  // 3) 레이어 계산\r\n  const layers = [];\r\n  clampedTasks.forEach((task) => {\r\n    let placed = false;\r\n    for (let i = 0; i < layers.length; i++) {\r\n      // 레이어 i에 있는 task들과 겹치는지 확인\r\n      const conflict = layers[i].some(\r\n        (t) => !(task.endMs <= t.startMs || task.startMs >= t.endMs)\r\n      );\r\n      if (!conflict) {\r\n        task.layer = i;\r\n        layers[i].push(task);\r\n        placed = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!placed) {\r\n      // 새로운 레이어 추가\r\n      task.layer = layers.length;\r\n      layers.push([task]);\r\n    }\r\n  });\r\n\r\n  // 4) left/width 계산(%)\r\n  const totalWeekMs = weekEnd - weekStart;\r\n  clampedTasks.forEach((task) => {\r\n    task.left = ((task.startMs - weekStart) / totalWeekMs) * 100;\r\n    task.width = ((task.endMs - task.startMs) / totalWeekMs) * 100;\r\n  });\r\n\r\n  return clampedTasks;\r\n}\r\n\r\n\r\n// ✅ 수정: Task 데이터를 props로 받아서 사용하도록 변경\r\nconst GanttChart = ({ tasks }) => {\r\n  const [viewMode, setViewMode] = useState('week'); // ✅ 현재 보기 모드 (week, month, year)\r\n  const [currentWeekStart, setCurrentWeekStart] = useState(getStartOfWeek(new Date()));\r\n  const [currentMonth, setCurrentMonth] = useState(new Date());\r\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\r\n  const today = new Date();\r\n\r\n  const isTaskOnDate = (date, task) => {\r\n    const taskStart = new Date(task.start).setHours(0, 0, 0, 0);\r\n    const taskEnd = new Date(task.end).setHours(23, 59, 59, 999);\r\n    const checkDate = new Date(date).setHours(12, 0, 0, 0); // ✅ 날짜 중앙으로 설정 (비교 오류 방지)\r\n  \r\n    return checkDate >= taskStart && checkDate <= taskEnd;\r\n  };\r\n\r\n  // 예시: 간단히 주간 범위 구하기\r\n  const weekStart = currentWeekStart.getTime();\r\n  const weekEnd   = (() => {\r\n    const wEnd = new Date(currentWeekStart);\r\n    wEnd.setDate(wEnd.getDate() + 6); // 일요일\r\n    wEnd.setHours(23, 59, 59, 999);\r\n    return wEnd.getTime();\r\n  })();\r\n\r\n\r\n  // Task 데이터를 받아서 Gantt 차트에 반영\r\n  // const formattedTasks = tasks.map((task) => ({\r\n  //   id: task.id,\r\n  //   name: task.name,\r\n  //   start: new Date(task.startDate),\r\n  //   end: new Date(new Date(task.dueDate).setHours(23, 59, 59, 999)), // ✅ 마감일 23:59:59로 설정\r\n  //    color: task.color || \"#ff99a5\", // ✅ 색상이 없을 경우 기본값 지정\r\n  //   //progress: 50, // ✅ 진행률 기본값 (추후 백엔드에서 가져오도록 수정 가능)\r\n  // }));\r\n  const formattedTasks = tasks.map((task) => ({\r\n    ...task,\r\n    start: new Date(task.startDate),\r\n    end:   new Date(task.dueDate),\r\n  }));\r\n \r\n  // 주간 화면 렌더링\r\n  if (viewMode === 'week') {\r\n    // (1) 전체 레이어 수만큼 높이를 잡아야 함\r\n    const maxLayerIndex = Math.max(...layeredTasks.map(t => t.layer), 0);\r\n    const rowHeight = 40;  // 한 줄 높이\r\n    const gap = 10;        // 줄 사이 간격\r\n    const containerHeight = (maxLayerIndex + 1) * (rowHeight + gap);\r\n\r\n    return (\r\n      <div className=\"gantt-chart\">\r\n        <button onClick={() => setViewMode('month')}>Month</button>\r\n        {/* 주간 표시 영역 */}\r\n        <div\r\n          className=\"task-container\"\r\n          style={{ position: 'relative', height: containerHeight }}\r\n        >\r\n          {layeredTasks.map((task) => {\r\n            return (\r\n              <div\r\n                key={task.id}\r\n                className=\"progress-bar\"\r\n                style={{\r\n                  position: 'absolute',\r\n                  top: `${task.layer * (rowHeight + gap)}px`,\r\n                  left: `${task.left}%`,\r\n                  width: `${task.width}%`,\r\n                  height: `${rowHeight}px`,\r\n                  backgroundColor: task.color || '#4caf50',\r\n                }}\r\n              >\r\n                <div className=\"progress\">\r\n                  <span className=\"task-name\">{task.name}</span>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // ✅ 현재 주의 시작 날짜 계산\r\n  function getStartOfWeek(date) {\r\n    const start = new Date(date);\r\n     const dayOfWeek = start.getDay(); // 현재 요일 (0: 일요일, 1: 월요일, ..., 6: 토요일)\r\n      const diff = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // 월요일을 기준\r\n    start.setDate(start.getDate() + diff);\r\n    start.setHours(0, 0, 0, 0);\r\n    return start;\r\n  }\r\n\r\n  // 주간 날짜 목록 생성\r\n  const getWeekDates = () => {\r\n    return Array.from({ length: 7 }, (_, i) => {\r\n      const date = new Date(currentWeekStart); // ✅ 현재 주 시작(월요일)에서 시작\r\n      date.setDate(currentWeekStart.getDate() + i); // ✅ 하루씩 더하면서 한 주를 채움\r\n\r\n      return {\r\n        day: date.toLocaleDateString('en-US', { weekday: 'short' }), // 'Mon', 'Tue' 형태\r\n        date: new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0), // 00:00:00 초기화\r\n      };\r\n    });\r\n  };\r\n\r\n  // ✅ 월간 날짜 목록 생성\r\n    const getMonthDates = () => {\r\n      const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\r\n      const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\r\n      const dates = [];\r\n\r\n      for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\r\n        dates.push(null);\r\n      }\r\n\r\n      for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\r\n        const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\r\n        dates.push(date);\r\n      }\r\n\r\n      return dates;\r\n    };\r\n    // ✅ 이전/다음 주 & 월 이동 기능\r\n      const handlePreviousWeek = () => setCurrentWeekStart(new Date(currentWeekStart.setDate(currentWeekStart.getDate() - 7)));\r\n      const handleNextWeek = () => setCurrentWeekStart(new Date(currentWeekStart.setDate(currentWeekStart.getDate() + 7)));\r\n      const handlePreviousMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\r\n      const handleNextMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\r\n        const handlePreviousYear = () => setCurrentYear(currentYear - 1);\r\n        const handleNextYear = () => setCurrentYear(currentYear + 1);\r\n\r\n\r\n   // Year 뷰 - 12개월 목록 생성\r\n    const getYearMonths = () => {\r\n      return Array.from({ length: 12 }, (_, index) => {\r\n        const monthDate = new Date(currentYear, index, 1);\r\n        return {\r\n          name: monthDate.toLocaleDateString('en-US', { month: 'short' }).toUpperCase(),\r\n          date: monthDate,\r\n        };\r\n      });\r\n    };\r\n\r\n     // Task가 특정 월에 포함되는지 확인하는 함수\r\n      const isTaskInMonth = (monthDate, task) => {\r\n        const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\r\n        const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\r\n        return task.start <= monthEnd && task.end >= monthStart;\r\n      };\r\n\r\nconst calculateProgressBarStyle = (task) => {\r\n  // 1) 이번 주 월요일(0시) ~ 일요일(23:59:59) 범위를 구함\r\n   const weekStart = currentWeekStart.getTime(); // 월요일 00:00:00\r\n   const weekEnd = new Date(weekStart);\r\n   weekEnd.setDate(weekEnd.getDate() + 6);       // 일요일\r\n   weekEnd.setHours(23, 59, 59, 999);           // 일요일 23:59:59.999\r\n\r\n  // 2) Task의 시작·종료 시점을 밀리초로 변환\r\n    const taskStart = new Date(task.start).getTime();\r\n    const taskEnd   = new Date(task.end).getTime();\r\n\r\n    // 3) 주 범위를 벗어나는 부분은 \"잘라\"서 계산 (Clamping)\r\n    const clampedStart = Math.max(taskStart, weekStart);\r\n    const clampedEnd   = Math.min(taskEnd, weekEnd.getTime());\r\n\r\n    // 4) 완전히 벗어나면 표시 X\r\n    if (clampedEnd < weekStart || clampedStart > weekEnd.getTime()) {\r\n      return { display: 'none' };\r\n    }\r\n\r\n    // 5) 실제 표시할 범위(%) 계산\r\n    const totalWeekMs = weekEnd.getTime() - weekStart;\r\n    const offset = ((clampedStart - weekStart) / totalWeekMs) * 100;\r\n    const width  = ((clampedEnd   - clampedStart) / totalWeekMs) * 100;\r\n\r\n    return {\r\n      left: `${offset}%`,\r\n      width: `${width}%`,\r\n      backgroundColor: task.color || \"#4caf50\",\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"gantt-chart\">\r\n      <div className=\"view-mode-buttons\">\r\n        <button className={`view-button ${viewMode === 'week' ? 'active' : ''}`} onClick={() => setViewMode('week')}>Week</button>\r\n        <button className={`view-button ${viewMode === 'month' ? 'active' : ''}`} onClick={() => setViewMode('month')}>Month</button>\r\n                <button className={`view-button ${viewMode === 'year' ? 'active' : ''}`} onClick={() => setViewMode('year')}>Year</button>\r\n      </div>\r\n\r\n      {viewMode === 'week' && (\r\n        <>\r\n          <div className=\"week-navigation\">\r\n            <button onClick={handlePreviousWeek}>&lt;</button>\r\n            <span>\r\n              {currentWeekStart.toLocaleDateString('en-US', { month: 'long', day: 'numeric' })} ~{\" \"}\r\n              {new Date(currentWeekStart.getTime() + 6 * 24 * 60 * 60 * 1000).toLocaleDateString('en-US', { month: 'long', day: 'numeric' })}\r\n            </span>\r\n            <button onClick={handleNextWeek}>&gt;</button>\r\n          </div>\r\n\r\n          <div className=\"calendar\">\r\n            {getWeekDates().map((day, index) => (\r\n              <div key={index} className=\"calendar-day\">\r\n                <div className=\"day-name\">{day.day}</div>\r\n                <div className=\"day-date\">{day.date.toLocaleDateString('en-US', { day: 'numeric', month: 'short' })}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"task-container\">\r\n            {formattedTasks.map((task) => {\r\n              const progressBarStyle = calculateProgressBarStyle(task);\r\n              return (\r\n                <div key={task.id} className=\"task\">\r\n                  <div className=\"progress-bar\" style={progressBarStyle}>\r\n                    <div className=\"progress\">\r\n                      <span className=\"task-name\">{task.name}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {viewMode === 'month' && (\r\n        <div className=\"month-calendar\">\r\n          <div className=\"month-header\">\r\n            <button className=\"month-nav\" onClick={handlePreviousMonth}>&lt;</button>\r\n            <div className=\"month-title\">{currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}</div>\r\n            <button className=\"month-nav\" onClick={handleNextMonth}>&gt;</button>\r\n          </div>\r\n\r\n          <div className=\"calendar-grid\">\r\n            {getMonthDates().map((date, index) => (\r\n              <div key={index} className=\"calendar-day\">\r\n                {date && (\r\n                  <>\r\n                    <div className=\"day-date\">{date.getDate()}</div>\r\n                    <div className=\"task-indicator-container\">\r\n                      {formattedTasks.map((task) => {\r\n                        return isTaskOnDate(date, task) ? (\r\n                          <div key={task.id} className=\"task-indicator task-bar\" style={{ backgroundColor: task.color }}></div>\r\n                        ) : null;\r\n                      })}\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {viewMode === 'year' && (\r\n              <div className=\"year-calendar\">\r\n                <div className=\"year-header\">\r\n                  <button className=\"year-nav\" onClick={handlePreviousYear}>&lt;</button>\r\n                  <div className=\"year-title\">{currentYear}</div>\r\n                  <button className=\"year-nav\" onClick={handleNextYear}>&gt;</button>\r\n                </div>\r\n\r\n                <div className=\"year-grid\">\r\n                  {getYearMonths().map((month, index) => (\r\n                    <div key={index} className=\"year-month\">\r\n                      <div className=\"month-name\">{month.name}</div>\r\n                      <div className=\"month-tasks\">\r\n                        {formattedTasks.map((task) => {\r\n                          return isTaskInMonth(month.date, task) ? (\r\n                            <div key={task.id} className=\"task-indicator task-circle\" style={{ backgroundColor: task.color }}></div>\r\n                          ) : null;\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GanttChart;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}