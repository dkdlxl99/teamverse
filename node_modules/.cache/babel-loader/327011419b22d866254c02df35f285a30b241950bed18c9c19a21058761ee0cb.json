{"ast":null,"code":"var _jsxFileName = \"/Users/woo/Documents/git_local/react/0213/src/components/GanttChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/GanttChart.css';\n\n// ✅ 수정: Task 데이터를 props로 받아서 사용하도록 변경\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GanttChart = ({\n  tasks\n}) => {\n  _s();\n  const [viewMode, setViewMode] = useState('week'); // ✅ 현재 보기 모드 (week, month, year)\n  const [currentWeekStart, setCurrentWeekStart] = useState(getStartOfWeek(new Date()));\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const today = new Date();\n  const isTaskOnDate = (date, task) => {\n    const taskStart = new Date(task.start).setHours(0, 0, 0, 0);\n    const taskEnd = new Date(task.end).setHours(23, 59, 59, 999);\n    const checkDate = new Date(date).setHours(12, 0, 0, 0); // ✅ 날짜 중앙으로 설정 (비교 오류 방지)\n\n    return checkDate >= taskStart && checkDate <= taskEnd;\n  };\n\n  // Task 데이터를 받아서 Gantt 차트에 반영\n  const formattedTasks = tasks.map(task => ({\n    id: task.id,\n    name: task.name,\n    start: new Date(task.startDate),\n    // ❌ startDate를 직접 변환 (undefined 가능성 있음)\n    end: new Date(task.dueDate),\n    // ❌ dueDate를 직접 변환 (undefined 가능성 있음)\n    color: task.color || \"#ff99a5\"\n  }));\n  console.log(formattedTasks);\n  // ✅ 현재 주의 시작 날짜 계산\n  function getStartOfWeek(date) {\n    const start = new Date(date);\n    const dayOfWeek = start.getDay(); // 현재 요일 (0: 일요일, 1: 월요일, ..., 6: 토요일)\n    const diff = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // 월요일을 기준\n    start.setDate(start.getDate() + diff);\n    start.setHours(0, 0, 0, 0);\n    return start;\n  }\n\n  // 주간 날짜 목록 생성\n  const getWeekDates = () => {\n    return Array.from({\n      length: 7\n    }, (_, i) => {\n      const date = new Date(currentWeekStart); // ✅ 현재 주 시작(월요일)에서 시작\n      date.setDate(currentWeekStart.getDate() + i); // ✅ 하루씩 더하면서 한 주를 채움\n      date.setHours(0, 0, 0, 0); // ✅ 00:00:00으로 초기화\n      return {\n        day: date.toLocaleDateString('en-US', {\n          weekday: 'short'\n        }),\n        // 'Mon', 'Tue' 형태\n        date: new Date(date) // ✅ Date 객체로 변환\n      };\n    });\n  };\n\n  // ✅ 월간 날짜 목록 생성\n  const getMonthDates = () => {\n    const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n    const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n    const dates = [];\n    for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\n      dates.push(null);\n    }\n    for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\n      const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\n      dates.push(date);\n    }\n    return dates;\n  };\n  // ✅ 이전/다음 주 & 월 이동 기능\n  const handlePreviousWeek = () => setCurrentWeekStart(new Date(currentWeekStart.setDate(currentWeekStart.getDate() - 7)));\n  const handleNextWeek = () => setCurrentWeekStart(new Date(currentWeekStart.setDate(currentWeekStart.getDate() + 7)));\n  const handlePreviousMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\n  const handleNextMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\n  const handlePreviousYear = () => setCurrentYear(currentYear - 1);\n  const handleNextYear = () => setCurrentYear(currentYear + 1);\n\n  // Year 뷰 - 12개월 목록 생성\n  const getYearMonths = () => {\n    return Array.from({\n      length: 12\n    }, (_, index) => {\n      const monthDate = new Date(currentYear, index, 1);\n      return {\n        name: monthDate.toLocaleDateString('en-US', {\n          month: 'short'\n        }).toUpperCase(),\n        date: monthDate\n      };\n    });\n  };\n\n  // Task가 특정 월에 포함되는지 확인하는 함수\n  const isTaskInMonth = (monthDate, task) => {\n    const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n    const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\n    return task.start <= monthEnd && task.end >= monthStart;\n  };\n  const calculateProgressBarStyle = (task, index) => {\n    const taskStart = new Date(task.start);\n    const taskEnd = new Date(task.end);\n    const weekStart = new Date(currentWeekStart);\n    weekStart.setHours(0, 0, 0, 0);\n    const weekEnd = new Date(weekStart);\n    weekEnd.setDate(weekEnd.getDate() + 6);\n    weekEnd.setHours(23, 59, 59, 999);\n\n    // ✅ 주간 범위를 벗어난 Task 숨기기\n    if (taskEnd < weekStart || taskStart > weekEnd) {\n      console.log(`❌ Task ${task.name} is out of range`);\n      return {\n        display: 'none'\n      };\n    }\n\n    // ✅ 현재 주간에 맞게 `taskStart`, `taskEnd` 조정\n    let adjustedTaskStart = new Date(Math.max(taskStart.getTime(), weekStart.getTime()));\n    let adjustedTaskEnd = new Date(Math.min(taskEnd.getTime(), weekEnd.getTime()));\n    adjustedTaskStart.setHours(0, 0, 0, 0);\n    adjustedTaskEnd.setHours(23, 59, 59, 999);\n    const totalDaysInWeek = 7;\n    const dayWidth = 100 / totalDaysInWeek;\n\n    // ✅ 시작 위치 계산\n    const offsetDays = (adjustedTaskStart - weekStart) / (1000 * 60 * 60 * 24);\n    const offset = offsetDays * dayWidth;\n\n    // ✅ 정확한 기간 계산\n    const taskDurationDays = Math.floor((adjustedTaskEnd - adjustedTaskStart) / (1000 * 60 * 60 * 24)) + 1;\n    const width = Math.min(100 - offset, taskDurationDays * dayWidth);\n    return {\n      position: 'absolute',\n      top: `${60 + index * 30}px`,\n      left: `${offset}%`,\n      width: `${width}%`,\n      backgroundColor: task.color || \"#ff99a5\",\n      // ✅ 선택한 색상 적용\n      height: '12px',\n      borderRadius: '6px'\n    };\n  };\n  useEffect(() => {}, [viewMode, currentWeekStart, tasks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gantt-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"view-mode-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'week' ? 'active' : ''}`,\n        onClick: () => setViewMode('week'),\n        children: \"Week\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'month' ? 'active' : ''}`,\n        onClick: () => setViewMode('month'),\n        children: \"Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-button ${viewMode === 'year' ? 'active' : ''}`,\n        onClick: () => setViewMode('year'),\n        children: \"Year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), viewMode === 'week' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"week-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePreviousWeek,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [currentWeekStart.toLocaleDateString('en-US', {\n            month: 'long',\n            day: 'numeric'\n          }), \" ~\", \" \", new Date(currentWeekStart.getTime() + 6 * 24 * 60 * 60 * 1000).toLocaleDateString('en-US', {\n            month: 'long',\n            day: 'numeric'\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextWeek,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar\",\n        children: [getWeekDates().map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-day\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"day-name\",\n            children: day.day\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"day-date\",\n            children: day.date.toLocaleDateString('en-US', {\n              day: 'numeric',\n              month: 'short'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 7\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 5\n        }, this)), formattedTasks.map((task, index) => {\n          const progressBarStyle = calculateProgressBarStyle(task, index);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar\",\n            style: progressBarStyle,\n            children: task.name\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 9\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), viewMode === 'month' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"month-calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"month-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"month-nav\",\n          onClick: handlePreviousMonth,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"month-title\",\n          children: currentMonth.toLocaleDateString('en-US', {\n            month: 'long',\n            year: 'numeric'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"month-nav\",\n          onClick: handleNextMonth,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-grid\",\n        children: getMonthDates().map((date, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-day\",\n          children: date && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"day-date\",\n              children: date.getDate()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-indicator-container\",\n              children: formattedTasks.map(task => {\n                return isTaskOnDate(date, task) ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"task-indicator task-bar\",\n                  style: {\n                    backgroundColor: task.color\n                  }\n                }, task.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 27\n                }, this) : null;\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }, this), viewMode === 'year' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"year-calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"year-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"year-nav\",\n          onClick: handlePreviousYear,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"year-title\",\n          children: currentYear\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"year-nav\",\n          onClick: handleNextYear,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"year-grid\",\n        children: getYearMonths().map((month, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"year-month\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"month-name\",\n            children: month.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"month-tasks\",\n            children: formattedTasks.map(task => {\n              return isTaskInMonth(month.date, task) ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"task-indicator task-circle\",\n                style: {\n                  backgroundColor: task.color\n                }\n              }, task.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 23\n              }, this) : null;\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(GanttChart, \"oklCmDbLLiD5ZADlE+MSSeb2ekI=\");\n_c = GanttChart;\nexport default GanttChart;\nvar _c;\n$RefreshReg$(_c, \"GanttChart\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","GanttChart","tasks","_s","viewMode","setViewMode","currentWeekStart","setCurrentWeekStart","getStartOfWeek","Date","currentMonth","setCurrentMonth","currentYear","setCurrentYear","getFullYear","today","isTaskOnDate","date","task","taskStart","start","setHours","taskEnd","end","checkDate","formattedTasks","map","id","name","startDate","dueDate","color","console","log","dayOfWeek","getDay","diff","setDate","getDate","getWeekDates","Array","from","length","_","i","day","toLocaleDateString","weekday","getMonthDates","firstDayOfMonth","getMonth","lastDayOfMonth","dates","push","handlePreviousWeek","handleNextWeek","handlePreviousMonth","handleNextMonth","handlePreviousYear","handleNextYear","getYearMonths","index","monthDate","month","toUpperCase","isTaskInMonth","monthStart","monthEnd","calculateProgressBarStyle","weekStart","weekEnd","display","adjustedTaskStart","Math","max","getTime","adjustedTaskEnd","min","totalDaysInWeek","dayWidth","offsetDays","offset","taskDurationDays","floor","width","position","top","left","backgroundColor","height","borderRadius","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","progressBarStyle","style","year","_c","$RefreshReg$"],"sources":["/Users/woo/Documents/git_local/react/0213/src/components/GanttChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../styles/GanttChart.css';\n\n\n// ✅ 수정: Task 데이터를 props로 받아서 사용하도록 변경\nconst GanttChart = ({ tasks }) => {\n  const [viewMode, setViewMode] = useState('week'); // ✅ 현재 보기 모드 (week, month, year)\n  const [currentWeekStart, setCurrentWeekStart] = useState(getStartOfWeek(new Date()));\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const today = new Date();\n\n  const isTaskOnDate = (date, task) => {\n    const taskStart = new Date(task.start).setHours(0, 0, 0, 0);\n    const taskEnd = new Date(task.end).setHours(23, 59, 59, 999);\n    const checkDate = new Date(date).setHours(12, 0, 0, 0); // ✅ 날짜 중앙으로 설정 (비교 오류 방지)\n\n    return checkDate >= taskStart && checkDate <= taskEnd;\n  };\n\n  // Task 데이터를 받아서 Gantt 차트에 반영\n  const formattedTasks = tasks.map((task) => ({\n    id: task.id,\n    name: task.name,\n    start: new Date(task.startDate),  // ❌ startDate를 직접 변환 (undefined 가능성 있음)\n    end: new Date(task.dueDate),      // ❌ dueDate를 직접 변환 (undefined 가능성 있음)\n    color: task.color || \"#ff99a5\",\n    \n}));\n\nconsole.log(formattedTasks);\n  // ✅ 현재 주의 시작 날짜 계산\n  function getStartOfWeek(date) {\n    const start = new Date(date);\n    const dayOfWeek = start.getDay(); // 현재 요일 (0: 일요일, 1: 월요일, ..., 6: 토요일)\n    const diff = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // 월요일을 기준\n    start.setDate(start.getDate() + diff);\n    start.setHours(0, 0, 0, 0);\n    return start;\n  }\n\n  // 주간 날짜 목록 생성\n  const getWeekDates = () => {\n    return Array.from({ length: 7 }, (_, i) => {\n      const date = new Date(currentWeekStart); // ✅ 현재 주 시작(월요일)에서 시작\n      date.setDate(currentWeekStart.getDate() + i); // ✅ 하루씩 더하면서 한 주를 채움\n      date.setHours(0, 0, 0, 0); // ✅ 00:00:00으로 초기화\n      return {\n        day: date.toLocaleDateString('en-US', { weekday: 'short' }), // 'Mon', 'Tue' 형태\n        date: new Date(date), // ✅ Date 객체로 변환\n      };\n    });\n  };\n\n  // ✅ 월간 날짜 목록 생성\n  const getMonthDates = () => {\n    const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n    const lastDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n    const dates = [];\n\n    for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\n      dates.push(null);\n    }\n\n    for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\n      const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);\n      dates.push(date);\n    }\n\n    return dates;\n  };\n  // ✅ 이전/다음 주 & 월 이동 기능\n  const handlePreviousWeek = () => setCurrentWeekStart(new Date(currentWeekStart.setDate(currentWeekStart.getDate() - 7)));\n  const handleNextWeek = () => setCurrentWeekStart(new Date(currentWeekStart.setDate(currentWeekStart.getDate() + 7)));\n  const handlePreviousMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1));\n  const handleNextMonth = () => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1));\n  const handlePreviousYear = () => setCurrentYear(currentYear - 1);\n  const handleNextYear = () => setCurrentYear(currentYear + 1);\n\n\n  // Year 뷰 - 12개월 목록 생성\n  const getYearMonths = () => {\n    return Array.from({ length: 12 }, (_, index) => {\n      const monthDate = new Date(currentYear, index, 1);\n      return {\n        name: monthDate.toLocaleDateString('en-US', { month: 'short' }).toUpperCase(),\n        date: monthDate,\n      };\n    });\n  };\n\n  // Task가 특정 월에 포함되는지 확인하는 함수\n  const isTaskInMonth = (monthDate, task) => {\n    const monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n    const monthEnd = new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0);\n    return task.start <= monthEnd && task.end >= monthStart;\n  };\n\n  \n  const calculateProgressBarStyle = (task, index) => {\n\n    const taskStart = new Date(task.start);\n    const taskEnd = new Date(task.end);\n\n    const weekStart = new Date(currentWeekStart);\n    weekStart.setHours(0, 0, 0, 0);\n    const weekEnd = new Date(weekStart);\n    weekEnd.setDate(weekEnd.getDate() + 6);\n    weekEnd.setHours(23, 59, 59, 999);\n\n    // ✅ 주간 범위를 벗어난 Task 숨기기\n    if (taskEnd < weekStart || taskStart > weekEnd) {\n        console.log(`❌ Task ${task.name} is out of range`);\n        return { display: 'none' };\n    }\n\n    // ✅ 현재 주간에 맞게 `taskStart`, `taskEnd` 조정\n    let adjustedTaskStart = new Date(Math.max(taskStart.getTime(), weekStart.getTime()));\n    let adjustedTaskEnd = new Date(Math.min(taskEnd.getTime(), weekEnd.getTime()));\n\n    adjustedTaskStart.setHours(0, 0, 0, 0);\n    adjustedTaskEnd.setHours(23, 59, 59, 999);\n\n    const totalDaysInWeek = 7;\n    const dayWidth = 100 / totalDaysInWeek;\n\n    // ✅ 시작 위치 계산\n    const offsetDays = (adjustedTaskStart - weekStart) / (1000 * 60 * 60 * 24);\n    const offset = offsetDays * dayWidth;\n\n    // ✅ 정확한 기간 계산\n    const taskDurationDays = Math.floor((adjustedTaskEnd - adjustedTaskStart) / (1000 * 60 * 60 * 24)) + 1;\n    const width = Math.min(100 - offset, taskDurationDays * dayWidth);\n    return {\n        position: 'absolute',\n        top: `${60 + index * 30}px`,\n        left: `${offset}%`,\n        width: `${width}%`,\n        backgroundColor: task.color || \"#ff99a5\", // ✅ 선택한 색상 적용\n        height: '12px',\n        borderRadius: '6px',\n    };\n};\n\n\n\n\n  useEffect(() => {\n  }, [viewMode, currentWeekStart, tasks]);\n\n  return (\n    <div className=\"gantt-chart\">\n      <div className=\"view-mode-buttons\">\n        <button className={`view-button ${viewMode === 'week' ? 'active' : ''}`} onClick={() => setViewMode('week')}>Week</button>\n        <button className={`view-button ${viewMode === 'month' ? 'active' : ''}`} onClick={() => setViewMode('month')}>Month</button>\n        <button className={`view-button ${viewMode === 'year' ? 'active' : ''}`} onClick={() => setViewMode('year')}>Year</button>\n      </div>\n\n      {viewMode === 'week' && (\n        <>\n          <div className=\"week-navigation\">\n            <button onClick={handlePreviousWeek}>&lt;</button>\n            <span>\n              {currentWeekStart.toLocaleDateString('en-US', { month: 'long', day: 'numeric' })} ~{\" \"}\n              {new Date(currentWeekStart.getTime() + 6 * 24 * 60 * 60 * 1000).toLocaleDateString('en-US', { month: 'long', day: 'numeric' })}\n            </span>\n            <button onClick={handleNextWeek}>&gt;</button>\n          </div>\n\n          <div className=\"calendar\">\n  {getWeekDates().map((day, index) => (\n    <div key={index} className=\"calendar-day\">\n      <div className=\"day-name\">{day.day}</div>\n      <div className=\"day-date\">{day.date.toLocaleDateString('en-US', { day: 'numeric', month: 'short' })}</div>\n    </div>\n  ))}\n\n  {/* ✅ 하나의 progress-bar로 이어지게 표시 */}\n  {formattedTasks.map((task, index) => {\n    const progressBarStyle = calculateProgressBarStyle(task, index);\n    return (\n        <div key={task.id} className=\"progress-bar\" style={progressBarStyle}>\n            {task.name}\n        </div>\n    );\n})}\n</div>\n\n\n\n          {/* <div className=\"task-container\">\n            {formattedTasks.map((task) => {\n                const progressBarStyle = calculateProgressBarStyle(task);\n                return (\n                    <div key={task.id} className=\"task\">\n                        <div className=\"progress-bar\" style={progressBarStyle}>\n                            <div className=\"progress\">\n                                <span className=\"task-name\">{task.name}</span>\n                            </div>\n                        </div>\n                    </div>\n                );\n            })}\n        </div> */}\n        </>\n      )}\n\n      {viewMode === 'month' && (\n        <div className=\"month-calendar\">\n          <div className=\"month-header\">\n            <button className=\"month-nav\" onClick={handlePreviousMonth}>&lt;</button>\n            <div className=\"month-title\">{currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}</div>\n            <button className=\"month-nav\" onClick={handleNextMonth}>&gt;</button>\n          </div>\n\n          <div className=\"calendar-grid\">\n            {getMonthDates().map((date, index) => (\n              <div key={index} className=\"calendar-day\">\n                {date && (\n                  <>\n                    <div className=\"day-date\">{date.getDate()}</div>\n                    <div className=\"task-indicator-container\">\n                      {formattedTasks.map((task) => {\n                        return isTaskOnDate(date, task) ? (\n                          <div key={task.id} className=\"task-indicator task-bar\" style={{ backgroundColor: task.color }}></div>\n                        ) : null;\n                      })}\n                    </div>\n                  </>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {viewMode === 'year' && (\n        <div className=\"year-calendar\">\n          <div className=\"year-header\">\n            <button className=\"year-nav\" onClick={handlePreviousYear}>&lt;</button>\n            <div className=\"year-title\">{currentYear}</div>\n            <button className=\"year-nav\" onClick={handleNextYear}>&gt;</button>\n          </div>\n\n          <div className=\"year-grid\">\n            {getYearMonths().map((month, index) => (\n              <div key={index} className=\"year-month\">\n                <div className=\"month-name\">{month.name}</div>\n                <div className=\"month-tasks\">\n                  {formattedTasks.map((task) => {\n                    return isTaskInMonth(month.date, task) ? (\n                      <div key={task.id} className=\"task-indicator task-circle\" style={{ backgroundColor: task.color }}></div>\n                    ) : null;\n                  })}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GanttChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}