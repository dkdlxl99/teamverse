{"ast":null,"code":"var _jsxFileName = \"/Users/woo/Documents/git_local/react/0213/src/pages/MainPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Sidebar from \"../components/Sidebar\";\nimport GanttChart from \"../components/GanttChart\";\nimport Chatbox from \"../components/Chatbox\";\nimport Dashboard from \"../components/Dashboard\";\nimport TaskBoard from \"../components/TaskBoard\";\nimport \"../styles/MainPage.css\";\nimport axios from \"axios\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { getAccessToken } from \"../utils/authUtils\";\nimport InviteList from \"../components/InviteList\"; // ✅ 초대 목록 컴포넌트 추가\nimport { stompClient } from \"../api/websocket\"; // ✅ WebSocket 설정 불러오기\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainPage = () => {\n  _s();\n  const [projects, setProjects] = useState([]); // ✅ 프로젝트 목록 저장\n  const [selectedProject, setSelectedProject] = useState(null); // ✅ 선택한 프로젝트 저장\n  const [tasks, setTasks] = useState([]); // ✅ 선택한 프로젝트의 작업 목록\n  const [showModal, setShowModal] = useState(false);\n  const [projectName, setProjectName] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const {\n    userId\n  } = useParams();\n  const navigate = useNavigate(); // ✅ 페이지 이동\n  const [projectDescription, setProjectDescription] = useState(\"\"); // ✅ 설명 추가\n  const [invites, setInvites] = useState([]); // ✅ 초대 목록 상태 추가\n\n  // ✅ 로그인한 사용자의 프로젝트 목록 불러오기\n  const fetchProjects = async () => {\n    const token = getAccessToken();\n    if (!token) {\n      alert(\"로그인이 필요합니다.\");\n      navigate(\"/login\");\n      return;\n    }\n    try {\n      const response = await axios.get(\"http://localhost:8082/api/user/projects\", {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        },\n        withCredentials: true\n      });\n      console.log(\"✅ 서버에서 가져온 프로젝트 목록:\", response.data);\n      if (response.data && response.data.length > 0) {\n        const formattedProjects = response.data.map(project => ({\n          ...project,\n          name: project.name ? project.name : \"🚨 이름 없음\"\n        }));\n        setProjects(formattedProjects);\n\n        // 🔹 첫 번째 프로젝트를 자동으로 선택\n        setSelectedProject(formattedProjects[0]);\n        fetchTasks(formattedProjects[0].id);\n      }\n    } catch (error) {\n      var _error$response;\n      console.error(\"❌ 프로젝트 목록 불러오기 실패:\", error);\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        localStorage.removeItem(\"accessToken\");\n        sessionStorage.removeItem(\"accessToken\");\n        navigate(\"/login\");\n      }\n    }\n  };\n\n  // 새로운 Access Token 발급\n  const refreshAccessToken = async () => {\n    const refreshToken = localStorage.getItem(\"refreshToken\");\n    if (!refreshToken) {\n      navigate(\"/login\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://localhost:8082/api/auth/refresh\", {\n        refreshToken\n      });\n      localStorage.setItem(\"accessToken\", response.data.accessToken);\n      sessionStorage.setItem(\"accessToken\", response.data.accessToken); // ✅ 추가: sessionStorage에도 저장\n      console.log(\"✅ 새 Access Token 발급:\", response.data.accessToken);\n      return response.data.accessToken;\n    } catch (error) {\n      console.error(\"🚨 토큰 갱신 실패, 다시 로그인 필요:\", error);\n      navigate(\"/login\");\n    }\n  };\n\n  // ✅ 새로운 프로젝트 생성\n  const handleCreateProject = async () => {\n    const token = getAccessToken(); // sessionStorage에서도 accessToken을 가져올 수 있도록 변경\n\n    if (!token) {\n      alert(\"로그인이 필요합니다.\");\n      navigate(\"/login\");\n      return;\n    }\n    try {\n      // 사용자가 입력한 값 반영 (빈 값이면 null 처리)\n      const newProjectData = {\n        name: projectName.trim() !== \"\" ? projectName.trim() : null,\n        description: projectDescription.trim() !== \"\" ? projectDescription.trim() : null,\n        startDate: new Date().toISOString().split(\"T\")[0]\n      };\n      const response = await axios.post(\"http://localhost:8082/api/user/projects\", newProjectData, {\n        // { name: projectName, startDate: new Date().toISOString().split(\"T\")[0] },\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        },\n        withCredentials: true\n      });\n      console.log(\"✅ 새 프로젝트 생성 응답:\", response.data);\n      // ✅ 프로젝트 생성 후 Task 페이지로 이동\n      navigate(`/task?projectId=${response.data.id}`);\n\n      // setProjects([...projects, response.data]);\n      // setSelectedProject(response.data);\n      // localStorage.setItem(\"selectedProjectId\", response.data.id);\n      // setShowModal(false);\n      // ✅ 프로젝트 목록에 즉시 추가 (name이 올바르게 존재하는지 확인)\n      if (!response.data || !response.data.id) {\n        throw new Error(\"프로젝트 생성 후 ID를 찾을 수 없습니다.\");\n      }\n      setProjects(prevProjects => [...prevProjects, response.data]);\n      setSelectedProject(response.data);\n      localStorage.setItem(\"selectedProjectId\", response.data.id);\n      fetchTasks(response.data.id);\n      setShowModal(false);\n    } catch (error) {\n      console.error(\"❌ 프로젝트 생성 실패:\", error);\n      alert(\"프로젝트 생성에 실패했습니다.\");\n    }\n  };\n\n  // ✅ 선택한 프로젝트의 작업(Task) 목록 불러오기\n  const fetchTasks = async projectId => {\n    const token = getAccessToken();\n    if (!token) {\n      alert(\"로그인이 필요합니다.\");\n      navigate(\"/login\");\n      return;\n    }\n    try {\n      const response = await axios.get(`http://localhost:8082/api/user/projects/${projectId}/tasks`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        },\n        withCredentials: true\n      });\n      console.log(`✅ 프로젝트 ${projectId}의 작업 목록:`, response.data);\n      setTasks(response.data);\n    } catch (error) {\n      console.error(`❌ 프로젝트 ${projectId}의 작업 목록 불러오기 실패:`, error);\n    }\n  };\n  // ✅ 프로젝트 선택 시 처리 함수\n  const handleProjectSelect = project => {\n    setSelectedProject(project);\n    fetchTasks(project.id);\n    console.log(\"🔍 선택된 프로젝트:\", project);\n  };\n\n  // ✅ 프로젝트 상세 보기 페이지(TaskPage)로 이동\n  const handleProjectClick = projectId => {\n    navigate(`/task?projectId=${projectId}`);\n  };\n  const fetchInvites = async () => {\n    const token = getAccessToken();\n    try {\n      const response = await axios.get(\"http://localhost:8082/api/team/invites\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(\"📌 받은 초대 목록:\", response.data);\n      setInvites(response.data);\n    } catch (error) {\n      console.error(\"❌ 초대 목록 불러오기 실패:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchProjects(); // ✅ 로그인 시 프로젝트 목록 조회\n    fetchInvites(); // ✅ 로그인 시 초대 목록 조회\n\n    // ✅ WebSocket을 이용하여 초대 목록 자동 갱신\n    const subscribeToInvites = () => {\n      if (stompClient.connected) {\n        stompClient.subscribe(\"/topic/invites\", message => {\n          console.log(\"📩 새 초대 알림:\", message.body);\n          fetchInvites(); // ✅ 새 초대가 오면 목록 다시 불러오기\n        });\n      } else {\n        stompClient.onConnect = () => {\n          subscribeToInvites();\n        };\n      }\n    };\n    if (stompClient.connected) {\n      subscribeToInvites();\n    } else {\n      stompClient.onConnect = subscribeToInvites;\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83D\\uDCC2 \\uD504\\uB85C\\uC81D\\uD2B8 \\uBAA9\\uB85D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }, this), projects.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uD604\\uC7AC \\uD504\\uB85C\\uC81D\\uD2B8\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"project-list-container\",\n          children: projects.map(project => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `project-btn ${(selectedProject === null || selectedProject === void 0 ? void 0 : selectedProject.id) === project.id ? \"active\" : \"\"}`,\n              onClick: () => handleProjectSelect(project)\n              // {setSelectedProject(project);\n              // localStorage.setItem(\"selectedProjectId\", project.id)}\n              ,\n              children: (project === null || project === void 0 ? void 0 : project.name) || \"🚨 이름 없음\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 37\n            }, this)\n          }, project.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"create-project-btn\",\n          onClick: () => setShowModal(true),\n          children: \"\\uC0C8\\uB85C\\uC6B4 \\uD504\\uB85C\\uC81D\\uD2B8 \\uC0DD\\uC131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this), selectedProject ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"clickable-title\",\n          onClick: () => handleProjectClick(selectedProject.id),\n          style: {\n            cursor: \"pointer\",\n            color: \"blue\",\n            textDecoration: \"underline\"\n          } // ✅ 스타일 추가\n          ,\n          children: [\"\\uD83D\\uDCCA \", selectedProject.name, \" - \\uAC04\\uD2B8\\uCC28\\uD2B8\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(GanttChart, {\n          project: selectedProject,\n          tasks: tasks\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-project-selected\",\n        children: \"\\uD83D\\uDCCC \\uD504\\uB85C\\uC81D\\uD2B8\\uB97C \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(TaskBoard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dashboard, {\n        tasks: []\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbox-container\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Chatbox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(InviteList, {\n        refreshProjects: fetchProjects\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InviteList, {\n      refreshProjects: fetchProjects\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 5\n    }, this), showModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uC0C8 \\uD504\\uB85C\\uC81D\\uD2B8 \\uC0DD\\uC131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\uD504\\uB85C\\uC81D\\uD2B8 \\uC774\\uB984\",\n          value: projectName,\n          onChange: e => setProjectName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\uD504\\uB85C\\uC81D\\uD2B8 \\uC124\\uBA85 (\\uC120\\uD0DD \\uC0AC\\uD56D)\",\n          value: projectDescription,\n          onChange: e => setProjectDescription(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCreateProject,\n          children: \"\\uC0DD\\uC131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowModal(false),\n          children: \"\\uCDE8\\uC18C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 9\n  }, this);\n};\n_s(MainPage, \"IMDr85gLIQZri8CABQcmJP8ORxE=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","Sidebar","GanttChart","Chatbox","Dashboard","TaskBoard","axios","useNavigate","useParams","getAccessToken","InviteList","stompClient","jsxDEV","_jsxDEV","MainPage","_s","projects","setProjects","selectedProject","setSelectedProject","tasks","setTasks","showModal","setShowModal","projectName","setProjectName","user","setUser","userId","navigate","projectDescription","setProjectDescription","invites","setInvites","fetchProjects","token","alert","response","get","headers","Authorization","withCredentials","console","log","data","length","formattedProjects","map","project","name","fetchTasks","id","error","_error$response","status","localStorage","removeItem","sessionStorage","refreshAccessToken","refreshToken","getItem","post","setItem","accessToken","handleCreateProject","newProjectData","trim","description","startDate","Date","toISOString","split","Error","prevProjects","projectId","handleProjectSelect","handleProjectClick","fetchInvites","subscribeToInvites","connected","subscribe","message","body","onConnect","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","cursor","color","textDecoration","refreshProjects","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/woo/Documents/git_local/react/0213/src/pages/MainPage.js"],"sourcesContent":["\n\nimport React, { useState, useEffect } from \"react\";\nimport Sidebar from \"../components/Sidebar\";\nimport GanttChart from \"../components/GanttChart\";\nimport Chatbox from \"../components/Chatbox\";\nimport Dashboard from \"../components/Dashboard\";\nimport TaskBoard from \"../components/TaskBoard\";\nimport \"../styles/MainPage.css\";\nimport axios from \"axios\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { getAccessToken } from \"../utils/authUtils\";\nimport InviteList from \"../components/InviteList\"; // ✅ 초대 목록 컴포넌트 추가\nimport { stompClient } from \"../api/websocket\"; // ✅ WebSocket 설정 불러오기\n\n\n\nconst MainPage = () => {\n    const [projects, setProjects] = useState([]); // ✅ 프로젝트 목록 저장\n    const [selectedProject, setSelectedProject] = useState(null); // ✅ 선택한 프로젝트 저장\n    const [tasks, setTasks] = useState([]); // ✅ 선택한 프로젝트의 작업 목록\n    const [showModal, setShowModal] = useState(false);\n    const [projectName, setProjectName] = useState(\"\");\n    const [user, setUser] = useState(null);\n    const { userId } = useParams();\n    const navigate = useNavigate(); // ✅ 페이지 이동\n    const [projectDescription, setProjectDescription] = useState(\"\"); // ✅ 설명 추가\n    const [invites, setInvites] = useState([]); // ✅ 초대 목록 상태 추가\n\n\n    // ✅ 로그인한 사용자의 프로젝트 목록 불러오기\n    const fetchProjects = async () => {\n        const token = getAccessToken();\n        if (!token) {\n            alert(\"로그인이 필요합니다.\");\n            navigate(\"/login\");\n            return;\n        }\n    \n        try {\n            const response = await axios.get(\"http://localhost:8082/api/user/projects\", {\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                    \"Content-Type\": \"application/json\",\n                },\n                withCredentials: true,\n            });\n    \n            console.log(\"✅ 서버에서 가져온 프로젝트 목록:\", response.data);\n            if (response.data && response.data.length > 0) {\n                const formattedProjects = response.data.map(project => ({\n                    ...project,\n                    name: project.name ? project.name : \"🚨 이름 없음\",\n                }));\n                setProjects(formattedProjects);\n                \n                // 🔹 첫 번째 프로젝트를 자동으로 선택\n                setSelectedProject(formattedProjects[0]);\n                fetchTasks(formattedProjects[0].id);\n            }\n        } catch (error) {\n            console.error(\"❌ 프로젝트 목록 불러오기 실패:\", error);\n            if (error.response?.status === 401) {\n                localStorage.removeItem(\"accessToken\");\n                sessionStorage.removeItem(\"accessToken\");\n                navigate(\"/login\");\n            }\n        }\n    };\n    \n\n\n    \n    // 새로운 Access Token 발급\n    const refreshAccessToken = async () => {\n        const refreshToken = localStorage.getItem(\"refreshToken\");\n        if (!refreshToken) {\n            navigate(\"/login\");\n            return;\n        }\n\n        try {\n            const response = await axios.post(\"http://localhost:8082/api/auth/refresh\", {\n                refreshToken,\n            });\n\n            localStorage.setItem(\"accessToken\", response.data.accessToken);\n            sessionStorage.setItem(\"accessToken\", response.data.accessToken); // ✅ 추가: sessionStorage에도 저장\n            console.log(\"✅ 새 Access Token 발급:\", response.data.accessToken);\n            return response.data.accessToken;\n        } catch (error) {\n            console.error(\"🚨 토큰 갱신 실패, 다시 로그인 필요:\", error);\n            navigate(\"/login\");\n        }\n    };\n\n    // ✅ 새로운 프로젝트 생성\n    const handleCreateProject = async () => {\n        const token = getAccessToken(); // sessionStorage에서도 accessToken을 가져올 수 있도록 변경\n\n        if (!token) {\n            alert(\"로그인이 필요합니다.\");\n            navigate(\"/login\");\n            return;\n        }\n\n        try {\n            // 사용자가 입력한 값 반영 (빈 값이면 null 처리)\n            const newProjectData = {\n                name: projectName.trim() !== \"\" ? projectName.trim() : null,\n                description: projectDescription.trim() !== \"\" ? projectDescription.trim() : null,\n                startDate: new Date().toISOString().split(\"T\")[0],\n            };\n\n            const response = await axios.post(\n                \"http://localhost:8082/api/user/projects\", newProjectData, {\n                // { name: projectName, startDate: new Date().toISOString().split(\"T\")[0] },\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                    \"Content-Type\": \"application/json\",\n                },\n                withCredentials: true,\n            });\n\n            console.log(\"✅ 새 프로젝트 생성 응답:\", response.data);\n            // ✅ 프로젝트 생성 후 Task 페이지로 이동\n            navigate(`/task?projectId=${response.data.id}`);\n\n\n            // setProjects([...projects, response.data]);\n            // setSelectedProject(response.data);\n            // localStorage.setItem(\"selectedProjectId\", response.data.id);\n            // setShowModal(false);\n            // ✅ 프로젝트 목록에 즉시 추가 (name이 올바르게 존재하는지 확인)\n            if (!response.data || !response.data.id) {\n                throw new Error(\"프로젝트 생성 후 ID를 찾을 수 없습니다.\");\n            }\n    \n            setProjects((prevProjects) => [...prevProjects, response.data]);\n            setSelectedProject(response.data);\n            localStorage.setItem(\"selectedProjectId\", response.data.id);\n            fetchTasks(response.data.id);\n            setShowModal(false);\n        } catch (error) {\n            console.error(\"❌ 프로젝트 생성 실패:\", error);\n            alert(\"프로젝트 생성에 실패했습니다.\");\n        }\n    };\n\n    // ✅ 선택한 프로젝트의 작업(Task) 목록 불러오기\n    const fetchTasks = async (projectId) => {\n        const token = getAccessToken();\n        if (!token) {\n            alert(\"로그인이 필요합니다.\");\n            navigate(\"/login\");\n            return;\n        }\n\n        try {\n            const response = await axios.get(`http://localhost:8082/api/user/projects/${projectId}/tasks`, {\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                    \"Content-Type\": \"application/json\",\n                },\n                withCredentials: true,\n            });\n\n            console.log(`✅ 프로젝트 ${projectId}의 작업 목록:`, response.data);\n            setTasks(response.data);\n        } catch (error) {\n            console.error(`❌ 프로젝트 ${projectId}의 작업 목록 불러오기 실패:`, error);\n        }\n    };\n    // ✅ 프로젝트 선택 시 처리 함수\n    const handleProjectSelect = (project) => {\n        setSelectedProject(project);\n        fetchTasks(project.id);\n        console.log(\"🔍 선택된 프로젝트:\", project);\n    };\n\n       // ✅ 프로젝트 상세 보기 페이지(TaskPage)로 이동\n       const handleProjectClick = (projectId) => {\n        navigate(`/task?projectId=${projectId}`);\n    };\n\n    const fetchInvites = async () => {\n        const token = getAccessToken();\n        try {\n          const response = await axios.get(\"http://localhost:8082/api/team/invites\", {\n            headers: { Authorization: `Bearer ${token}` },\n          });\n          console.log(\"📌 받은 초대 목록:\", response.data);\n          setInvites(response.data);\n        } catch (error) {\n          console.error(\"❌ 초대 목록 불러오기 실패:\", error);\n        }\n      };\n\n    useEffect(() => {\n        fetchProjects(); // ✅ 로그인 시 프로젝트 목록 조회\n        fetchInvites(); // ✅ 로그인 시 초대 목록 조회\n\n            // ✅ WebSocket을 이용하여 초대 목록 자동 갱신\n        const subscribeToInvites = () => {\n            if (stompClient.connected) {\n                stompClient.subscribe(\"/topic/invites\", (message) => {\n                    console.log(\"📩 새 초대 알림:\", message.body);\n                    fetchInvites(); // ✅ 새 초대가 오면 목록 다시 불러오기\n                });\n            } else {\n                stompClient.onConnect = () => {\n                    subscribeToInvites();\n                };\n            }\n        };\n\n        if (stompClient.connected) {\n            subscribeToInvites();\n        } else {\n            stompClient.onConnect = subscribeToInvites;\n        }\n\n    }, []);\n\n\n    return (\n        <div className=\"main-page\">\n            <div className=\"content\">\n                {/* ✅ 프로젝트 목록 표시 */}\n                <div className=\"project-list\">\n                    <h2>📂 프로젝트 목록</h2>\n                    {projects.length === 0 ? (\n                        <p>현재 프로젝트가 없습니다.</p>\n                    ) : (\n                        <ul className=\"project-list-container\">\n                            {projects.map((project) => (\n                                <li key={project.id}>\n                                    <button\n                                        className={`project-btn ${selectedProject?.id === project.id ? \"active\" : \"\"}`}\n                                        onClick={() =>\n                                            handleProjectSelect(project)\n                                            // {setSelectedProject(project);\n                                            // localStorage.setItem(\"selectedProjectId\", project.id)}\n                                        }\n                                    >\n                                        {/* 수정: 프로젝트 이름이 없을 경우 대비 */}\n                                        {project?.name || \"🚨 이름 없음\"}\n                                    </button>\n                                </li>\n                            ))}\n                        </ul>\n                    )}\n                    <button className=\"create-project-btn\" onClick={() => setShowModal(true)}>\n                        새로운 프로젝트 생성\n                    </button>\n                </div>\n\n                {/* ✅ 선택한 프로젝트의 간트 차트 표시 */}\n                {selectedProject ? (\n                    <div className=\"project-details\">\n                         {/* ✅ 클릭 시 TaskPage로 이동 */}\n                         <h2 \n                            className=\"clickable-title\" \n                            onClick={() => handleProjectClick(selectedProject.id)}\n                            style={{ cursor: \"pointer\", color: \"blue\", textDecoration: \"underline\" }} // ✅ 스타일 추가\n                        >\n                            📊 {selectedProject.name} - 간트차트\n                        </h2>\n                        <GanttChart project={selectedProject} tasks={tasks} />\n                    </div>\n                ) : (\n                    <p className=\"no-project-selected\">📌 프로젝트를 선택해주세요.</p>\n                )}\n\n                <TaskBoard />\n                <Dashboard tasks={[]} />\n            </div>\n            <div className=\"chatbox-container\">\n                <Sidebar />\n                <Chatbox />\n                <InviteList refreshProjects={fetchProjects} />\n            </div>\n    {/* ✅ 초대 알림이 chatbox와 분리되어 표시되도록 변경 */}\n    <InviteList refreshProjects={fetchProjects} />\n            {/* 🔹 프로젝트 생성 모달 */}\n            {showModal && (\n                <div className=\"modal\">\n                    <div className=\"modal-content\">\n                        <h2>새 프로젝트 생성</h2>\n                        <input\n                            type=\"text\"\n                            placeholder=\"프로젝트 이름\"\n                            value={projectName}\n                            onChange={(e) => setProjectName(e.target.value)}\n                        />\n                         <input \n                            type=\"text\" \n                            placeholder=\"프로젝트 설명 (선택 사항)\" \n                            value={projectDescription} \n                            onChange={(e) => setProjectDescription(e.target.value)}\n                        />\n                        <button onClick={handleCreateProject}>생성</button>\n                        <button onClick={() => setShowModal(false)}>취소</button>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default MainPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}